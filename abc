Here is the complete edited TypeScript code for your exchange-rate.component.ts with the popup form integrated inside the same standalone component using Angular Material and MatDialog. This includes:

All required imports

Inline popup logic (for Add and Edit)

Fix for MAT_DIALOG_DATA injection in standalone setup



---

✅ exchange-rate.component.ts

import { Component, inject } from '@angular/core';
import { CommonModule } from '@angular/common';
import { FormBuilder, FormGroup, ReactiveFormsModule } from '@angular/forms';
import { MatDialog, MatDialogModule, MatDialogRef, MAT_DIALOG_DATA } from '@angular/material/dialog';
import { MatFormFieldModule } from '@angular/material/form-field';
import { MatInputModule } from '@angular/material/input';
import { MatIconModule } from '@angular/material/icon';
import { MatButtonModule } from '@angular/material/button';
import { MatDatepickerModule } from '@angular/material/datepicker';
import { MatNativeDateModule } from '@angular/material/core';
import { HttpClient } from '@angular/common/http';
import { MatTableModule } from '@angular/material/table';
import { MatSelectModule } from '@angular/material/select';
import { MatToolbarModule } from '@angular/material/toolbar';

@Component({
  standalone: true,
  selector: 'app-exchange-rate',
  templateUrl: './exchange-rate.component.html',
  styleUrls: ['./exchange-rate.component.css'],
  imports: [
    CommonModule,
    ReactiveFormsModule,
    MatFormFieldModule,
    MatInputModule,
    MatIconModule,
    MatButtonModule,
    MatDatepickerModule,
    MatNativeDateModule,
    MatDialogModule,
    MatTableModule,
    MatSelectModule,
    MatToolbarModule
  ],
})
export class ExchangeRateComponent {
  exchangeRates: any[] = [];
  displayedColumns: string[] = ['fromCurr', 'toCurr', 'rate', 'lastMod', 'actions'];

  constructor(private dialog: MatDialog, private http: HttpClient) {
    this.loadExchangeRates();
  }

  loadExchangeRates(): void {
    this.http.get<any[]>('http://localhost:8080/api/exchange-rates').subscribe(data => {
      this.exchangeRates = data;
    });
  }

  openAddDialog(): void {
    const dialogRef = this.dialog.open(PopupDialog, {
      data: null,
      width: '400px'
    });

    dialogRef.afterClosed().subscribe(result => {
      if (result) {
        this.http.post('http://localhost:8080/api/exchange-rates', result).subscribe(() => {
          this.loadExchangeRates();
        });
      }
    });
  }

  openEditDialog(row: any): void {
    const dialogRef = this.dialog.open(PopupDialog, {
      data: row,
      width: '400px'
    });

    dialogRef.afterClosed().subscribe(result => {
      if (result) {
        this.http.put(`http://localhost:8080/api/exchange-rates/${row.fromCurr}/${row.toCurr}`, result)
          .subscribe(() => this.loadExchangeRates());
      }
    });
  }

  deleteRate(row: any): void {
    const url = `http://localhost:8080/api/exchange-rates/${row.fromCurr}/${row.toCurr}`;
    this.http.delete(url).subscribe(() => this.loadExchangeRates());
  }
}

// ---------- Popup Dialog Component Inline ----------
@Component({
  selector: 'popup-dialog',
  standalone: true,
  templateUrl: './popup-dialog.component.html',
  styleUrls: ['./popup-dialog.component.css'],
  imports: [
    CommonModule,
    ReactiveFormsModule,
    MatFormFieldModule,
    MatInputModule,
    MatButtonModule,
    MatIconModule,
    MatDatepickerModule,
    MatNativeDateModule,
    MatSelectModule
  ],
  providers: [
    { provide: MAT_DIALOG_DATA, useValue: {} }
  ]
})
export class PopupDialog {
  dialogRef = inject(MatDialogRef<PopupDialog>);
  data = inject(MAT_DIALOG_DATA);
  private fb = inject(FormBuilder);

  currencies = ['USD', 'INR', 'EUR', 'JPY', 'SGD', 'GBP'];

  form: FormGroup = this.fb.group({
    fromCurr: [this.data?.fromCurr || ''],
    toCurr: [this.data?.toCurr || ''],
    rate: [this.data?.rate || ''],
    lastMod: [this.data?.lastMod || '']
  });

  save(): void {
    if (this.form.valid) {
      this.dialogRef.close(this.form.value);
    }
  }

  cancel(): void {
    this.dialogRef.close();
  }
}


---

✅ What You Need to Do Next

1. Ensure you create popup-dialog.component.html and popup-dialog.component.css files in the same folder as your exchange-rate.component.ts.


2. Let me know if you want help creating the popup form HTML (popup-dialog.component.html) — I can give you the full UI as per the FIS Data Integrity Manager layout you’re replicating.



Would you like the complete HTML next?

