Here is the complete Spring Boot code for connecting your Angular frontend to an Oracle database using the ExchangeRates_Rachana table and performing CRUD operations.


---

‚úÖ 1. Project Setup

Use Spring Initializr with:

Spring Web

Spring Data JPA

Oracle JDBC

Spring Boot DevTools (optional)




---

‚úÖ 2. application.properties

spring.datasource.url=jdbc:oracle:thin:@localhost:1521:xe
spring.datasource.username=your_db_username
spring.datasource.password=your_db_password
spring.datasource.driver-class-name=oracle.jdbc.OracleDriver

spring.jpa.database-platform=org.hibernate.dialect.Oracle12cDialect
spring.jpa.hibernate.ddl-auto=none
spring.jpa.show-sql=true
server.port=8080


---

‚úÖ 3. ExchangeRate Entity

package com.example.demo.model;

import jakarta.persistence.*;
import java.util.Date;

@Entity
@Table(name = "ExchangeRates_Rachana")
@IdClass(ExchangeRateId.class)
public class ExchangeRate {

    @Id
    @Column(name = "FromCurr")
    private String fromCurrency;

    @Id
    @Column(name = "ToCurr")
    private String toCurrency;

    @Column(name = "Rate")
    private Double rate;

    @Column(name = "LastMod")
    @Temporal(TemporalType.DATE)
    private Date effectiveDate;

    // Getters and Setters
}


---

‚úÖ 4. Composite Key Class

package com.example.demo.model;

import java.io.Serializable;
import java.util.Objects;

public class ExchangeRateId implements Serializable {
    private String fromCurrency;
    private String toCurrency;

    // Constructors, equals, and hashCode
    public ExchangeRateId() {}

    public ExchangeRateId(String fromCurrency, String toCurrency) {
        this.fromCurrency = fromCurrency;
        this.toCurrency = toCurrency;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof ExchangeRateId that)) return false;
        return Objects.equals(fromCurrency, that.fromCurrency) &&
               Objects.equals(toCurrency, that.toCurrency);
    }

    @Override
    public int hashCode() {
        return Objects.hash(fromCurrency, toCurrency);
    }
}


---

‚úÖ 5. Repository

package com.example.demo.repository;

import com.example.demo.model.ExchangeRate;
import com.example.demo.model.ExchangeRateId;
import org.springframework.data.jpa.repository.JpaRepository;

public interface ExchangeRateRepository extends JpaRepository<ExchangeRate, ExchangeRateId> {
}


---

‚úÖ 6. Service

package com.example.demo.service;

import com.example.demo.model.ExchangeRate;
import com.example.demo.model.ExchangeRateId;
import com.example.demo.repository.ExchangeRateRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.util.List;
import java.util.Optional;

@Service
public class ExchangeRateService {

    @Autowired
    private ExchangeRateRepository repository;

    public List<ExchangeRate> getAll() {
        return repository.findAll();
    }

    public ExchangeRate save(ExchangeRate rate) {
        return repository.save(rate);
    }

    public Optional<ExchangeRate> getById(String from, String to) {
        return repository.findById(new ExchangeRateId(from, to));
    }

    public void delete(String from, String to) {
        repository.deleteById(new ExchangeRateId(from, to));
    }
}


---

‚úÖ 7. Controller

package com.example.demo.controller;

import com.example.demo.model.ExchangeRate;
import com.example.demo.service.ExchangeRateService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.*;

import java.util.List;
import java.util.Optional;

@RestController
@RequestMapping("/api/exchange-rates")
@CrossOrigin(origins = "*")
public class ExchangeRateController {

    @Autowired
    private ExchangeRateService service;

    @GetMapping
    public List<ExchangeRate> getAllRates() {
        return service.getAll();
    }

    @PostMapping
    public ExchangeRate create(@RequestBody ExchangeRate rate) {
        return service.save(rate);
    }

    @PutMapping
    public ExchangeRate update(@RequestBody ExchangeRate rate) {
        return service.save(rate);
    }

    @DeleteMapping("/{from}/{to}")
    public void delete(@PathVariable String from, @PathVariable String to) {
        service.delete(from, to);
    }
}


---

‚úÖ 8. Build and Run

Make sure Oracle DB is running.

Table ExchangeRates_Rachana exists with expected columns and primary key.

Run Spring Boot app with:

./mvnw spring-boot:run



---

If you want, I can now give you the matching Angular service code to connect this backend via HTTP. Let me know if you'd like that.




Here are the complete step-by-step instructions to build and run a full-stack Exchange Rate Management application using Spring Boot (Backend with Oracle DB) and your existing Angular 17 frontend.


---

‚úÖ PHASE 1: Oracle DB Setup

1.1. Create the table

Run this in SQL Developer or any Oracle SQL interface:

CREATE TABLE ExchangeRates_Rachana (
    FromCurr VARCHAR2(10),
    ToCurr VARCHAR2(10),
    Rate NUMBER,
    LastMod DATE,
    PRIMARY KEY (FromCurr, ToCurr)
);

1.2. Insert 50 rows (optional)

I‚Äôll generate this if needed, or you can use:

INSERT INTO ExchangeRates_Rachana (FromCurr, ToCurr, Rate, LastMod)
VALUES ('USD', 'EUR', 1.1, TO_DATE('2024-05-01', 'YYYY-MM-DD'));
-- Repeat with varied data


---

‚úÖ PHASE 2: Spring Boot Backend Setup

2.1. Create a new Spring Boot project

Use https://start.spring.io/ with:

Java 17

Dependencies:

Spring Web

Spring Data JPA

Oracle Driver

Spring Boot DevTools (optional)



Click Generate, unzip it, and open in IntelliJ/VS Code/Spring Tool Suite.


---

2.2. Configure application.properties

Edit src/main/resources/application.properties:

spring.datasource.url=jdbc:oracle:thin:@localhost:1521:xe
spring.datasource.username=your_db_username
spring.datasource.password=your_db_password
spring.datasource.driver-class-name=oracle.jdbc.OracleDriver

spring.jpa.hibernate.ddl-auto=none
spring.jpa.database-platform=org.hibernate.dialect.Oracle12cDialect
spring.jpa.show-sql=true
server.port=8080

> üîÅ Replace localhost:1521:xe, username, and password with your DB credentials.




---

2.3. Add the Model and Key Classes

ExchangeRate.java

@Entity
@Table(name = "ExchangeRates_Rachana")
@IdClass(ExchangeRateId.class)
public class ExchangeRate {
    @Id @Column(name = "FromCurr")
    private String fromCurrency;

    @Id @Column(name = "ToCurr")
    private String toCurrency;

    @Column(name = "Rate")
    private Double rate;

    @Column(name = "LastMod")
    @Temporal(TemporalType.DATE)
    private Date effectiveDate;

    // Getters & Setters
}

ExchangeRateId.java

public class ExchangeRateId implements Serializable {
    private String fromCurrency;
    private String toCurrency;

    // Constructors, equals(), hashCode()
}


---

2.4. Add Repository

ExchangeRateRepository.java

public interface ExchangeRateRepository extends JpaRepository<ExchangeRate, ExchangeRateId> {
}


---

2.5. Add Service

ExchangeRateService.java

@Service
public class ExchangeRateService {
    @Autowired
    private ExchangeRateRepository repository;

    public List<ExchangeRate> getAll() { return repository.findAll(); }
    public ExchangeRate save(ExchangeRate rate) { return repository.save(rate); }
    public void delete(String from, String to) {
        repository.deleteById(new ExchangeRateId(from, to));
    }
}


---

2.6. Add Controller

ExchangeRateController.java

@RestController
@RequestMapping("/api/exchange-rates")
@CrossOrigin(origins = "*")
public class ExchangeRateController {
    @Autowired
    private ExchangeRateService service;

    @GetMapping public List<ExchangeRate> getAll() { return service.getAll(); }

    @PostMapping public ExchangeRate create(@RequestBody ExchangeRate rate) {
        return service.save(rate);
    }

    @PutMapping public ExchangeRate update(@RequestBody ExchangeRate rate) {
        return service.save(rate);
    }

    @DeleteMapping("/{from}/{to}")
    public void delete(@PathVariable String from, @PathVariable String to) {
        service.delete(from, to);
    }
}


---

2.7. Run the App

In terminal:

./mvnw spring-boot:run

Or from your IDE by running the main class.

Test endpoints (optional):

GET http://localhost:8080/api/exchange-rates

POST, PUT, DELETE with JSON body



---

‚úÖ PHASE 3: Connect Angular Frontend

3.1. Angular Service: exchange-rate.service.ts

import { HttpClient } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';

export interface ExchangeRate {
  fromCurrency: string;
  toCurrency: string;
  rate: number;
  effectiveDate: string;
}

@Injectable({ providedIn: 'root' })
export class ExchangeRateService {
  private apiUrl = 'http://localhost:8080/api/exchange-rates';

  constructor(private http: HttpClient) {}

  getAll(): Observable<ExchangeRate[]> {
    return this.http.get<ExchangeRate[]>(this.apiUrl);
  }

  add(rate: ExchangeRate): Observable<ExchangeRate> {
    return this.http.post<ExchangeRate>(this.apiUrl, rate);
  }

  update(rate: ExchangeRate): Observable<ExchangeRate> {
    return this.http.put<ExchangeRate>(this.apiUrl, rate);
  }

  delete(from: string, to: string): Observable<void> {
    return this.http.delete<void>(`${this.apiUrl}/${from}/${to}`);
  }
}

3.2. Update your Angular component to use this service

Make sure HttpClientModule is imported in app.module.ts.


---

‚úÖ DONE

Now when you start:

Oracle DB should be up

Spring Boot on http://localhost:8080

Angular frontend calling backend for full CRUD



---

Would you like me to:

Generate insert query for 50 rows?

Review or update your Angular component to wire everything correctly?


Let me know and I‚Äôll help you complete this.

