Thanks for sharing the details and files. Based on your current Angular 17 standalone component and Spring Boot backend, here's how you can complete the dropdown functionality for fromCurr and toCurr values fetched from the backend:


---

✅ Spring Boot: Backend Endpoint for Distinct Currencies

Ensure your backend has the following two endpoints (if not, add them):

@GetMapping("/from-currencies")
public List<String> getFromCurrencies() {
    return repository.findDistinctFromCurr();
}

@GetMapping("/to-currencies")
public List<String> getToCurrencies() {
    return repository.findDistinctToCurr();
}

In your repository interface:

@Query("SELECT DISTINCT e.fromCurr FROM ExchangeRate e")
List<String> findDistinctFromCurr();

@Query("SELECT DISTINCT e.toCurr FROM ExchangeRate e")
List<String> findDistinctToCurr();


---

✅ Angular Frontend Changes

1. exchange-rates.component.ts

Enhance the component logic:

export class ExchangeRatesComponent implements OnInit {
  rates: ExchangeRate[] = [];
  newRate: ExchangeRate = { fromCurr: '', toCurr: '', rate: 0, lastMod: '' };
  isEditing: boolean = false;
  originalFromCurr: string = '';
  apiUrl = 'http://localhost:8080/api/exchange-rates';

  fromCurrencies: string[] = [];
  toCurrencies: string[] = [];

  constructor(private http: HttpClient) {}

  ngOnInit(): void {
    this.fetchRates();
    this.fetchCurrencies();
  }

  fetchRates(): void {
    this.http.get<ExchangeRate[]>(this.apiUrl).subscribe(data => this.rates = data);
  }

  fetchCurrencies(): void {
    this.http.get<string[]>(`${this.apiUrl}/from-currencies`).subscribe(data => this.fromCurrencies = data);
    this.http.get<string[]>(`${this.apiUrl}/to-currencies`).subscribe(data => this.toCurrencies = data);
  }

  save(): void {
    const payload = { ...this.newRate };
    if (this.isEditing) {
      this.http.put(`${this.apiUrl}/${this.originalFromCurr}`, payload).subscribe(() => {
        this.fetchRates();
        this.resetForm();
      });
    } else {
      this.http.post<ExchangeRate>(this.apiUrl, payload).subscribe(() => {
        this.fetchRates();
        this.resetForm();
      });
    }
  }

  edit(rate: ExchangeRate): void {
    this.newRate = { ...rate };
    this.originalFromCurr = rate.fromCurr;
    this.isEditing = true;
  }

  delete(rate: ExchangeRate): void {
    this.http.delete(`${this.apiUrl}/${rate.fromCurr}`).subscribe(() => this.fetchRates());
  }

  resetForm(): void {
    this.newRate = { fromCurr: '', toCurr: '', rate: 0, lastMod: '' };
    this.isEditing = false;
    this.originalFromCurr = '';
  }
}


---

2. exchange-rates.component.html

Update your form with dropdowns:

<div class="form-container">
  <select [(ngModel)]="newRate.fromCurr">
    <option *ngFor="let from of fromCurrencies" [value]="from">{{ from }}</option>
  </select>
  <select [(ngModel)]="newRate.toCurr">
    <option *ngFor="let to of toCurrencies" [value]="to">{{ to }}</option>
  </select>
  <input type="number" [(ngModel)]="newRate.rate" placeholder="Rate" />
  <input type="date" [(ngModel)]="newRate.lastMod" placeholder="Last Modified" />

  <button (click)="save()">{{ isEditing ? 'Update' : 'Add' }}</button>
  <button (click)="resetForm()">Clear</button>
</div>

<table>
  <thead>
    <tr>
      <th>From</th>
      <th>To</th>
      <th>Rate</th>
      <th>Last Modified</th>
      <th>Actions</th>
    </tr>
  </thead>
  <tbody>
    <tr *ngFor="let rate of rates">
      <td>{{ rate.fromCurr }}</td>
      <td>{{ rate.toCurr }}</td>
      <td>{{ rate.rate }}</td>
      <td>{{ rate.lastMod }}</td>
      <td>
        <button (click)="edit(rate)">Edit</button>
        <button (click)="delete(rate)">Delete</button>
      </td>
    </tr>
  </tbody>
</table>


---

✅ Make Sure:

FormsModule is imported in your Angular module if you're using [(ngModel)].

Your Spring Boot CORS config allows requests from your Angular app.



---

Would you like me to package this into a ZIP with all files updated for frontend and backend?

