Here‚Äôs a complete Angular 17 implementation of the exchange rate component, including:

‚úÖ Popup with searchable + sortable dropdowns
‚úÖ Functional Add/Edit with calendar date picker
‚úÖ UI matching the FIS Data Integrity Manager style (per your screenshot)
‚úÖ Integrated currency list popup with selection and pagination


---

‚úÖ Step-by-Step Setup

1. Install Angular Material + Required Modules

ng add @angular/material
npm install @angular/cdk


---

2. Create Service to Fetch Currency List

üìÅ src/app/services/exchange-rate.service.ts

import { Injectable } from '@angular/core';
import { HttpClient } from '@angular/common/http';
import { Observable } from 'rxjs';

@Injectable({ providedIn: 'root' })
export class ExchangeRateService {
  private baseUrl = 'http://localhost:8080/api/exchange-rates';

  constructor(private http: HttpClient) {}

  getAllExchangeRates(): Observable<any[]> {
    return this.http.get<any[]>(`${this.baseUrl}`);
  }

  getCurrencyList(): Observable<string[]> {
    return this.http.get<string[]>(`${this.baseUrl}/currencies`);
  }

  addExchangeRate(rate: any): Observable<any> {
    return this.http.post(`${this.baseUrl}`, rate);
  }

  updateExchangeRate(rate: any): Observable<any> {
    return this.http.put(`${this.baseUrl}`, rate);
  }

  deleteExchangeRate(fromCurr: string, toCurr: string): Observable<any> {
    return this.http.delete(`${this.baseUrl}/${fromCurr}/${toCurr}`);
  }
}


---

3. Exchange Rate Component UI

üìÅ src/app/components/exchange-rate.component.ts

import { Component, OnInit } from '@angular/core';
import { MatDialog } from '@angular/material/dialog';
import { ExchangeRateService } from '../services/exchange-rate.service';
import { ExchangeRatePopupComponent } from './exchange-rate-popup.component';

@Component({
  selector: 'app-exchange-rate',
  templateUrl: './exchange-rate.component.html',
  styleUrls: ['./exchange-rate.component.css'],
  standalone: true,
  imports: [MatDialog],
})
export class ExchangeRateComponent implements OnInit {
  exchangeRates: any[] = [];

  constructor(
    private service: ExchangeRateService,
    private dialog: MatDialog
  ) {}

  ngOnInit(): void {
    this.loadRates();
  }

  loadRates() {
    this.service.getAllExchangeRates().subscribe(data => {
      this.exchangeRates = data;
    });
  }

  openAddPopup() {
    const dialogRef = this.dialog.open(ExchangeRatePopupComponent, {
      width: '600px',
      data: null,
    });

    dialogRef.afterClosed().subscribe(() => this.loadRates());
  }

  openEditPopup(rate: any) {
    const dialogRef = this.dialog.open(ExchangeRatePopupComponent, {
      width: '600px',
      data: rate,
    });

    dialogRef.afterClosed().subscribe(() => this.loadRates());
  }

  deleteRate(fromCurr: string, toCurr: string) {
    this.service.deleteExchangeRate(fromCurr, toCurr).subscribe(() => {
      this.loadRates();
    });
  }
}


---

üìÅ exchange-rate.component.html

<div>
  <button mat-raised-button color="primary" (click)="openAddPopup()">Add Exchange Rate</button>
</div>

<table mat-table [dataSource]="exchangeRates">
  <ng-container matColumnDef="fromCurr">
    <th mat-header-cell *matHeaderCellDef>From Currency</th>
    <td mat-cell *matCellDef="let element">{{ element.fromCurr }}</td>
  </ng-container>

  <ng-container matColumnDef="toCurr">
    <th mat-header-cell *matHeaderCellDef>To Currency</th>
    <td mat-cell *matCellDef="let element">{{ element.toCurr }}</td>
  </ng-container>

  <ng-container matColumnDef="rate">
    <th mat-header-cell *matHeaderCellDef>Rate</th>
    <td mat-cell *matCellDef="let element">{{ element.rate }}</td>
  </ng-container>

  <ng-container matColumnDef="lastMod">
    <th mat-header-cell *matHeaderCellDef>Effective Date</th>
    <td mat-cell *matCellDef="let element">{{ element.lastMod | date }}</td>
  </ng-container>

  <ng-container matColumnDef="actions">
    <th mat-header-cell *matHeaderCellDef>Actions</th>
    <td mat-cell *matCellDef="let element">
      <button mat-button (click)="openEditPopup(element)">Edit</button>
      <button mat-button (click)="deleteRate(element.fromCurr, element.toCurr)">Delete</button>
    </td>
  </ng-container>

  <tr mat-header-row *matHeaderRowDef="['fromCurr', 'toCurr', 'rate', 'lastMod', 'actions']"></tr>
  <tr mat-row *matRowDef="let row; columns: ['fromCurr', 'toCurr', 'rate', 'lastMod', 'actions']"></tr>
</table>


---

4. Popup Component for Add/Edit

üìÅ exchange-rate-popup.component.ts

import { Component, Inject, OnInit } from '@angular/core';
import { MAT_DIALOG_DATA, MatDialogRef, MatDialog } from '@angular/material/dialog';
import { ExchangeRateService } from '../services/exchange-rate.service';
import { FormBuilder, FormGroup } from '@angular/forms';
import { CurrencySearchDialogComponent } from './currency-search-dialog.component';

@Component({
  selector: 'app-exchange-rate-popup',
  templateUrl: './exchange-rate-popup.component.html',
})
export class ExchangeRatePopupComponent implements OnInit {
  form: FormGroup;
  isEdit = false;

  constructor(
    private fb: FormBuilder,
    private service: ExchangeRateService,
    private dialogRef: MatDialogRef<ExchangeRatePopupComponent>,
    private dialog: MatDialog,
    @Inject(MAT_DIALOG_DATA) public data: any
  ) {
    this.isEdit = !!data;
    this.form = this.fb.group({
      fromCurr: [data?.fromCurr || ''],
      toCurr: [data?.toCurr || ''],
      rate: [data?.rate || 1],
      lastMod: [data?.lastMod || new Date()],
    });
  }

  openCurrencySearch(field: 'fromCurr' | 'toCurr') {
    const ref = this.dialog.open(CurrencySearchDialogComponent);
    ref.afterClosed().subscribe(selected => {
      if (selected) {
        this.form.get(field)?.setValue(selected);
      }
    });
  }

  save() {
    const value = this.form.value;
    if (this.isEdit) {
      this.service.updateExchangeRate(value).subscribe(() => this.dialogRef.close());
    } else {
      this.service.addExchangeRate(value).subscribe(() => this.dialogRef.close());
    }
  }
}


---

üìÅ exchange-rate-popup.component.html

<h2 mat-dialog-title>{{ isEdit ? 'Edit' : 'Add' }} Exchange Rate</h2>
<mat-dialog-content [formGroup]="form">
  <mat-form-field>
    <mat-label>From Currency</mat-label>
    <input matInput formControlName="fromCurr" readonly>
    <button mat-icon-button matSuffix (click)="openCurrencySearch('fromCurr')">
      <mat-icon>search</mat-icon>
    </button>
  </mat-form-field>

  <mat-form-field>
    <mat-label>To Currency</mat-label>
    <input matInput formControlName="toCurr" readonly>
    <button mat-icon-button matSuffix (click)="openCurrencySearch('toCurr')">
      <mat-icon>search</mat-icon>
    </button>
  </mat-form-field>

  <mat-form-field>
    <mat-label>Exchange Rate</mat-label>
    <input matInput type="number" formControlName="rate">
  </mat-form-field>

  <mat-form-field>
    <mat-label>Effective Date</mat-label>
    <input matInput [matDatepicker]="picker" formControlName="lastMod">
    <mat-datepicker-toggle matSuffix [for]="picker"></mat-datepicker-toggle>
    <mat-datepicker #picker></mat-datepicker>
  </mat-form-field>
</mat-dialog-content>

<mat-dialog-actions align="end">
  <button mat-button (click)="dialogRef.close()">Cancel</button>
  <button mat-button color="primary" (click)="save()">Save</button>
</mat-dialog-actions>


---

5. Currency Search Dialog

üìÅ currency-search-dialog.component.ts

import { Component, OnInit } from '@angular/core';
import { ExchangeRateService } from '../services/exchange-rate.service';
import { MatDialogRef } from '@angular/material/dialog';

@Component({
  selector: 'app-currency-search-dialog',
  templateUrl: './currency-search-dialog.component.html',
})
export class CurrencySearchDialogComponent implements OnInit {
  allCurrencies: string[] = [];
  filtered: string[] = [];
  search = '';

  constructor(
    private service: ExchangeRateService,
    private dialogRef: MatDialogRef<CurrencySearchDialogComponent>
  ) {}

  ngOnInit(): void {
    this.service.getCurrencyList().subscribe(data => {
      this.allCurrencies = data.sort();
      this.filtered = [...this.allCurrencies];
    });
  }

  applyFilter() {
    const term = this.search.toLowerCase();
    this.filtered = this.allCurrencies.filter(c => c.toLowerCase().includes(term));
  }

  selectCurrency(curr: string) {
    this.dialogRef.close(curr);
  }
}


---

üìÅ currency-search-dialog.component.html

<h2 mat-dialog-title>Select Currency</h2>
<mat-dialog-content>
  <mat-form-field appearance="fill">
    <mat-label>Search</mat-label>
    <input matInput [(ngModel)]="search" (input)="applyFilter()">
  </mat-form-field>

  <mat-selection-list>
    <mat-list-option *ngFor="let c of filtered" (click)="selectCurrency(c)">
      {{ c }}
    </mat-list-option>
  </mat-selection-list>
</mat-dialog-content>

<mat-dialog-actions align="end">
  <button mat-button mat-dialog-close>Cancel</button>
</mat-dialog-actions>


---

Let me know if you'd like the Spring Boot backend code or a ZIP of the full Angular project.

