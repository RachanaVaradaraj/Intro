Here is the corrected exchange-rate.component.ts file, with all necessary imports and the constructor errors removed. This version assumes you're using a popup for Add/Edit actions via MatDialog, but not using MatDialogRef or MAT_DIALOG_DATA in the main ExchangeRateComponent, which was causing the error.


---

✅ exchange-rate.component.ts

import { Component, OnInit } from '@angular/core';
import { FormBuilder, FormGroup, Validators } from '@angular/forms';
import { MatDialog } from '@angular/material/dialog';
import { HttpClient } from '@angular/common/http';

@Component({
  selector: 'app-exchange-rate',
  templateUrl: './exchange-rate.component.html',
  styleUrls: ['./exchange-rate.component.css'],
  standalone: true,
})
export class ExchangeRateComponent implements OnInit {
  exchangeRates: any[] = [];
  displayedColumns: string[] = ['fromCurr', 'toCurr', 'rate', 'lastMod', 'actions'];
  addForm!: FormGroup;
  isEditMode = false;
  editedIndex = -1;

  constructor(
    private fb: FormBuilder,
    private http: HttpClient,
    private dialog: MatDialog
  ) {}

  ngOnInit(): void {
    this.fetchExchangeRates();
    this.initializeForm();
  }

  initializeForm(): void {
    this.addForm = this.fb.group({
      fromCurr: ['', Validators.required],
      toCurr: ['', Validators.required],
      rate: [null, [Validators.required, Validators.pattern(/^\d+(\.\d+)?$/)]],
      lastMod: ['', Validators.required],
    });
  }

  fetchExchangeRates(): void {
    this.http.get<any[]>('http://localhost:8080/api/exchange-rates').subscribe({
      next: data => this.exchangeRates = data,
      error: err => console.error('Error fetching exchange rates:', err)
    });
  }

  openAddDialog(): void {
    this.isEditMode = false;
    this.addForm.reset();
    // Open popup here if applicable using this.dialog.open(...) with a popup component
  }

  editRate(index: number): void {
    this.isEditMode = true;
    this.editedIndex = index;
    const rate = this.exchangeRates[index];
    this.addForm.patchValue(rate);
    // Open popup here if applicable
  }

  deleteRate(index: number): void {
    const rateToDelete = this.exchangeRates[index];
    this.http.delete(`http://localhost:8080/api/exchange-rates`, {
      body: {
        fromCurr: rateToDelete.fromCurr,
        toCurr: rateToDelete.toCurr,
        lastMod: rateToDelete.lastMod
      }
    }).subscribe({
      next: () => {
        this.exchangeRates.splice(index, 1);
      },
      error: err => console.error('Delete failed:', err)
    });
  }

  saveRate(): void {
    if (this.addForm.invalid) return;

    const rateData = this.addForm.value;
    if (this.isEditMode) {
      this.http.put('http://localhost:8080/api/exchange-rates', rateData).subscribe({
        next: () => {
          this.exchangeRates[this.editedIndex] = rateData;
          this.addForm.reset();
          this.isEditMode = false;
        },
        error: err => console.error('Update failed:', err)
      });
    } else {
      this.http.post('http://localhost:8080/api/exchange-rates', rateData).subscribe({
        next: data => {
          this.exchangeRates.push(data);
          this.addForm.reset();
        },
        error: err => console.error('Add failed:', err)
      });
    }
  }
}


---

✅ Notes:

This component uses MatDialog only for opening dialogs, not injecting MatDialogRef or MAT_DIALOG_DATA.

Ensure the popup is handled using a separate component if required, and inject MAT_DIALOG_DATA and MatDialogRef only in that component, not here.

The standalone: true is preserved for Angular 17 standalone component structure.



---

Let me know if you need the popup form code as well, or integration with a specific popup/dialog component.

