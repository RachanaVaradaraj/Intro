Here’s the complete package structure and code for your Spring Boot project recon_connect, connected to the Oracle table ExchangeRates_Rachana with full CRUD support.


---

✅ Project Structure

recon_connect/
├── src/
│   └── main/
│       ├── java/
│       │   └── com/
│       │       └── example/
│       │           └── recon_connect/
│       │               ├── ReconApplication.java
│       │               ├── controller/
│       │               │   └── ExchangeRateController.java
│       │               ├── entity/
│       │               │   ├── ExchangeRate.java
│       │               │   └── ExchangeRateId.java
│       │               ├── repository/
│       │               │   └── ExchangeRateRepository.java
│       │               └── service/
│       │                   └── ExchangeRateService.java
│       └── resources/
│           ├── application.properties
│           └── ...


---

✅ 1. ReconApplication.java

package com.example.recon_connect;

import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;

@SpringBootApplication
public class ReconApplication {
    public static void main(String[] args) {
        SpringApplication.run(ReconApplication.class, args);
    }
}


---

✅ 2. ExchangeRateId.java (Composite Key)

package com.example.recon_connect.entity;

import java.io.Serializable;
import java.util.Objects;
import jakarta.persistence.Embeddable;

@Embeddable
public class ExchangeRateId implements Serializable {
    private String fromCurr;
    private String toCurr;

    public ExchangeRateId() {}

    public ExchangeRateId(String fromCurr, String toCurr) {
        this.fromCurr = fromCurr;
        this.toCurr = toCurr;
    }

    // Getters, Setters, equals(), hashCode()
}


---

✅ 3. ExchangeRate.java (Entity)

package com.example.recon_connect.entity;

import jakarta.persistence.*;
import java.util.Date;

@Entity
@IdClass(ExchangeRateId.class)
@Table(name = "ExchangeRates_Rachana")
public class ExchangeRate {

    @Id
    @Column(name = "FROMCURR")
    private String fromCurr;

    @Id
    @Column(name = "TOCURR")
    private String toCurr;

    @Column(name = "RATE")
    private Double rate;

    @Column(name = "LASTMOD")
    @Temporal(TemporalType.DATE)
    private Date lastMod;

    // Getters and Setters
}


---

✅ 4. ExchangeRateRepository.java

package com.example.recon_connect.repository;

import com.example.recon_connect.entity.ExchangeRate;
import com.example.recon_connect.entity.ExchangeRateId;
import org.springframework.data.jpa.repository.JpaRepository;

public interface ExchangeRateRepository extends JpaRepository<ExchangeRate, ExchangeRateId> {}


---

✅ 5. ExchangeRateService.java

package com.example.recon_connect.service;

import com.example.recon_connect.entity.ExchangeRate;
import com.example.recon_connect.entity.ExchangeRateId;
import com.example.recon_connect.repository.ExchangeRateRepository;
import org.springframework.stereotype.Service;

import java.util.List;
import java.util.Optional;

@Service
public class ExchangeRateService {

    private final ExchangeRateRepository repository;

    public ExchangeRateService(ExchangeRateRepository repository) {
        this.repository = repository;
    }

    public List<ExchangeRate> getAllRates() {
        return repository.findAll();
    }

    public Optional<ExchangeRate> getRateById(ExchangeRateId id) {
        return repository.findById(id);
    }

    public ExchangeRate saveOrUpdate(ExchangeRate rate) {
        return repository.save(rate);
    }

    public void deleteById(ExchangeRateId id) {
        repository.deleteById(id);
    }
}


---

✅ 6. ExchangeRateController.java

package com.example.recon_connect.controller;

import com.example.recon_connect.entity.ExchangeRate;
import com.example.recon_connect.entity.ExchangeRateId;
import com.example.recon_connect.service.ExchangeRateService;
import org.springframework.web.bind.annotation.*;

import java.util.List;

@RestController
@RequestMapping("/api/exchange-rates")
@CrossOrigin(origins = "*")
public class ExchangeRateController {

    private final ExchangeRateService service;

    public ExchangeRateController(ExchangeRateService service) {
        this.service = service;
    }

    @GetMapping
    public List<ExchangeRate> getAll() {
        return service.getAllRates();
    }

    @PostMapping
    public ExchangeRate save(@RequestBody ExchangeRate rate) {
        return service.saveOrUpdate(rate);
    }

    @DeleteMapping("/{from}/{to}")
    public void delete(@PathVariable String from, @PathVariable String to) {
        service.deleteById(new ExchangeRateId(from, to));
    }
}


---

✅ 7. application.properties

spring.datasource.url=jdbc:oracle:thin:@localhost:1521:XE
spring.datasource.username=your_oracle_username
spring.datasource.password=your_oracle_password
spring.datasource.driver-class-name=oracle.jdbc.OracleDriver

spring.jpa.hibernate.ddl-auto=none
spring.jpa.show-sql=true
spring.jpa.database-platform=org.hibernate.dialect.Oracle12cDialect


---

Would you like this in a downloadable zip or GitHub structure? Or do you want the Angular frontend hooked to this API too?

