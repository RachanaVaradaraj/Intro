Thank you for the clarification. Since you're working only within the exchange-rate component (with no separate exchange-rate.service.ts), I'll now provide the complete working Angular code (TS, HTML, and CSS) using only 3 files (exchange-rate.component.ts, .html, and .css), where:

The table fetches and shows all exchange rate rows.

The Add popup fetches only fromCurr and toCurr column values from the backend and displays them as dropdowns.

The popup includes fields for rate and lastMod.



---

✅ exchange-rate.component.ts

import { Component, OnInit } from '@angular/core';
import { HttpClient } from '@angular/common/http';

@Component({
  selector: 'app-exchange-rate',
  templateUrl: './exchange-rate.component.html',
  styleUrls: ['./exchange-rate.component.css']
})
export class ExchangeRateComponent implements OnInit {
  exchangeRates: any[] = [];
  fromCurrencies: string[] = [];
  toCurrencies: string[] = [];

  isPopupOpen = false;

  newExchangeRate = {
    fromCurr: '',
    toCurr: '',
    rate: null,
    lastMod: new Date()
  };

  constructor(private http: HttpClient) {}

  ngOnInit(): void {
    this.loadExchangeRates();
  }

  loadExchangeRates(): void {
    this.http.get<any[]>('http://localhost:8080/api/exchange-rates')
      .subscribe(data => {
        this.exchangeRates = data;
      });
  }

  openAddPopup(): void {
    this.isPopupOpen = true;
    this.newExchangeRate = {
      fromCurr: '',
      toCurr: '',
      rate: null,
      lastMod: new Date()
    };

    this.http.get<string[]>('http://localhost:8080/api/exchange-rates/from-currencies')
      .subscribe(data => this.fromCurrencies = data);

    this.http.get<string[]>('http://localhost:8080/api/exchange-rates/to-currencies')
      .subscribe(data => this.toCurrencies = data);
  }

  closePopup(): void {
    this.isPopupOpen = false;
  }

  addExchangeRate(): void {
    this.http.post('http://localhost:8080/api/exchange-rates', this.newExchangeRate)
      .subscribe(() => {
        this.closePopup();
        this.loadExchangeRates();
      });
  }
}


---

✅ exchange-rate.component.html

<div class="container">
  <h2>Exchange Rates</h2>

  <table>
    <thead>
      <tr>
        <th>From Currency</th>
        <th>To Currency</th>
        <th>Rate</th>
        <th>Last Modified</th>
      </tr>
    </thead>
    <tbody>
      <tr *ngFor="let rate of exchangeRates">
        <td>{{ rate.fromCurr }}</td>
        <td>{{ rate.toCurr }}</td>
        <td>{{ rate.rate }}</td>
        <td>{{ rate.lastMod | date:'yyyy-MM-dd' }}</td>
      </tr>
    </tbody>
  </table>

  <button (click)="openAddPopup()">Add</button>

  <!-- Popup -->
  <div class="popup" *ngIf="isPopupOpen">
    <div class="popup-content">
      <h3>Add Exchange Rate</h3>

      <label>From Currency:</label>
      <select [(ngModel)]="newExchangeRate.fromCurr">
        <option *ngFor="let curr of fromCurrencies" [value]="curr">{{ curr }}</option>
      </select>

      <label>To Currency:</label>
      <select [(ngModel)]="newExchangeRate.toCurr">
        <option *ngFor="let curr of toCurrencies" [value]="curr">{{ curr }}</option>
      </select>

      <label>Rate:</label>
      <input type="number" [(ngModel)]="newExchangeRate.rate" />

      <label>Last Modified:</label>
      <input type="date" [(ngModel)]="newExchangeRate.lastMod" />

      <div class="actions">
        <button (click)="addExchangeRate()">Save</button>
        <button (click)="closePopup()">Cancel</button>
      </div>
    </div>
  </div>
</div>


---

✅ exchange-rate.component.css

.container {
  padding: 20px;
  font-family: Arial, sans-serif;
}

table {
  width: 100%;
  border-collapse: collapse;
  margin-bottom: 15px;
}

th, td {
  border: 1px solid #ccc;
  padding: 8px;
  text-align: center;
}

button {
  margin-top: 10px;
  padding: 8px 12px;
  cursor: pointer;
}

.popup {
  position: fixed;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  background-color: rgba(0, 0, 0, 0.5);
}

.popup-content {
  background: #fff;
  margin: 100px auto;
  padding: 20px;
  width: 400px;
  border-radius: 8px;
}

.popup-content label {
  display: block;
  margin: 10px 0 5px;
}

.popup-content input,
.popup-content select {
  width: 100%;
  padding: 6px;
  margin-bottom: 10px;
}

.actions {
  display: flex;
  justify-content: space-between;
}


---

✅ Required Angular Module Setup

Ensure these modules are imported in your AppModule:

import { FormsModule } from '@angular/forms';
import { HttpClientModule } from '@angular/common/http';

@NgModule({
  imports: [
    FormsModule,
    HttpClientModule
  ]
})


---

Would you now like the matching Spring Boot code to provide the following endpoints?

GET /api/exchange-rates → all exchange rate rows

GET /api/exchange-rates/from-currencies → unique fromCurr

GET /api/exchange-rates/to-currencies → unique toCurr

POST /api/exchange-rates → add new row


Let me know and I’ll provide that too.

