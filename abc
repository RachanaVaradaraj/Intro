Here is a complete Angular 17 standalone component that replicates the table in your screenshot (FIS Data Integrity Manager) with the following features:

‚úÖ Editable fields directly in the table
‚úÖ "Add", "Delete" buttons styled as in image
‚úÖ Calendar (datepicker) for effective date
‚úÖ Checkbox for selecting rows
‚úÖ Fully scrollable and styled like the image


---

üìÅ exchange-rates.component.ts

import { Component } from '@angular/core';
import { CommonModule } from '@angular/common';
import { FormsModule } from '@angular/forms';
import {
  MatTableModule,
  MatCheckboxModule,
  MatFormFieldModule,
  MatInputModule,
  MatButtonModule,
  MatIconModule,
  MatDatepickerModule,
  MatNativeDateModule
} from '@angular/material';

interface ExchangeRate {
  fromCurrency: string;
  toCurrency: string;
  exchangeRate: number;
  effectiveDate: Date;
}

@Component({
  selector: 'app-exchange-rates',
  standalone: true,
  imports: [
    CommonModule,
    FormsModule,
    MatTableModule,
    MatCheckboxModule,
    MatFormFieldModule,
    MatInputModule,
    MatButtonModule,
    MatIconModule,
    MatDatepickerModule,
    MatNativeDateModule,
  ],
  templateUrl: './exchange-rates.component.html',
  styleUrls: ['./exchange-rates.component.css']
})
export class ExchangeRatesComponent {
  exchangeRates: ExchangeRate[] = [
    { fromCurrency: 'ZWL', toCurrency: 'ZAR', exchangeRate: 1, effectiveDate: new Date('2025-06-05') }
  ];

  selectedRows = new Set<number>();

  addRow() {
    this.exchangeRates.push({
      fromCurrency: '',
      toCurrency: '',
      exchangeRate: 1,
      effectiveDate: new Date()
    });
  }

  deleteSelected() {
    this.exchangeRates = this.exchangeRates.filter((_, i) => !this.selectedRows.has(i));
    this.selectedRows.clear();
  }

  toggleSelection(index: number) {
    this.selectedRows.has(index) ? this.selectedRows.delete(index) : this.selectedRows.add(index);
  }
}


---

üìÅ exchange-rates.component.html

<div class="toolbar">
  <button mat-raised-button color="primary" (click)="addRow()">
    <mat-icon>add</mat-icon>
  </button>
  <button mat-raised-button color="warn" (click)="deleteSelected()">
    <mat-icon>delete</mat-icon>
  </button>
</div>

<div class="table-wrapper">
  <table mat-table [dataSource]="exchangeRates" class="mat-elevation-z1">

    <!-- Checkbox Column -->
    <ng-container matColumnDef="select">
      <th mat-header-cell *matHeaderCellDef></th>
      <td mat-cell *matCellDef="let row; let i = index">
        <mat-checkbox (change)="toggleSelection(i)" [checked]="selectedRows.has(i)"></mat-checkbox>
      </td>
    </ng-container>

    <!-- From Currency -->
    <ng-container matColumnDef="fromCurrency">
      <th mat-header-cell *matHeaderCellDef>From Currency</th>
      <td mat-cell *matCellDef="let row">
        <input matInput [(ngModel)]="row.fromCurrency" class="input-cell" />
      </td>
    </ng-container>

    <!-- To Currency -->
    <ng-container matColumnDef="toCurrency">
      <th mat-header-cell *matHeaderCellDef>To Currency</th>
      <td mat-cell *matCellDef="let row">
        <input matInput [(ngModel)]="row.toCurrency" class="input-cell" />
      </td>
    </ng-container>

    <!-- Exchange Rate -->
    <ng-container matColumnDef="exchangeRate">
      <th mat-header-cell *matHeaderCellDef>Exchange Rate</th>
      <td mat-cell *matCellDef="let row">
        <input matInput type="number" [(ngModel)]="row.exchangeRate" class="input-cell" />
      </td>
    </ng-container>

    <!-- Effective Date -->
    <ng-container matColumnDef="effectiveDate">
      <th mat-header-cell *matHeaderCellDef>Effective Date</th>
      <td mat-cell *matCellDef="let row">
        <input matInput [matDatepicker]="picker{{row.effectiveDate}}" [(ngModel)]="row.effectiveDate" />
        <mat-datepicker-toggle matSuffix [for]="picker{{row.effectiveDate}}"></mat-datepicker-toggle>
        <mat-datepicker #picker{{row.effectiveDate}}></mat-datepicker>
      </td>
    </ng-container>

    <tr mat-header-row *matHeaderRowDef="['select', 'fromCurrency', 'toCurrency', 'exchangeRate', 'effectiveDate']"></tr>
    <tr mat-row *matRowDef="let row; columns: ['select', 'fromCurrency', 'toCurrency', 'exchangeRate', 'effectiveDate']"></tr>
  </table>
</div>


---

üìÅ exchange-rates.component.css

.table-wrapper {
  max-height: 70vh;
  overflow-y: auto;
  border: 1px solid #ccc;
  border-radius: 4px;
}

table {
  width: 100%;
  border-spacing: 0;
}

.toolbar {
  display: flex;
  gap: 8px;
  margin: 10px 0;
}

mat-header-cell, mat-cell {
  padding: 8px;
  text-align: left;
}

.input-cell {
  width: 100%;
}

mat-form-field {
  width: 100%;
}


---

üìù Notes

You must import Angular Material into your project and include BrowserAnimationsModule in your app‚Äôs root module.

Ensure your Angular project uses the Angular Material theme for consistent styling.

You can adjust colors, sizes, etc., to fine-tune the appearance to match the image more closely.



---

Let me know if you‚Äôd like the dropdown search for currencies or backend integration (e.g. Java + Oracle DB).

