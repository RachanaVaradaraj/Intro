Sure! Here's the complete code for both the Angular component and the Spring Boot controller, updated so that:

Editing correctly updates the row instead of adding a new one.

fromCurr is disabled during edit (since it’s the primary key).

Delete works as expected.



---

✅ Angular (Frontend)

exchange-rates.component.ts

import { Component, OnInit } from '@angular/core';
import { HttpClient } from '@angular/common/http';

interface ExchangeRate {
  fromCurr: string;
  toCurr: string;
  rate: number;
  lastMod: string;
}

@Component({
  selector: 'app-exchange-rates',
  templateUrl: './exchange-rates.component.html',
  styleUrls: ['./exchange-rates.component.css']
})
export class ExchangeRatesComponent implements OnInit {
  rates: ExchangeRate[] = [];
  newRate: ExchangeRate = { fromCurr: '', toCurr: '', rate: 0, lastMod: '' };
  editingRate: ExchangeRate | null = null;
  apiUrl = 'http://localhost:8080/api/exchange-rates';

  constructor(private http: HttpClient) {}

  ngOnInit(): void {
    this.fetchRates();
  }

  fetchRates(): void {
    this.http.get<ExchangeRate[]>(this.apiUrl).subscribe(data => {
      this.rates = data;
    });
  }

  save(): void {
    const payload = this.editingRate ? this.editingRate : this.newRate;

    const request = this.editingRate
      ? this.http.put(`${this.apiUrl}/${this.editingRate.fromCurr}`, payload)
      : this.http.post(this.apiUrl, payload);

    request.subscribe(() => {
      this.resetForm();
      this.fetchRates();
    });
  }

  edit(rate: ExchangeRate): void {
    this.editingRate = { ...rate };
  }

  delete(rate: ExchangeRate): void {
    this.http
      .delete(`${this.apiUrl}/${rate.fromCurr}`)
      .subscribe(() => this.fetchRates());
  }

  resetForm(): void {
    this.newRate = { fromCurr: '', toCurr: '', rate: 0, lastMod: '' };
    this.editingRate = null;
  }
}


---

exchange-rates.component.html

<div>
  <h2>{{ editingRate ? 'Edit Exchange Rate' : 'Add Exchange Rate' }}</h2>

  <form (ngSubmit)="save()">
    <input
      type="text"
      placeholder="From Currency"
      [(ngModel)]="editingRate ? editingRate.fromCurr : newRate.fromCurr"
      [disabled]="editingRate !== null"
      name="fromCurr"
      required
    />
    <input
      type="text"
      placeholder="To Currency"
      [(ngModel)]="editingRate ? editingRate.toCurr : newRate.toCurr"
      name="toCurr"
      required
    />
    <input
      type="number"
      placeholder="Rate"
      [(ngModel)]="editingRate ? editingRate.rate : newRate.rate"
      name="rate"
      required
    />
    <input
      type="date"
      [(ngModel)]="editingRate ? editingRate.lastMod : newRate.lastMod"
      name="lastMod"
      required
    />
    <button type="submit">{{ editingRate ? 'Update' : 'Add' }}</button>
    <button type="button" (click)="resetForm()">Cancel</button>
  </form>

  <table>
    <thead>
      <tr>
        <th>From</th>
        <th>To</th>
        <th>Rate</th>
        <th>Last Modified</th>
        <th>Actions</th>
      </tr>
    </thead>
    <tbody>
      <tr *ngFor="let rate of rates">
        <td>{{ rate.fromCurr }}</td>
        <td>{{ rate.toCurr }}</td>
        <td>{{ rate.rate }}</td>
        <td>{{ rate.lastMod }}</td>
        <td>
          <button (click)="edit(rate)">Edit</button>
          <button (click)="delete(rate)">Delete</button>
        </td>
      </tr>
    </tbody>
  </table>
</div>


---

✅ Spring Boot (Backend)

ExchangeRateController.java

@RestController
@RequestMapping("/api/exchange-rates")
@CrossOrigin(origins = "*")
public class ExchangeRateController {

    private final ExchangeRateRepository repository;

    public ExchangeRateController(ExchangeRateRepository repository) {
        this.repository = repository;
    }

    @GetMapping
    public List<ExchangeRate> getAll() {
        return repository.findAll();
    }

    @PostMapping
    public ExchangeRate add(@RequestBody ExchangeRate rate) {
        return repository.save(rate);
    }

    @PutMapping("/{fromCurr}")
    public ExchangeRate update(@PathVariable String fromCurr, @RequestBody ExchangeRate rate) {
        Optional<ExchangeRate> existing = repository.findById(fromCurr);
        if (existing.isPresent()) {
            ExchangeRate existingRate = existing.get();
            existingRate.setToCurr(rate.getToCurr());
            existingRate.setRate(rate.getRate());
            existingRate.setLastMod(rate.getLastMod());
            return repository.save(existingRate);
        } else {
            return repository.save(rate); // Or return an error if strict update
        }
    }

    @DeleteMapping("/{fromCurr}")
    public void delete(@PathVariable String fromCurr) {
        repository.deleteById(fromCurr);
    }
}


---

Let me know if you want:

A popup form instead of inline.

Validation messages.

Spring Boot error handling for missing records or invalid input.


