Thanks! Here's how to allow users to either type or select from dropdowns for fromCurr and toCurr fields in the Add/Edit popup in Angular — using Angular Material's mat-autocomplete.


---

✅ 1. HTML Code for Popup Form

Update your exchange-rate.component.html popup form like this:

<ng-template #dialogTemplate>
  <h2 mat-dialog-title>{{ isEdit ? 'Edit' : 'Add' }} Exchange Rate</h2>
  <mat-dialog-content class="popup-form">
    <form #rateForm="ngForm">

      <!-- FROM CURRENCY -->
      <mat-form-field appearance="outline" class="full-width">
        <mat-label>From Currency</mat-label>
        <input type="text"
               matInput
               [(ngModel)]="dialogData.fromCurr"
               [matAutocomplete]="fromCurrAuto"
               name="fromCurr">
        <mat-autocomplete #fromCurrAuto="matAutocomplete">
          <mat-option *ngFor="let option of fromCurrOptions" [value]="option">
            {{ option }}
          </mat-option>
        </mat-autocomplete>
      </mat-form-field>

      <!-- TO CURRENCY -->
      <mat-form-field appearance="outline" class="full-width">
        <mat-label>To Currency</mat-label>
        <input type="text"
               matInput
               [(ngModel)]="dialogData.toCurr"
               [matAutocomplete]="toCurrAuto"
               name="toCurr">
        <mat-autocomplete #toCurrAuto="matAutocomplete">
          <mat-option *ngFor="let option of toCurrOptions" [value]="option">
            {{ option }}
          </mat-option>
        </mat-autocomplete>
      </mat-form-field>

      <!-- RATE -->
      <mat-form-field appearance="outline" class="full-width">
        <mat-label>Rate</mat-label>
        <input type="number" matInput [(ngModel)]="dialogData.rate" name="rate">
      </mat-form-field>

      <!-- LAST MOD DATE -->
      <mat-form-field appearance="outline" class="full-width">
        <mat-label>Effective Date</mat-label>
        <input matInput [matDatepicker]="picker" [(ngModel)]="dialogData.lastMod" name="lastMod">
        <mat-datepicker-toggle matSuffix [for]="picker">
          <mat-icon matDatepickerToggleIcon>calendar_today</mat-icon>
        </mat-datepicker-toggle>
        <mat-datepicker #picker></mat-datepicker>
      </mat-form-field>

    </form>
  </mat-dialog-content>

  <mat-dialog-actions align="end">
    <button mat-button (click)="dialog.closeAll()">Cancel</button>
    <button mat-flat-button color="primary" (click)="saveExchangeRate()">
      {{ isEdit ? 'Update' : 'Add' }}
    </button>
  </mat-dialog-actions>
</ng-template>


---

✅ 2. TypeScript (exchange-rate.component.ts)

Make sure you have:

fromCurrOptions: string[] = [];
toCurrOptions: string[] = [];

openDialog(isEdit = false, row?: ExchangeRate) {
  this.isEdit = isEdit;
  this.dialogData = isEdit && row ? { ...row } : {
    fromCurr: '',
    toCurr: '',
    rate: 0,
    lastMod: ''
  };

  // Fetch dropdown values
  this.service.getFromCurrencies().subscribe(data => this.fromCurrOptions = data);
  this.service.getToCurrencies().subscribe(data => this.toCurrOptions = data);

  this.dialog.open(this.dialogTemplate);
}


---

✅ 3. Angular Material Modules (ensure imported)

In your Angular module (likely app.config.ts or app.module.ts), make sure you imported:

import { MatFormFieldModule } from '@angular/material/form-field';
import { MatInputModule } from '@angular/material/input';
import { MatAutocompleteModule } from '@angular/material/autocomplete';
import { MatDialogModule } from '@angular/material/dialog';
import { MatDatepickerModule } from '@angular/material/datepicker';
import { MatNativeDateModule } from '@angular/material/core';


---

Result:

User can type freely or select from dropdown for both currency fields.

This works beautifully with keyboard + mouse and provides suggestions from the backend list.


Let me know if you want the full .ts or CSS file adjusted to match this.

