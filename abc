Thanks for the clarification. If you want to allow duplicate values in the table (i.e., fromCurr and toCurr can repeat), then you must not mark them as @Id, because Hibernate enforces uniqueness on primary keys.

Instead, you should add a surrogate primary key (like an id column) and make that the actual @Id. This allows duplicates in fromCurr and toCurr.


---

✅ Step 1: Modify the Table (Oracle)

Update your Oracle table to add an ID column (if not already present):

ALTER TABLE ExchangeRates_Rachana ADD ID NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY;


---

✅ Step 2: Update Your Entity

Here’s the updated ExchangeRate.java:

package com.recon_connect.entity;

import jakarta.persistence.*;
import java.util.Date;

@Entity
@Table(name = "ExchangeRates_Rachana")
public class ExchangeRate {

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    @Column(name = "ID")
    private Long id;

    @Column(name = "FROMCURR")
    private String fromCurr;

    @Column(name = "TOCURR")
    private String toCurr;

    @Column(name = "RATE")
    private Double rate;

    @Column(name = "LASTMOD")
    @Temporal(TemporalType.DATE)
    private Date lastMod;

    public ExchangeRate() {
    }

    public ExchangeRate(String fromCurr, String toCurr, Double rate, Date lastMod) {
        this.fromCurr = fromCurr;
        this.toCurr = toCurr;
        this.rate = rate;
        this.lastMod = lastMod;
    }

    public Long getId() { return id; }
    public void setId(Long id) { this.id = id; }

    public String getFromCurr() { return fromCurr; }
    public void setFromCurr(String fromCurr) { this.fromCurr = fromCurr; }

    public String getToCurr() { return toCurr; }
    public void setToCurr(String toCurr) { this.toCurr = toCurr; }

    public Double getRate() { return rate; }
    public void setRate(Double rate) { this.rate = rate; }

    public Date getLastMod() { return lastMod; }
    public void setLastMod(Date lastMod) { this.lastMod = lastMod; }
}


---

✅ Step 3: Update Repository

Update the repository interface:

package com.recon_connect.repository;

import com.recon_connect.entity.ExchangeRate;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.stereotype.Repository;

@Repository
public interface ExchangeRateRepository extends JpaRepository<ExchangeRate, Long> {
}


---

✅ Step 4: Frontend Changes

Make sure the Angular table and edit/delete logic now rely on the id field instead of a combination of fromCurr and toCurr.


---

✅ Benefits

You can store multiple rows with the same fromCurr and toCurr.

Hibernate no longer throws Duplicate row errors.

You have a unique identifier (id) for updates and deletes.



---

Would you like me to help update your Angular component to work with this id field as the unique key?

