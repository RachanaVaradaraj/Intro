To allow duplicate values for fromCurr and toCurr in your Oracle database and Spring Boot application, follow these three steps carefully:


---

‚úÖ Step 1: Update Oracle Table

Add a surrogate primary key ID that uniquely identifies each row. This will allow duplicate values in fromCurr and toCurr.

Run this SQL:

ALTER TABLE ExchangeRates_Rachana ADD ID NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY;

> ‚òëÔ∏è This adds a new ID column with auto-incrementing values and makes it the primary key.




---

‚úÖ Step 2: Update Your Spring Boot Entity

Here‚Äôs the correct ExchangeRate.java entity with id as the primary key:

package com.recon_connect.entity;

import jakarta.persistence.*;
import java.util.Date;

@Entity
@Table(name = "ExchangeRates_Rachana")
public class ExchangeRate {

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    @Column(name = "ID")
    private Long id;

    @Column(name = "FROMCURR")
    private String fromCurr;

    @Column(name = "TOCURR")
    private String toCurr;

    @Column(name = "RATE")
    private Double rate;

    @Column(name = "LASTMOD")
    @Temporal(TemporalType.DATE)
    private Date lastMod;

    // Constructors
    public ExchangeRate() {}

    public ExchangeRate(String fromCurr, String toCurr, Double rate, Date lastMod) {
        this.fromCurr = fromCurr;
        this.toCurr = toCurr;
        this.rate = rate;
        this.lastMod = lastMod;
    }

    // Getters and Setters
    public Long getId() { return id; }
    public void setId(Long id) { this.id = id; }

    public String getFromCurr() { return fromCurr; }
    public void setFromCurr(String fromCurr) { this.fromCurr = fromCurr; }

    public String getToCurr() { return toCurr; }
    public void setToCurr(String toCurr) { this.toCurr = toCurr; }

    public Double getRate() { return rate; }
    public void setRate(Double rate) { this.rate = rate; }

    public Date getLastMod() { return lastMod; }
    public void setLastMod(Date lastMod) { this.lastMod = lastMod; }
}


---

‚úÖ Step 3: Update Repository

Your repository should use Long as the ID type:

package com.recon_connect.repository;

import com.recon_connect.entity.ExchangeRate;
import org.springframework.data.jpa.repository.JpaRepository;

public interface ExchangeRateRepository extends JpaRepository<ExchangeRate, Long> {
}


---

üîÅ Optional: Controller Example (for full CRUD)

Here is a simple controller:

package com.recon_connect.controller;

import com.recon_connect.entity.ExchangeRate;
import com.recon_connect.repository.ExchangeRateRepository;
import org.springframework.web.bind.annotation.*;

import java.util.List;

@RestController
@RequestMapping("/api/exchange-rates")
@CrossOrigin(origins = "*")
public class ExchangeRateController {

    private final ExchangeRateRepository repository;

    public ExchangeRateController(ExchangeRateRepository repository) {
        this.repository = repository;
    }

    @GetMapping
    public List<ExchangeRate> getAll() {
        return repository.findAll();
    }

    @PostMapping
    public ExchangeRate create(@RequestBody ExchangeRate rate) {
        return repository.save(rate);
    }

    @PutMapping("/{id}")
    public ExchangeRate update(@PathVariable Long id, @RequestBody ExchangeRate rate) {
        rate.setId(id);
        return repository.save(rate);
    }

    @DeleteMapping("/{id}")
    public void delete(@PathVariable Long id) {
        repository.deleteById(id);
    }

    @GetMapping("/from-currencies")
    public List<String> getFromCurrencies() {
        return repository.findAll()
                         .stream()
                         .map(ExchangeRate::getFromCurr)
                         .distinct()
                         .toList();
    }

    @GetMapping("/to-currencies")
    public List<String> getToCurrencies() {
        return repository.findAll()
                         .stream()
                         .map(ExchangeRate::getToCurr)
                         .distinct()
                         .toList();
    }
}


---

‚úÖ Summary

Task	Status

Allow duplicate from/to currencies	‚úÖ Done by using surrogate ID
Add auto-increment ID to Oracle table	‚úÖ Done
Updated Spring entity	‚úÖ Uses @Id on id column
Allow frontend to use ID for update/delete	‚úÖ Already supported in Angular component I gave earlier



---

Let me know if you want me to generate SQL seed data, complete Angular UI, or Spring service layer too.

