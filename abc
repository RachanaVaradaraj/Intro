Here is the complete, edited exchange-rate.component.ts file with the inline PopupDialog component properly embedded, all necessary imports, and correct dialog handling:


---

âœ… exchange-rate.component.ts

import { Component, Inject } from '@angular/core';
import { FormBuilder, FormGroup, ReactiveFormsModule } from '@angular/forms';
import { MatDialog, MatDialogRef, MAT_DIALOG_DATA, MatDialogModule } from '@angular/material/dialog';
import { CommonModule } from '@angular/common';
import { MatFormFieldModule } from '@angular/material/form-field';
import { MatInputModule } from '@angular/material/input';
import { MatButtonModule } from '@angular/material/button';
import { MatIconModule } from '@angular/material/icon';
import { MatDatepickerModule } from '@angular/material/datepicker';
import { MatNativeDateModule } from '@angular/material/core';
import { MatSelectModule } from '@angular/material/select';

@Component({
  selector: 'app-exchange-rate',
  templateUrl: './exchange-rates.component.html',
  styleUrls: ['./exchange-rates.component.css'],
  standalone: true,
  imports: [
    CommonModule,
    ReactiveFormsModule,
    MatFormFieldModule,
    MatInputModule,
    MatButtonModule,
    MatIconModule,
    MatDialogModule,
    MatDatepickerModule,
    MatNativeDateModule,
    MatSelectModule
  ]
})
export class ExchangeRatesComponent {
  exchangeRates: any[] = [];

  constructor(public dialog: MatDialog) {}

  openAddDialog(): void {
    const dialogRef = this.dialog.open(PopupDialog, {
      width: '400px',
      data: null
    });

    dialogRef.afterClosed().subscribe(result => {
      if (result) {
        this.exchangeRates.push(result);
      }
    });
  }

  openEditDialog(row: any): void {
    const dialogRef = this.dialog.open(PopupDialog, {
      width: '400px',
      data: row
    });

    dialogRef.afterClosed().subscribe(result => {
      if (result) {
        const index = this.exchangeRates.indexOf(row);
        if (index !== -1) {
          this.exchangeRates[index] = result;
        }
      }
    });
  }
}

@Component({
  selector: 'popup-dialog',
  standalone: true,
  template: `
    <h2 mat-dialog-title>{{ data ? 'Edit Exchange Rate' : 'Add Exchange Rate' }}</h2>
    <form [formGroup]="form" class="dialog-form">
      <mat-form-field appearance="fill" class="full-width">
        <mat-label>From Currency</mat-label>
        <mat-select formControlName="fromCurr">
          <mat-option *ngFor="let c of currencies" [value]="c">{{ c }}</mat-option>
        </mat-select>
      </mat-form-field>

      <mat-form-field appearance="fill" class="full-width">
        <mat-label>To Currency</mat-label>
        <mat-select formControlName="toCurr">
          <mat-option *ngFor="let c of currencies" [value]="c">{{ c }}</mat-option>
        </mat-select>
      </mat-form-field>

      <mat-form-field appearance="fill" class="full-width">
        <mat-label>Rate</mat-label>
        <input matInput type="number" formControlName="rate">
      </mat-form-field>

      <mat-form-field appearance="fill" class="full-width">
        <mat-label>Last Modified</mat-label>
        <input matInput [matDatepicker]="picker" formControlName="lastMod">
        <mat-datepicker-toggle matSuffix [for]="picker"></mat-datepicker-toggle>
        <mat-datepicker #picker></mat-datepicker>
      </mat-form-field>

      <div class="dialog-actions">
        <button mat-button (click)="cancel()">Cancel</button>
        <button mat-button color="primary" (click)="save()">Save</button>
      </div>
    </form>
  `,
  styles: [`
    .dialog-form {
      display: flex;
      flex-direction: column;
      gap: 16px;
    }
    .full-width {
      width: 100%;
    }
    .dialog-actions {
      display: flex;
      justify-content: flex-end;
      gap: 10px;
      margin-top: 20px;
    }
  `],
  imports: [
    CommonModule,
    ReactiveFormsModule,
    MatFormFieldModule,
    MatInputModule,
    MatButtonModule,
    MatIconModule,
    MatDatepickerModule,
    MatNativeDateModule,
    MatSelectModule
  ]
})
export class PopupDialog {
  form: FormGroup;
  currencies = ['USD', 'INR', 'EUR', 'JPY', 'SGD', 'GBP'];

  constructor(
    public dialogRef: MatDialogRef<PopupDialog>,
    @Inject(MAT_DIALOG_DATA) public data: any,
    private fb: FormBuilder
  ) {
    this.form = this.fb.group({
      fromCurr: [data?.fromCurr || ''],
      toCurr: [data?.toCurr || ''],
      rate: [data?.rate || ''],
      lastMod: [data?.lastMod ? new Date(data.lastMod) : '']
    });
  }

  cancel(): void {
    this.dialogRef.close();
  }

  save(): void {
    if (this.form.valid) {
      this.dialogRef.close(this.form.value);
    }
  }
}


---

ðŸ›  What to Do Next

Ensure your exchange-rates.component.html calls openAddDialog() and openEditDialog(row).

This file now handles both adding and editing rates.

No missing popup-dialog.component.html issue anymore â€” itâ€™s inline.


Let me know if you want the HTML template updated to match the FIS layout as well.

