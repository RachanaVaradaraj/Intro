Here is the complete and minimal update to your code that allows users to either type or select the currency from a dropdown using <input list="...">.


---

✅ exchange-rates.component.ts

Ensure this code is in your exchange-rates.component.ts:

import { Component, OnInit } from '@angular/core';
import { HttpClient } from '@angular/common/http';

interface ExchangeRate {
  fromCurr: string;
  toCurr: string;
  rate: number;
  lastMod: string;
}

@Component({
  selector: 'app-exchange-rates',
  templateUrl: './exchange-rates.component.html',
  styleUrls: ['./exchange-rates.component.css']
})
export class ExchangeRatesComponent implements OnInit {
  apiUrl = 'http://localhost:8080/api/exchange-rates';
  rates: ExchangeRate[] = [];
  newRate: ExchangeRate = { fromCurr: '', toCurr: '', rate: 0, lastMod: '' };
  isEditing = false;
  originalFromCurr = '';

  fromCurrencies: string[] = [];
  toCurrencies: string[] = [];

  constructor(private http: HttpClient) {}

  ngOnInit(): void {
    this.fetchRates();
    this.fetchCurrencies();
  }

  fetchRates(): void {
    this.http.get<ExchangeRate[]>(this.apiUrl).subscribe(data => {
      this.rates = data;
    });
  }

  fetchCurrencies(): void {
    this.http.get<string[]>(`${this.apiUrl}/from-currencies`).subscribe(data => {
      this.fromCurrencies = data;
    });

    this.http.get<string[]>(`${this.apiUrl}/to-currencies`).subscribe(data => {
      this.toCurrencies = data;
    });
  }

  save(): void {
    const payload = { ...this.newRate };
    if (this.isEditing) {
      this.http.put(`${this.apiUrl}/${this.originalFromCurr}`, payload).subscribe(() => {
        this.fetchRates();
        this.resetForm();
      });
    } else {
      this.http.post(this.apiUrl, payload).subscribe(() => {
        this.fetchRates();
        this.resetForm();
      });
    }
  }

  edit(rate: ExchangeRate): void {
    this.newRate = { ...rate };
    this.originalFromCurr = rate.fromCurr;
    this.isEditing = true;
  }

  delete(fromCurr: string): void {
    this.http.delete(`${this.apiUrl}/${fromCurr}`).subscribe(() => {
      this.fetchRates();
    });
  }

  resetForm(): void {
    this.newRate = { fromCurr: '', toCurr: '', rate: 0, lastMod: '' };
    this.isEditing = false;
  }
}


---

✅ exchange-rates.component.html

Update the form section like this:

<div class="popup-form">
  <label>From Currency</label>
  <input list="fromCurrList" [(ngModel)]="newRate.fromCurr" />
  <datalist id="fromCurrList">
    <option *ngFor="let from of fromCurrencies" [value]="from"></option>
  </datalist>

  <label>To Currency</label>
  <input list="toCurrList" [(ngModel)]="newRate.toCurr" />
  <datalist id="toCurrList">
    <option *ngFor="let to of toCurrencies" [value]="to"></option>
  </datalist>

  <label>Rate</label>
  <input type="number" [(ngModel)]="newRate.rate" />

  <label>Last Modified</label>
  <input type="date" [(ngModel)]="newRate.lastMod" />

  <button (click)="save()">{{ isEditing ? 'Update' : 'Add' }}</button>
  <button (click)="resetForm()">Clear</button>
</div>

Below your form, you already have the table:

<table>
  <thead>
    <tr>
      <th>From</th>
      <th>To</th>
      <th>Rate</th>
      <th>Last Modified</th>
      <th>Actions</th>
    </tr>
  </thead>
  <tbody>
    <tr *ngFor="let rate of rates">
      <td>{{ rate.fromCurr }}</td>
      <td>{{ rate.toCurr }}</td>
      <td>{{ rate.rate }}</td>
      <td>{{ rate.lastMod }}</td>
      <td>
        <button (click)="edit(rate)">Edit</button>
        <button (click)="delete(rate.fromCurr)">Delete</button>
      </td>
    </tr>
  </tbody>
</table>


---

✅ This setup ensures:

Users can type or pick a currency.

Dropdowns are populated from backend.

Save, Edit, Delete, and Clear actions are all preserved.


Let me know if you'd like validations or to restrict to only dropdown values.

