Thanks for the screenshot — it clearly shows two issues:


---

❌ ERROR 1: Property 'dialogTemplate' does not exist on type 'ExchangeRateComponent'

This happens because you're trying to use a template reference (this.dialogTemplate) from code, but it hasn't been declared in the .ts file.


---

❌ ERROR 2: Property 'dialogRef' has no initializer and is not definitely assigned in the constructor

This line is unnecessary and incorrect for this setup.


---

✅ FIX: Complete and Correct exchange-rate.component.ts

We need to:

1. Use ViewChild('dialogTemplate') to get the template reference.


2. Remove the unnecessary @Inject(...) declarations.




---

✅ FIXED exchange-rate.component.ts

import { Component, ViewChild, TemplateRef } from '@angular/core';
import { CommonModule } from '@angular/common';
import { MatDialog, MatDialogModule } from '@angular/material/dialog';
import { FormsModule } from '@angular/forms';
import { MatFormFieldModule } from '@angular/material/form-field';
import { MatInputModule } from '@angular/material/input';
import { MatButtonModule } from '@angular/material/button';
import { MatIconModule } from '@angular/material/icon';
import { MatDatepickerModule } from '@angular/material/datepicker';
import { MatNativeDateModule } from '@angular/material/core';
import { HttpClient } from '@angular/common/http';

@Component({
  selector: 'app-exchange-rate',
  standalone: true,
  imports: [
    CommonModule,
    FormsModule,
    MatDialogModule,
    MatFormFieldModule,
    MatInputModule,
    MatButtonModule,
    MatIconModule,
    MatDatepickerModule,
    MatNativeDateModule,
  ],
  templateUrl: './exchange-rate.component.html',
  styleUrls: ['./exchange-rate.component.css'],
})
export class ExchangeRateComponent {
  exchangeRates: any[] = [];

  @ViewChild('dialogTemplate') dialogTemplate!: TemplateRef<any>;

  constructor(private dialog: MatDialog, private http: HttpClient) {
    this.fetchRates();
  }

  fetchRates() {
    this.http.get<any[]>('http://localhost:8080/exchange-rates').subscribe(data => {
      this.exchangeRates = data;
    });
  }

  openPopup(mode: 'Add' | 'Edit', data: any = null): void {
    const dialogRef = this.dialog.open(this.dialogTemplate, {
      data: { mode, rowData: data ? { ...data } : {} },
    });

    dialogRef.afterClosed().subscribe(result => {
      if (result) {
        if (mode === 'Add') {
          this.http.post('http://localhost:8080/exchange-rates', result).subscribe(() => this.fetchRates());
        } else if (mode === 'Edit') {
          const from = data.fromCurr;
          const to = data.toCurr;
          this.http.put(`http://localhost:8080/exchange-rates/${from}/${to}`, result).subscribe(() => this.fetchRates());
        }
      }
    });
  }

  deleteRate(row: any) {
    this.http.delete(`http://localhost:8080/exchange-rates/${row.fromCurr}/${row.toCurr}`).subscribe(() => {
      this.fetchRates();
    });
  }
}


---

✅ With these changes, your component should now compile successfully.

Let me know if you want me to send the full working zip with exchange-rate folder structure.

