Here is a complete Angular 17 standalone example that matches your requirements based on the Exchange Rates UI from the image you referenced:


---

‚úÖ Features:

Table with:

Checkbox to select rows

"Edit" button next to each row


Buttons on top: Create, Delete, Refresh

Date picker with calendar on the top right

Styling matches your Exchange Rates design



---

üìÅ File: exchange-rates.component.ts

import { Component } from '@angular/core';
import { CommonModule } from '@angular/common';
import { FormsModule } from '@angular/forms';
import { MatTableModule } from '@angular/material/table';
import { MatCheckboxModule } from '@angular/material/checkbox';
import { MatIconModule } from '@angular/material/icon';
import { MatButtonModule } from '@angular/material/button';
import { MatDatepickerModule } from '@angular/material/datepicker';
import { MatFormFieldModule } from '@angular/material/form-field';
import { MatInputModule } from '@angular/material/input';
import { MatNativeDateModule } from '@angular/material/core';

@Component({
  selector: 'app-exchange-rates',
  standalone: true,
  imports: [
    CommonModule,
    FormsModule,
    MatTableModule,
    MatCheckboxModule,
    MatIconModule,
    MatButtonModule,
    MatDatepickerModule,
    MatFormFieldModule,
    MatInputModule,
    MatNativeDateModule
  ],
  templateUrl: './exchange-rates.component.html',
  styleUrls: ['./exchange-rates.component.css']
})
export class ExchangeRatesComponent {
  displayedColumns: string[] = ['select', 'currency', 'rate', 'actions'];
  dataSource = [
    { id: 1, currency: 'USD', rate: 1.2 },
    { id: 2, currency: 'EUR', rate: 0.9 },
    { id: 3, currency: 'JPY', rate: 134.5 }
  ];

  selectedRows = new Set<number>();
  selectedDate = new Date();

  toggleRow(id: number, checked: boolean) {
    checked ? this.selectedRows.add(id) : this.selectedRows.delete(id);
  }

  deleteSelected() {
    this.dataSource = this.dataSource.filter(row => !this.selectedRows.has(row.id));
    this.selectedRows.clear();
  }

  refreshTable() {
    // Replace with real data load
    console.log('Table refreshed');
  }

  createRow() {
    const newId = Math.max(...this.dataSource.map(r => r.id)) + 1;
    this.dataSource.push({ id: newId, currency: 'NEW', rate: 0 });
  }

  editRow(row: any) {
    alert(`Edit row with id ${row.id}`);
  }
}


---

üìÑ File: exchange-rates.component.html

<div class="toolbar">
  <div class="left-buttons">
    <button mat-raised-button color="primary" (click)="createRow()">Create</button>
    <button mat-raised-button color="warn" [disabled]="selectedRows.size === 0" (click)="deleteSelected()">Delete</button>
    <button mat-raised-button color="accent" (click)="refreshTable()">Refresh</button>
  </div>

  <div class="date-picker">
    <mat-form-field appearance="outline">
      <mat-label>Select Date</mat-label>
      <input matInput [matDatepicker]="picker" [(ngModel)]="selectedDate">
      <mat-datepicker-toggle matSuffix [for]="picker"></mat-datepicker-toggle>
      <mat-datepicker #picker></mat-datepicker>
    </mat-form-field>
  </div>
</div>

<table mat-table [dataSource]="dataSource" class="mat-elevation-z8">
  <ng-container matColumnDef="select">
    <th mat-header-cell *matHeaderCellDef></th>
    <td mat-cell *matCellDef="let row">
      <mat-checkbox (change)="toggleRow(row.id, $event.checked)"></mat-checkbox>
    </td>
  </ng-container>

  <ng-container matColumnDef="currency">
    <th mat-header-cell *matHeaderCellDef>Currency</th>
    <td mat-cell *matCellDef="let row">{{ row.currency }}</td>
  </ng-container>

  <ng-container matColumnDef="rate">
    <th mat-header-cell *matHeaderCellDef>Rate</th>
    <td mat-cell *matCellDef="let row">{{ row.rate }}</td>
  </ng-container>

  <ng-container matColumnDef="actions">
    <th mat-header-cell *matHeaderCellDef></th>
    <td mat-cell *matCellDef="let row">
      <button mat-icon-button color="primary" (click)="editRow(row)">
        <mat-icon>edit</mat-icon>
      </button>
    </td>
  </ng-container>

  <tr mat-header-row *matHeaderRowDef="displayedColumns"></tr>
  <tr mat-row *matRowDef="let row; columns: displayedColumns;"></tr>
</table>


---

üé® File: exchange-rates.component.css

.toolbar {
  display: flex;
  justify-content: space-between;
  align-items: center;
  margin-bottom: 1rem;
}

.left-buttons button {
  margin-right: 0.5rem;
}

.date-picker {
  min-width: 250px;
}

table {
  width: 100%;
}

mat-form-field {
  width: 100%;
}


---

üì¶ Dependencies

Make sure these Angular Material modules are added in your main.ts or app.config.ts if using a standalone project setup:

import { provideAnimations } from '@angular/platform-browser/animations';

bootstrapApplication(AppComponent, {
  providers: [
    provideAnimations(),
    // ... any additional providers
  ]
});

Also, ensure Angular Material is installed:

npm install @angular/material @angular/cdk @angular/animations


---

Would you like this component to be wired into a route and added to the sidebar menu automatically?

