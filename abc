Thanks for checking â€” and you're right to call it out. Here's the correct and working solution to make the fields truly read-only or disabled when editing in Angular forms.


---

âœ… Complete HTML Code with Fixes

Update your form in exchange-rates.component.html like this:

<form [formGroup]="form" (ngSubmit)="saveRate()">

  <!-- From Currency -->
  <label>From Currency:</label>
  <select formControlName="fromCurr" [attr.disabled]="editingId !== null ? true : null">
    <option *ngFor="let curr of currencies" [value]="curr">{{ curr }}</option>
  </select>

  <!-- To Currency -->
  <label>To Currency:</label>
  <select formControlName="toCurr" [attr.disabled]="editingId !== null ? true : null">
    <option *ngFor="let curr of currencies" [value]="curr">{{ curr }}</option>
  </select>

  <!-- Rate -->
  <label>Rate:</label>
  <input formControlName="rate" placeholder="Rate" type="number" />

  <!-- Last Modified -->
  <label>Last Modified:</label>
  <input formControlName="lastMod" type="date" placeholder="YYYY-MM-DD" [attr.readonly]="editingId !== null ? true : null" />

  <!-- Save/Update Button -->
  <button type="submit">{{ editingId ? 'Update' : 'Add' }}</button>

  <!-- Cancel Button -->
  <button type="button" (click)="cancelEdit()">Cancel</button>
</form>


---

ðŸ”§ Key Fix

Use [attr.disabled] and [attr.readonly] instead of [disabled] or [readonly]. This is because disabled is a boolean attribute, and Angular needs null to not apply it at all when in Add mode.

This correctly disables or makes read-only the relevant inputs only when editing.



---

Let me know if you want these fields to also visually look grayed out (via CSS) or switch to static <span> for read-only appearance.

