Great! Based on your uploaded screenshots and requirements, here's the full Angular 17 standalone component code that exactly mirrors the layout and functionalities shown in the FIS image:

‚úÖ Features included:

Scrollable table

Add/Edit exchange rate modal

Delete selected rows

All fields editable

CSS styled to match the screenshot layout



---

üìÅ exchange-rates.component.ts

import { Component } from '@angular/core';
import { CommonModule } from '@angular/common';
import { FormsModule } from '@angular/forms';
import {
  MatTableModule,
  MatCheckboxModule,
  MatFormFieldModule,
  MatInputModule,
  MatButtonModule,
  MatIconModule,
  MatDatepickerModule,
  MatNativeDateModule,
} from '@angular/material';

export interface ExchangeRate {
  fromCurrency: string;
  toCurrency: string;
  exchangeRate: number;
  effectiveDate: Date;
}

@Component({
  selector: 'app-exchange-rates',
  standalone: true,
  imports: [
    CommonModule,
    FormsModule,
    MatTableModule,
    MatCheckboxModule,
    MatFormFieldModule,
    MatInputModule,
    MatButtonModule,
    MatIconModule,
    MatDatepickerModule,
    MatNativeDateModule
  ],
  templateUrl: './exchange-rates.component.html',
  styleUrls: ['./exchange-rates.component.css']
})
export class ExchangeRatesComponent {
  exchangeRates: ExchangeRate[] = [
    { fromCurrency: 'ZWL', toCurrency: 'ZAR', exchangeRate: 1.000000, effectiveDate: new Date('2025-06-05') },
    { fromCurrency: 'ZWL', toCurrency: 'USD', exchangeRate: 1.000000, effectiveDate: new Date('2025-06-05') },
    { fromCurrency: 'ZWL', toCurrency: 'SGD', exchangeRate: 1.000000, effectiveDate: new Date('2025-06-05') },
  ];

  selectedRows = new Set<number>();
  isModalOpen = false;
  isEditMode = false;
  modalData: ExchangeRate = this.getEmptyRate();
  editIndex: number | null = null;

  getEmptyRate(): ExchangeRate {
    return {
      fromCurrency: '',
      toCurrency: '',
      exchangeRate: 1.0,
      effectiveDate: new Date(),
    };
  }

  openAddModal() {
    this.modalData = this.getEmptyRate();
    this.isEditMode = false;
    this.isModalOpen = true;
  }

  openEditModal(index: number) {
    this.modalData = { ...this.exchangeRates[index] };
    this.editIndex = index;
    this.isEditMode = true;
    this.isModalOpen = true;
  }

  save() {
    if (this.isEditMode && this.editIndex !== null) {
      this.exchangeRates[this.editIndex] = { ...this.modalData };
    } else {
      this.exchangeRates.push({ ...this.modalData });
    }
    this.closeModal();
  }

  deleteSelected() {
    this.exchangeRates = this.exchangeRates.filter((_, index) => !this.selectedRows.has(index));
    this.selectedRows.clear();
  }

  toggleSelection(index: number) {
    if (this.selectedRows.has(index)) {
      this.selectedRows.delete(index);
    } else {
      this.selectedRows.add(index);
    }
  }

  closeModal() {
    this.isModalOpen = false;
    this.editIndex = null;
  }
}


---

üìÅ exchange-rates.component.html

<div class="toolbar">
  <button mat-raised-button color="primary" (click)="openAddModal()">
    <mat-icon>add</mat-icon>
  </button>
  <button mat-raised-button color="warn" (click)="deleteSelected()">
    <mat-icon>delete</mat-icon>
  </button>
</div>

<div class="table-container">
  <table mat-table [dataSource]="exchangeRates" class="mat-elevation-z1">

    <ng-container matColumnDef="select">
      <th mat-header-cell *matHeaderCellDef></th>
      <td mat-cell *matCellDef="let row; let i = index">
        <mat-checkbox (change)="toggleSelection(i)" [checked]="selectedRows.has(i)"></mat-checkbox>
      </td>
    </ng-container>

    <ng-container matColumnDef="fromCurrency">
      <th mat-header-cell *matHeaderCellDef>From Currency</th>
      <td mat-cell *matCellDef="let row">{{ row.fromCurrency }}</td>
    </ng-container>

    <ng-container matColumnDef="toCurrency">
      <th mat-header-cell *matHeaderCellDef>To Currency</th>
      <td mat-cell *matCellDef="let row">{{ row.toCurrency }}</td>
    </ng-container>

    <ng-container matColumnDef="exchangeRate">
      <th mat-header-cell *matHeaderCellDef>Exchange Rate</th>
      <td mat-cell *matCellDef="let row">{{ row.exchangeRate.toFixed(6) }}</td>
    </ng-container>

    <ng-container matColumnDef="effectiveDate">
      <th mat-header-cell *matHeaderCellDef>Effective Date</th>
      <td mat-cell *matCellDef="let row">{{ row.effectiveDate | date: 'MM/dd/yyyy' }}</td>
    </ng-container>

    <ng-container matColumnDef="actions">
      <th mat-header-cell *matHeaderCellDef></th>
      <td mat-cell *matCellDef="let row; let i = index">
        <button mat-icon-button color="accent" (click)="openEditModal(i)">
          <mat-icon>edit</mat-icon>
        </button>
      </td>
    </ng-container>

    <tr mat-header-row *matHeaderRowDef="['select', 'fromCurrency', 'toCurrency', 'exchangeRate', 'effectiveDate', 'actions']"></tr>
    <tr mat-row *matRowDef="let row; columns: ['select', 'fromCurrency', 'toCurrency', 'exchangeRate', 'effectiveDate', 'actions']"></tr>
  </table>
</div>

<!-- Modal -->
<div class="modal-backdrop" *ngIf="isModalOpen">
  <div class="modal">
    <h3>{{ isEditMode ? 'Edit Exchange Rate' : 'Add Exchange Rate' }}</h3>

    <mat-form-field appearance="outline" class="full-width">
      <mat-label>From Currency</mat-label>
      <input matInput [(ngModel)]="modalData.fromCurrency" />
    </mat-form-field>

    <mat-form-field appearance="outline" class="full-width">
      <mat-label>To Currency</mat-label>
      <input matInput [(ngModel)]="modalData.toCurrency" />
    </mat-form-field>

    <mat-form-field appearance="outline" class="full-width">
      <mat-label>Exchange Rate</mat-label>
      <input matInput type="number" [(ngModel)]="modalData.exchangeRate" />
    </mat-form-field>

    <mat-form-field appearance="outline" class="full-width">
      <mat-label>Effective Date</mat-label>
      <input matInput [matDatepicker]="picker" [(ngModel)]="modalData.effectiveDate" />
      <mat-datepicker-toggle matSuffix [for]="picker"></mat-datepicker-toggle>
      <mat-datepicker #picker></mat-datepicker>
    </mat-form-field>

    <div class="modal-actions">
      <button mat-button (click)="closeModal()">Cancel</button>
      <button mat-raised-button color="primary" (click)="save()">Save</button>
    </div>
  </div>
</div>


---

üìÅ exchange-rates.component.css

.table-container {
  max-height: 400px;
  overflow-y: auto;
  border: 1px solid #ddd;
  border-radius: 4px;
}

table {
  width: 100%;
}

.toolbar {
  display: flex;
  gap: 8px;
  margin-bottom: 10px;
}

/* Modal Styles */
.modal-backdrop {
  position: fixed;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  backdrop-filter: blur(3px);
  background-color: rgba(0, 0, 0, 0.3);
  display: flex;
  align-items: center;
  justify-content: center;
  z-index: 1000;
}

.modal {
  background-color: #fff;
  padding: 24px;
  border-radius: 8px;
  width: 400px;
  box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);
}

.full-width {
  width: 100%;
  margin-bottom: 12px;
}

.modal-actions {
  display: flex;
  justify-content: flex-end;
  gap: 8px;
}


---

Let me know if you'd like to:

Add sorting/filtering

Connect to an API/backend

Generate dropdowns for currencies instead of plain text fields


