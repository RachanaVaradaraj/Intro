Got it. Here's how we’ll proceed without altering the sidebar’s CSS and while using the existing header menu button to control the sidebar toggle:

✅ 1. Update sidebar.component.ts

Keep the collapse logic as is:

import { Component, Input } from '@angular/core';

@Component({
  selector: 'app-sidebar',
  standalone: true,
  templateUrl: './sidebar.component.html',
  styleUrls: ['./sidebar.component.css']
})
export class SidebarComponent {
  @Input() isCollapsed = false;
  referenceDataExpanded = false;

  toggleReferenceData() {
    this.referenceDataExpanded = !this.referenceDataExpanded;
  }
}


---

✅ 2. Update sidebar.component.html

<div [ngClass]="{ 'sidebar-container': true, 'collapsed': isCollapsed }">
  <ul class="menu">
    <li>
      <mat-icon>apartment</mat-icon>
      <span *ngIf="!isCollapsed">Manage Company</span>
    </li>
    <li>
      <mat-icon>description</mat-icon>
      <span *ngIf="!isCollapsed">Recon Master</span>
    </li>
    <li>
      <mat-icon>category</mat-icon>
      <span *ngIf="!isCollapsed">Context Type</span>
    </li>

    <li (click)="toggleReferenceData()" class="expandable">
      <mat-icon>inventory_2</mat-icon>
      <span *ngIf="!isCollapsed">Reference Data</span>
      <mat-icon *ngIf="!isCollapsed">
        {{ referenceDataExpanded ? 'expand_less' : 'expand_more' }}
      </mat-icon>
    </li>

    <ul *ngIf="referenceDataExpanded && !isCollapsed" class="submenu">
      <li routerLink="/exchange-rates">Exchange Rates</li>
    </ul>
  </ul>
</div>


---

✅ 3. In header.component.html

Update the button already present to emit a toggle event:

<button class="toggle-button" (click)="toggleSidebar()">
  <mat-icon>{{ isSidebarCollapsed ? 'menu_open' : 'menu' }}</mat-icon>
</button>


---

✅ 4. In header.component.ts

import { Component, EventEmitter, Output } from '@angular/core';

@Component({
  selector: 'app-header',
  standalone: true,
  templateUrl: './header.component.html',
  styleUrls: ['./header.component.css']
})
export class HeaderComponent {
  @Output() sidebarToggle = new EventEmitter<void>();
  isSidebarCollapsed = false;

  toggleSidebar() {
    this.isSidebarCollapsed = !this.isSidebarCollapsed;
    this.sidebarToggle.emit();
  }
}


---

✅ 5. In the main layout (layout.component.ts/html)

Use a shared variable to bind both components:

layout.component.ts:

export class LayoutComponent {
  isSidebarCollapsed = false;

  toggleSidebar() {
    this.isSidebarCollapsed = !this.isSidebarCollapsed;
  }
}

layout.component.html:

<app-header (sidebarToggle)="toggleSidebar()"></app-header>
<app-sidebar [isCollapsed]="isSidebarCollapsed"></app-sidebar>
<router-outlet></router-outlet>


---

✅ 6. Routing Setup for Exchange Rates Table

reference-data.routes.ts:

import { Routes } from '@angular/router';
import { ExchangeRatesComponent } from '../components/exchange-rates/exchange-rates.component';

export const referenceDataRoutes: Routes = [
  {
    path: 'exchange-rates',
    component: ExchangeRatesComponent
  }
];

app.routes.ts:

import { referenceDataRoutes } from './reference-data/reference-data.routes';

export const appRoutes: Routes = [
  {
    path: '',
    loadChildren: () => import('./reference-data/reference-data.routes').then(m => m.referenceDataRoutes)
  }
];


---

Let me know if you want to auto-collapse the submenu when the sidebar collapses or if the Exchange Rates table layout needs help!

