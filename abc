Thank you ‚Äî based on the error in your first image, you're encountering this Hibernate exception:

> identifier of an instance of com.example.recon_connect.entity.ExchangeRate was altered from qwe to qwe



‚úÖ What's happening?

Hibernate is complaining because you're changing the primary key (fromCurr, likely) in an entity that it's already managing in the current session.

‚ùå Why this fails:

In JPA/Hibernate, updating the primary key (PK) directly on a managed entity (loaded from DB) is not allowed. It violates the entity identity contract.


---

‚úÖ Solution Options

üîß Option 1: Disallow editing of primary key

Easiest and cleanest fix.

Let fromCurr + toCurr stay immutable.

Only allow editing of rate and lastMod.


üîß Option 2: Delete old entity and insert new

Since you want to allow editing all fields including primary key, this is your option.

In backend, treat update as:

Delete existing entity (by old PK values)

Save the updated one (with new PK values)




---

‚úÖ Fix in Spring Boot Backend

Update your controller like this:

@PutMapping("/exchange-rates/{fromCurr}/{toCurr}")
public ResponseEntity<String> updateExchangeRate(
        @PathVariable String fromCurr,
        @PathVariable String toCurr,
        @RequestBody ExchangeRate updatedRate) {

    Optional<ExchangeRate> existing = exchangeRateRepository.findById(new ExchangeRateKey(fromCurr, toCurr));
    if (existing.isPresent()) {
        exchangeRateRepository.deleteById(new ExchangeRateKey(fromCurr, toCurr)); // Delete old
        exchangeRateRepository.save(updatedRate); // Save new
        return ResponseEntity.ok("Updated successfully");
    } else {
        return ResponseEntity.status(HttpStatus.NOT_FOUND).body("Rate not found");
    }
}

> Replace ExchangeRateKey with your actual composite key class or modify appropriately if you're using @Id fields.




---

‚úÖ Frontend Fixes

Ensure you:

Keep track of the original keys when editing (e.g. in a selectedOriginalFromCurr, selectedOriginalToCurr)

Use those values in the PUT request URL.


Example in exchange-rates.component.ts:

this.http.put(`/api/exchange-rates/${originalFromCurr}/${originalToCurr}`, updatedObject)


---

‚úÖ Summary

You cannot directly change a PK in Hibernate ‚Äî it will throw an error like you‚Äôre seeing.

Solution is to delete the old record and re-save a new one.

Adjust both your backend logic and frontend code accordingly.



---

Would you like me to give you updated backend controller and Angular component.ts code that reflects all these changes?

