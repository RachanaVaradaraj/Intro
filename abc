Based on your earlier Spring Boot setup and the screenshots, you are trying to build a Spring Boot backend to list all table names from an Oracle database, with an endpoint accessible from an Angular frontend running on port 4200.

Here is a complete and fully working Spring Boot project structure to achieve this.


---

✅ Project Structure

oracle-connect/
├── src/
│   └── main/
│       ├── java/
│       │   └── com/example/oracleconnect/
│       │       ├── OracleTableListApplication.java
│       │       └── controller/
│       │           └── TableController.java
│       └── resources/
│           ├── application.properties
├── pom.xml


---

1. pom.xml

Ensure you have these dependencies for Spring Boot and Oracle:

<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>
    <groupId>com.example</groupId>
    <artifactId>oracle-connect</artifactId>
    <version>1.0.0</version>
    <packaging>jar</packaging>

    <parent>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-parent</artifactId>
        <version>2.7.0</version>
    </parent>

    <dependencies>
        <!-- Spring Boot dependencies -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-web</artifactId>
        </dependency>

        <!-- Oracle JDBC -->
        <dependency>
            <groupId>com.oracle.database.jdbc</groupId>
            <artifactId>ojdbc8</artifactId>
            <version>19.3.0.0</version>
        </dependency>

        <!-- For JPA (optional if you add JPA later) -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-data-jpa</artifactId>
        </dependency>
    </dependencies>

    <properties>
        <java.version>11</java.version>
    </properties>

</project>


---

2. application.properties

spring.datasource.url=jdbc:oracle:thin:@//localhost:1521/XEPDB1
spring.datasource.username=your_oracle_username
spring.datasource.password=your_oracle_password
spring.datasource.driver-class-name=oracle.jdbc.OracleDriver

spring.jpa.hibernate.ddl-auto=none
spring.jpa.show-sql=true

> ✅ Replace your_oracle_username and your_oracle_password with your actual credentials. Update the JDBC URL as per your Oracle DB instance.




---

3. OracleTableListApplication.java

package com.example.oracleconnect;

import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;

@SpringBootApplication
public class OracleTableListApplication {
    public static void main(String[] args) {
        SpringApplication.run(OracleTableListApplication.class, args);
    }
}


---

4. TableController.java

package com.example.oracleconnect.controller;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.*;

import javax.sql.DataSource;
import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;

@RestController
@RequestMapping("/api/tables")
@CrossOrigin(origins = "http://localhost:4200")  // Angular frontend
public class TableController {

    @Autowired
    private DataSource dataSource;

    @GetMapping
    public List<String> getAllTableNames() {
        List<String> tableNames = new ArrayList<>();
        String sql = "SELECT table_name FROM user_tables ORDER BY table_name";

        try (Connection conn = dataSource.getConnection();
             Statement stmt = conn.createStatement();
             ResultSet rs = stmt.executeQuery(sql)) {

            while (rs.next()) {
                tableNames.add(rs.getString("table_name"));
            }

        } catch (Exception e) {
            e.printStackTrace();
            throw new RuntimeException("Error retrieving table names from Oracle", e);
        }

        return tableNames;
    }
}


---

✅ How to Run

1. Add your Oracle driver manually if needed (ojdbc8.jar) to your Maven repo, or install via IDE.


2. Run the Spring Boot app:

mvn spring-boot:run


3. Test the endpoint:
http://localhost:8080/api/tables — should return a list of table names in JSON.


4. Ensure your Angular app (running on http://localhost:4200) makes a GET request to this endpoint.




---

Would you like me to zip this project structure for you and provide it for download?

