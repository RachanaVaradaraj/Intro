Thanks for the clear folder structure and image references. Here's the complete Spring Boot code for managing the ExchangeRates_Rachana table in your recon_connect project using Oracle DB.


---

‚úÖ 1. pom.xml Dependencies

Ensure your pom.xml contains:

<dependencies>
    <dependency>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-data-jpa</artifactId>
    </dependency>
    <dependency>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-web</artifactId>
    </dependency>
    <dependency>
        <groupId>com.oracle.database.jdbc</groupId>
        <artifactId>ojdbc8</artifactId>
        <version>19.3.0.0</version>
    </dependency>
</dependencies>


---

‚úÖ 2. application.properties

spring.datasource.url=jdbc:oracle:thin:@localhost:1521:xe
spring.datasource.username=your_username
spring.datasource.password=your_password
spring.datasource.driver-class-name=oracle.jdbc.OracleDriver

spring.jpa.database-platform=org.hibernate.dialect.Oracle12cDialect
spring.jpa.hibernate.ddl-auto=none
spring.jpa.show-sql=true


---

‚úÖ 3. Entity: ExchangeRate.java

üìÅ com.example.recon_connect.entity

package com.example.recon_connect.entity;

import jakarta.persistence.*;
import java.util.Date;

@Entity
@Table(name = "ExchangeRates_Rachana")
@IdClass(ExchangeRateId.class)
public class ExchangeRate {

    @Id
    @Column(name = "FromCurr")
    private String fromCurr;

    @Id
    @Column(name = "ToCurr")
    private String toCurr;

    @Column(name = "Rate")
    private Double rate;

    @Column(name = "LastMod")
    @Temporal(TemporalType.DATE)
    private Date lastMod;

    // Getters and Setters
}


---

‚úÖ 4. Composite Key: ExchangeRateId.java

üìÅ com.example.recon_connect.entity

package com.example.recon_connect.entity;

import java.io.Serializable;
import java.util.Objects;

public class ExchangeRateId implements Serializable {
    private String fromCurr;
    private String toCurr;

    public ExchangeRateId() {}

    // equals and hashCode
    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof ExchangeRateId)) return false;
        ExchangeRateId that = (ExchangeRateId) o;
        return Objects.equals(fromCurr, that.fromCurr) &&
               Objects.equals(toCurr, that.toCurr);
    }

    @Override
    public int hashCode() {
        return Objects.hash(fromCurr, toCurr);
    }
}


---

‚úÖ 5. Repository: ExchangeRateRepository.java

üìÅ com.example.recon_connect.repository

package com.example.recon_connect.repository;

import com.example.recon_connect.entity.ExchangeRate;
import com.example.recon_connect.entity.ExchangeRateId;
import org.springframework.data.jpa.repository.JpaRepository;

public interface ExchangeRateRepository extends JpaRepository<ExchangeRate, ExchangeRateId> {
}


---

‚úÖ 6. Controller: ExchangeRateController.java

üìÅ com.example.recon_connect.controller

package com.example.recon_connect.controller;

import com.example.recon_connect.entity.ExchangeRate;
import com.example.recon_connect.repository.ExchangeRateRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.*;

import java.util.List;

@RestController
@RequestMapping("/api/exchange-rates")
@CrossOrigin(origins = "http://localhost:4200")
public class ExchangeRateController {

    @Autowired
    private ExchangeRateRepository repository;

    @GetMapping
    public List<ExchangeRate> getAll() {
        return repository.findAll();
    }

    @PostMapping
    public ExchangeRate addRate(@RequestBody ExchangeRate rate) {
        return repository.save(rate);
    }

    @PutMapping
    public ExchangeRate updateRate(@RequestBody ExchangeRate rate) {
        return repository.save(rate);
    }

    @DeleteMapping("/{from}/{to}")
    public void deleteRate(@PathVariable String from, @PathVariable String to) {
        repository.deleteById(new com.example.recon_connect.entity.ExchangeRateId(from, to));
    }
}


---

‚úÖ 7. Main App: ReconApplication.java

package com.example.recon_connect;

import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;

@SpringBootApplication
public class ReconApplication {
    public static void main(String[] args) {
        SpringApplication.run(ReconApplication.class, args);
    }
}


---

‚úÖ 8. CORS Config (Optional): CorsConfig.java

üìÅ com.example.recon_connect.config

package com.example.recon_connect.config;

import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.web.servlet.config.annotation.*;

@Configuration
public class CorsConfig {
    @Bean
    public WebMvcConfigurer corsConfigurer() {
        return new WebMvcConfigurer() {
            @Override
            public void addCorsMappings(CorsRegistry registry) {
                registry.addMapping("/**").allowedOrigins("http://localhost:4200").allowedMethods("*");
            }
        };
    }
}


---

‚úÖ 9. Build and Run

1. Run Oracle DB and ensure ExchangeRates_Rachana table exists.


2. In terminal:



./mvnw clean install
./mvnw spring-boot:run


---

Would you like me to also generate the Angular service that connects to this API next?

