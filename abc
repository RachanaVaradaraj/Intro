Thanks for the clarification!

You want:

âœ… A popup form to add exchange rate data
âœ… fromCurr and toCurr as dropdowns that fetch values from backend
âœ… When all fields are filled and submitted â†’ insert into DB via backend call
âœ… The table should show the newly added row after that


---

âœ… Here's the corrected and working version:


---

ðŸŸ¦ exchange-rates.component.ts

import { Component, OnInit } from '@angular/core';
import { HttpClient } from '@angular/common/http';

@Component({
  selector: 'app-exchange-rates',
  templateUrl: './exchange-rates.component.html',
  styleUrls: ['./exchange-rates.component.css']
})
export class ExchangeRatesComponent implements OnInit {
  exchangeRates: any[] = [];
  fromCurrencies: string[] = [];
  toCurrencies: string[] = [];

  isPopupOpen = false;

  newExchangeRate = {
    fromCurr: '',
    toCurr: '',
    rate: null,
    lastMod: ''
  };

  constructor(private http: HttpClient) {}

  ngOnInit(): void {
    this.loadExchangeRates();
  }

  loadExchangeRates(): void {
    this.http.get<any[]>('http://localhost:8080/api/exchange-rates')
      .subscribe(data => this.exchangeRates = data);
  }

  openAddPopup(): void {
    this.newExchangeRate = {
      fromCurr: '',
      toCurr: '',
      rate: null,
      lastMod: ''
    };

    this.http.get<string[]>('http://localhost:8080/api/exchange-rates/from-currencies')
      .subscribe(data => this.fromCurrencies = data);

    this.http.get<string[]>('http://localhost:8080/api/exchange-rates/to-currencies')
      .subscribe(data => this.toCurrencies = data);

    this.isPopupOpen = true;
  }

  closePopup(): void {
    this.isPopupOpen = false;
  }

  addExchangeRate(): void {
    this.http.post('http://localhost:8080/api/exchange-rates', this.newExchangeRate)
      .subscribe(() => {
        this.loadExchangeRates();
        this.closePopup();
      });
  }
}


---

ðŸŸ© exchange-rates.component.html

<div class="container">
  <h2>Exchange Rates</h2>

  <table>
    <thead>
      <tr>
        <th>From Currency</th>
        <th>To Currency</th>
        <th>Rate</th>
        <th>Last Modified</th>
      </tr>
    </thead>
    <tbody>
      <tr *ngFor="let rate of exchangeRates">
        <td>{{ rate.fromCurr }}</td>
        <td>{{ rate.toCurr }}</td>
        <td>{{ rate.rate }}</td>
        <td>{{ rate.lastMod | date: 'yyyy-MM-dd' }}</td>
      </tr>
    </tbody>
  </table>

  <button (click)="openAddPopup()">Add Exchange Rate</button>

  <!-- Add Popup -->
  <div class="popup" *ngIf="isPopupOpen">
    <div class="popup-content">
      <h3>Add Exchange Rate</h3>

      <label>From Currency:</label>
      <select [(ngModel)]="newExchangeRate.fromCurr">
        <option *ngFor="let curr of fromCurrencies" [value]="curr">{{ curr }}</option>
      </select>

      <label>To Currency:</label>
      <select [(ngModel)]="newExchangeRate.toCurr">
        <option *ngFor="let curr of toCurrencies" [value]="curr">{{ curr }}</option>
      </select>

      <label>Rate:</label>
      <input type="number" [(ngModel)]="newExchangeRate.rate" />

      <label>Last Modified:</label>
      <input type="date" [(ngModel)]="newExchangeRate.lastMod" />

      <div class="actions">
        <button (click)="addExchangeRate()">Save</button>
        <button (click)="closePopup()">Cancel</button>
      </div>
    </div>
  </div>
</div>


---

âœ… Make sure your backend has:

GET /api/exchange-rates/from-currencies â†’ returns distinct fromCurr strings

GET /api/exchange-rates/to-currencies â†’ returns distinct toCurr strings

POST /api/exchange-rates â†’ accepts { fromCurr, toCurr, rate, lastMod } as body and saves it

GET /api/exchange-rates â†’ returns all records



---

Let me know if you'd like this styled like the FIS UI or want Edit/Delete support too.

