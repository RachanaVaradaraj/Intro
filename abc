import { Component } from '@angular/core';
import * as XLSX from 'xlsx';
import { OneToOneService } from 'src/app/services/one-to-one.service';

@Component({
  selector: 'app-match',
  templateUrl: './match.component.html',
  styleUrls: ['./match.component.css']
})
export class MatchComponent {
  file1Data: any[] = [];
  file2Data: any[] = [];
  file1Columns: string[] = [];
  file2Columns: string[] = [];
  dropZone1: string[] = [];
  dropZone2: string[] = [];
  filename1: string = '';
  filename2: string = '';

  matchedCount: number = 0;
  mismatchedCount: number = 0;
  CombinedData: any[] = [];

  constructor(private oneToOneService: OneToOneService) {}

  onFileUpload(event: any, fileNumber: number) {
    const file = event.target.files[0];
    const reader = new FileReader();

    reader.onload = (e: any) => {
      const data = new Uint8Array(e.target.result);
      const workbook = XLSX.read(data, { type: 'array' });
      const sheet = workbook.Sheets[workbook.SheetNames[0]];
      const jsonData = XLSX.utils.sheet_to_json(sheet, { defval: '' });

      if (fileNumber === 1) {
        this.file1Data = jsonData;
        this.file1Columns = Object.keys(jsonData[0] as Object);
        this.filename1 = file.name;
      } else {
        this.file2Data = jsonData;
        this.file2Columns = Object.keys(jsonData[0] as Object);
        this.filename2 = file.name;
      }
    };

    reader.readAsArrayBuffer(file);
  }

  onDragStart(event: DragEvent, col: string, source: string) {
    event.dataTransfer?.setData('text/plain', JSON.stringify({ col, source }));
  }

  onDragOver(event: DragEvent) {
    event.preventDefault();
  }

  onDrop(event: DragEvent, target: 'drop1' | 'drop2') {
    event.preventDefault();
    const data = JSON.parse(event.dataTransfer?.getData('text/plain') || '{}');
    if (data && data.col) {
      if (target === 'drop1' && !this.dropZone1.includes(data.col)) {
        this.dropZone1.push(data.col);
      } else if (target === 'drop2' && !this.dropZone2.includes(data.col)) {
        this.dropZone2.push(data.col);
      }
    }
  }

  compareColumns() {
    if (this.dropZone1.length === 0 || this.dropZone2.length === 0) {
      console.error("Please drop columns from both files before comparing.");
      return;
    }

    const payload = {
      selectedCol1: this.dropZone1[0], // or allow multiple if backend supports
      selectedCol2: this.dropZone2[0]
    };

    console.log("Payload sent to compare:", payload);

    this.oneToOneService.oneToOne(payload).subscribe({
      next: (res) => {
        this.matchedCount = res.matchedCount;
        this.mismatchedCount = res.unmatchedCount;
        this.CombinedData = [...res.matched, ...res.unmatched];
        console.log("Combined data from frontend", this.CombinedData);
      },
      error: (e) => {
        console.error("Comparison error", e);
      }
    });
  }
}