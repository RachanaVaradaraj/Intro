Thank you for sharing the screenshots — they reveal the core issue:

❌ Error Summary:

NG5002: Parser Error: Unexpected token '{' at column 7 in [picker({ i })]

This means Angular is trying to interpret picker({ i }) as a directive or method inside the HTML template, but this is invalid because:

You're using picker({ i }) inside square brackets ([picker({ i })]) — this is not a valid Angular directive or property binding.

picker is not defined, or you're trying to call a function like picker() directly in an input binding — which isn't supported like that.



---

✅ What You Need:

Here’s a clean and working version of your exchange-rates.component.html, ts, and css with:

Working Datepicker

Correct buttons next to each row

Editable fields

Scrollable table



---

✅ exchange-rates.component.ts

import { Component } from '@angular/core';

@Component({
  selector: 'app-exchange-rates',
  standalone: true,
  templateUrl: './exchange-rates.component.html',
  styleUrls: ['./exchange-rates.component.css'],
})
export class ExchangeRatesComponent {
  exchangeRates = [
    { currency: 'USD', rate: 1.0, effectiveDate: new Date(), isEditing: false },
  ];

  addRate() {
    this.exchangeRates.push({
      currency: '',
      rate: 0,
      effectiveDate: new Date(),
      isEditing: true,
    });
  }

  editRate(rate: any) {
    rate.isEditing = true;
  }

  saveRate(rate: any) {
    rate.isEditing = false;
  }

  deleteRate(index: number) {
    this.exchangeRates.splice(index, 1);
  }
}


---

✅ exchange-rates.component.html

<div class="table-container">
  <table>
    <thead>
      <tr>
        <th>Currency</th>
        <th>Rate</th>
        <th>Effective Date</th>
        <th>Actions</th>
      </tr>
    </thead>
    <tbody>
      <tr *ngFor="let rate of exchangeRates; let i = index">
        <td>
          <input type="text" [(ngModel)]="rate.currency" [readonly]="!rate.isEditing" />
        </td>
        <td>
          <input type="number" [(ngModel)]="rate.rate" [readonly]="!rate.isEditing" />
        </td>
        <td class="date-cell">
          <input
            type="date"
            [(ngModel)]="rate.effectiveDate"
            [readonly]="!rate.isEditing"
            class="date-input"
          />
        </td>
        <td class="actions">
          <button *ngIf="!rate.isEditing" (click)="editRate(rate)">Edit</button>
          <button *ngIf="rate.isEditing" (click)="saveRate(rate)">Save</button>
          <button (click)="deleteRate(i)">Delete</button>
        </td>
      </tr>
    </tbody>
  </table>
</div>

<div class="footer">
  <button (click)="addRate()">Add New Rate</button>
</div>


---

✅ exchange-rates.component.css

.table-container {
  max-height: 400px;
  overflow-y: auto;
  border: 1px solid #ccc;
}

table {
  width: 100%;
  border-collapse: collapse;
  text-align: left;
}

thead {
  background-color: #f4f4f4;
  position: sticky;
  top: 0;
}

th, td {
  padding: 10px;
  border: 1px solid #ddd;
}

input[type='text'],
input[type='number'],
input[type='date'] {
  width: 100%;
  padding: 6px;
  box-sizing: border-box;
}

.actions button {
  margin-right: 5px;
}

.footer {
  margin-top: 10px;
}


---

✅ Module Setup (important!)

Ensure these imports exist in your AppModule or standalone setup:

import { FormsModule } from '@angular/forms';

And add imports: [FormsModule] if you're using standalone components.


---

Let me know if you'd like:

A fancier calendar (e.g. Angular Material Datepicker),

Or any UI polish (icon buttons, styling, floating headers, etc.).


