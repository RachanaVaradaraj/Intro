In Oracle SQL, the DATE data type does not store format — format applies only when inserting or selecting values using TO_DATE or TO_CHAR.

Below is the complete PL/SQL script to insert 50 rows with random values into your table EXCHANGERATES_RACHANA, ensuring:

Random values for each column.

LastMod date inserted using the format MM/DD/YYYY.



---

✅ Full PL/SQL Script

BEGIN
  FOR i IN 1..50 LOOP
    DECLARE
      v_from_curr VARCHAR2(10);
      v_to_curr   VARCHAR2(10);
      v_rate      NUMBER;
      v_last_mod  DATE;
      v_currencies SYS.ODCIVARCHAR2LIST := SYS.ODCIVARCHAR2LIST(
        'USD', 'EUR', 'INR', 'JPY', 'GBP', 'AUD', 'CAD', 'CHF', 'CNY', 'SEK',
        'NZD', 'ZAR', 'BRL', 'SGD', 'HKD', 'KRW', 'MXN', 'THB', 'IDR', 'RUB'
      );
    BEGIN
      -- Generate two different currency codes
      LOOP
        v_from_curr := v_currencies(TRUNC(DBMS_RANDOM.VALUE(1, v_currencies.COUNT + 1)));
        v_to_curr   := v_currencies(TRUNC(DBMS_RANDOM.VALUE(1, v_currencies.COUNT + 1)));
        EXIT WHEN v_from_curr != v_to_curr;
      END LOOP;

      -- Random rate between 0.5 and 2.5
      v_rate := ROUND(DBMS_RANDOM.VALUE(0.5, 2.5), 4);

      -- Generate a random date within the last 5 years
      v_last_mod := TO_DATE(TO_CHAR(TRUNC(SYSDATE - DBMS_RANDOM.VALUE(0, 1825)), 'MM/DD/YYYY'), 'MM/DD/YYYY');

      -- Insert the data, skip duplicates
      BEGIN
        INSERT INTO EXCHANGERATES_RACHANA (FromCurr, ToCurr, Rate, LastMod)
        VALUES (v_from_curr, v_to_curr, v_rate, v_last_mod);
      EXCEPTION
        WHEN DUP_VAL_ON_INDEX THEN
          NULL;
      END;
    END;
  END LOOP;
  COMMIT;
END;
/


---

🔍 Key Details:

Currencies: Picked from a fixed list.

Rate: Random NUMBER between 0.5 and 2.5.

Date: Inserted using TO_DATE(..., 'MM/DD/YYYY').

Duplicates: Handled using EXCEPTION WHEN DUP_VAL_ON_INDEX.



---

Let me know if you want to:

Use a fixed FromCurr like always 'USD'.

Insert more than 50 rows.

Display all rows using formatted MM/DD/YYYY date output.


 class="fis-icon-btn" (click)="openAddPopup()">
    <span class="material-icons">add</span>
  </button>

  <button class="fis-icon-btn" (click)="deleteSelectedRates()">
    <span class="material-icons">delete</span>
  </button>

  <button class="fis-icon-btn" (click)="refreshPage()">
    <span class="material-icons">refresh</span>
  </button>
</div>


---

✅ Step 3: CSS Styling for FIS-Like Appearance

.fis-button-group {
  display: flex;
  gap: 10px;
  margin-bottom: 10px;
}

.fis-icon-btn {
  width: 36px;
  height: 36px;
  border: 1px solid #a0a0a0;
  background-color: white;
  border-radius: 4px;
  display: flex;
  align-items: center;
  justify-content: center;
  cursor: pointer;
  transition: background-color 0.2s, border-color 0.2s;
}

.fis-icon-btn:hover {
  background-color: #f5f5f5;
  border-color: #5a5a5a;
}

.fis-icon-btn .material-icons {
  font-size: 20px;
  color: #333;
}


---

✅ Icons Used:

Action	Material Icon Name

Add	add
Delete Selected	delete
Refresh	refresh



---

This will give you exactly the minimalist FIS-styled toolbar with square icon buttons and no PrimeNG dependency.

Let me know if you also want the edit icons for each row styled the same way.

