Great! Here's how you can add dropdowns for fromCurr and toCurr in the Add section of your Angular component, assuming you're already fetching the distinct values for those from your Spring Boot backend.


---

✅ Full Working Add Popup (with Dropdowns for fromCurr and toCurr)

exchange-rates.component.ts (Standalone)

Make sure this is your ExchangeRatesComponent setup:

import { Component, OnInit } from '@angular/core';
import { HttpClient } from '@angular/common/http';

export interface ExchangeRate {
  fromCurr: string;
  toCurr: string;
  rate: number;
  lastMod: string;
}

@Component({
  selector: 'app-exchange-rates',
  standalone: true,
  templateUrl: './exchange-rates.component.html',
  styleUrls: ['./exchange-rates.component.css'],
})
export class ExchangeRatesComponent implements OnInit {
  rates: ExchangeRate[] = [];
  newRate: ExchangeRate = { fromCurr: '', toCurr: '', rate: 0, lastMod: '' };
  isEditing: boolean = false;
  originalFromCurr: string = '';
  apiUrl = 'http://localhost:8080/api/exchange-rates';
  fromCurrencies: string[] = [];
  toCurrencies: string[] = [];

  constructor(private http: HttpClient) {}

  ngOnInit(): void {
    this.fetchRates();
    this.fetchCurrencies();
  }

  fetchRates(): void {
    this.http.get<ExchangeRate[]>(this.apiUrl).subscribe(data => {
      this.rates = data;
    });
  }

  fetchCurrencies(): void {
    this.http.get<string[]>(`${this.apiUrl}/from-currencies`).subscribe(data => {
      this.fromCurrencies = data;
    });
    this.http.get<string[]>(`${this.apiUrl}/to-currencies`).subscribe(data => {
      this.toCurrencies = data;
    });
  }

  save(): void {
    const payload = { ...this.newRate };
    if (this.isEditing) {
      this.http.put(`${this.apiUrl}/${this.originalFromCurr}`, payload).subscribe(() => {
        this.fetchRates();
        this.resetForm();
      });
    } else {
      this.http.post(this.apiUrl, payload).subscribe(() => {
        this.fetchRates();
        this.resetForm();
      });
    }
  }

  edit(rate: ExchangeRate): void {
    this.newRate = { ...rate };
    this.originalFromCurr = rate.fromCurr;
    this.isEditing = true;
  }

  delete(fromCurr: string): void {
    this.http.delete(`${this.apiUrl}/${fromCurr}`).subscribe(() => {
      this.fetchRates();
    });
  }

  resetForm(): void {
    this.newRate = { fromCurr: '', toCurr: '', rate: 0, lastMod: '' };
    this.isEditing = false;
  }
}


---

exchange-rates.component.html

Replace your form section with this:

<div class="popup-form">
  <label>From Currency</label>
  <select [(ngModel)]="newRate.fromCurr">
    <option *ngFor="let from of fromCurrencies" [value]="from">{{ from }}</option>
  </select>

  <label>To Currency</label>
  <select [(ngModel)]="newRate.toCurr">
    <option *ngFor="let to of toCurrencies" [value]="to">{{ to }}</option>
  </select>

  <label>Rate</label>
  <input type="number" [(ngModel)]="newRate.rate" />

  <label>Last Modified</label>
  <input type="date" [(ngModel)]="newRate.lastMod" />

  <button (click)="save()">{{ isEditing ? 'Update' : 'Add' }}</button>
</div>

Make sure your form fields are styled properly, and [(ngModel)] is enabled by importing FormsModule.


---

✅ Add This to main.ts or app.config.ts if Standalone:

If you're using standalone components, make sure to import FormsModule:

import { bootstrapApplication } from '@angular/platform-browser';
import { provideHttpClient } from '@angular/common/http';
import { ExchangeRatesComponent } from './app/components/exchange-rates/exchange-rates.component';
import { importProvidersFrom } from '@angular/core';
import { FormsModule } from '@angular/forms';

bootstrapApplication(ExchangeRatesComponent, {
  providers: [
    provideHttpClient(),
    importProvidersFrom(FormsModule)
  ]
});


---

Let me know if you'd like a full popup modal instead of inline form, or need to adjust styling to match your FIS Data Integrity Manager layout.

