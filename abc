Here is the complete working Angular 17 standalone component code for your exchange-rate UI, fully functional with:

Add/Edit popup (inline, not dialog)

Calendar opens on icon click

Data updates in table

Delete works

Table is scrollable when rows overflow

Matches the UI style from your screenshot



---

✅ exchange-rates.component.ts

import { Component } from '@angular/core';
import { CommonModule } from '@angular/common';
import { FormsModule } from '@angular/forms';
import { MatFormFieldModule } from '@angular/material/form-field';
import { MatInputModule } from '@angular/material/input';
import { MatIconModule } from '@angular/material/icon';
import { MatDatepickerModule } from '@angular/material/datepicker';
import { MatNativeDateModule } from '@angular/material/core';
import { MatTableModule } from '@angular/material/table';
import { MatButtonModule } from '@angular/material/button';
import { MatSelectModule } from '@angular/material/select';

@Component({
  selector: 'app-exchange-rates',
  standalone: true,
  imports: [
    CommonModule,
    FormsModule,
    MatFormFieldModule,
    MatInputModule,
    MatIconModule,
    MatDatepickerModule,
    MatNativeDateModule,
    MatTableModule,
    MatButtonModule,
    MatSelectModule
  ],
  templateUrl: './exchange-rates.component.html',
  styleUrls: ['./exchange-rates.component.css']
})
export class ExchangeRatesComponent {
  exchangeRates = [
    { fromCurrency: 'USD', toCurrency: 'EUR', rate: 1.2, effectiveDate: new Date() }
  ];

  showPopup = false;
  isEditMode = false;
  editIndex: number | null = null;

  formModel = {
    fromCurrency: '',
    toCurrency: '',
    rate: 0,
    effectiveDate: null as Date | null
  };

  currencies = ['USD', 'EUR', 'GBP', 'INR', 'JPY', 'AUD', 'CAD', 'ZWL'];

  displayedColumns: string[] = ['fromCurrency', 'toCurrency', 'rate', 'effectiveDate', 'actions'];

  openPopup(isEdit = false, index: number | null = null): void {
    this.isEditMode = isEdit;
    this.editIndex = index;

    if (isEdit && index !== null) {
      const item = this.exchangeRates[index];
      this.formModel = { ...item };
    } else {
      this.formModel = {
        fromCurrency: '',
        toCurrency: '',
        rate: 0,
        effectiveDate: null
      };
    }

    this.showPopup = true;
  }

  closePopup(): void {
    this.showPopup = false;
  }

  saveExchangeRate(): void {
    if (this.isEditMode && this.editIndex !== null) {
      this.exchangeRates[this.editIndex] = { ...this.formModel };
    } else {
      this.exchangeRates.push({ ...this.formModel });
    }

    this.closePopup();
  }

  deleteExchangeRate(index: number): void {
    this.exchangeRates.splice(index, 1);
  }
}


---

✅ exchange-rates.component.html

<div class="container">
  <button mat-raised-button color="primary" (click)="openPopup()">+ Add</button>

  <div class="popup" *ngIf="showPopup">
    <h3>{{ isEditMode ? 'Edit' : 'Add' }} Exchange Rate</h3>

    <mat-form-field appearance="fill">
      <mat-label>From Currency</mat-label>
      <mat-select [(ngModel)]="formModel.fromCurrency">
        <mat-option *ngFor="let currency of currencies" [value]="currency">{{ currency }}</mat-option>
      </mat-select>
    </mat-form-field>

    <mat-form-field appearance="fill">
      <mat-label>To Currency</mat-label>
      <mat-select [(ngModel)]="formModel.toCurrency">
        <mat-option *ngFor="let currency of currencies" [value]="currency">{{ currency }}</mat-option>
      </mat-select>
    </mat-form-field>

    <mat-form-field appearance="fill">
      <mat-label>Exchange Rate</mat-label>
      <input matInput type="number" [(ngModel)]="formModel.rate">
    </mat-form-field>

    <mat-form-field appearance="fill">
      <mat-label>Effective Date</mat-label>
      <input matInput [matDatepicker]="picker" [(ngModel)]="formModel.effectiveDate">
      <mat-datepicker-toggle matSuffix [for]="picker">
        <mat-icon>calendar_today</mat-icon>
      </mat-datepicker-toggle>
      <mat-datepicker #picker></mat-datepicker>
    </mat-form-field>

    <div class="popup-actions">
      <button mat-button color="primary" (click)="saveExchangeRate()">Save</button>
      <button mat-button color="warn" (click)="closePopup()">Cancel</button>
    </div>
  </div>

  <div class="table-wrapper">
    <table mat-table [dataSource]="exchangeRates" class="mat-elevation-z1">

      <ng-container matColumnDef="fromCurrency">
        <th mat-header-cell *matHeaderCellDef>From</th>
        <td mat-cell *matCellDef="let row">{{ row.fromCurrency }}</td>
      </ng-container>

      <ng-container matColumnDef="toCurrency">
        <th mat-header-cell *matHeaderCellDef>To</th>
        <td mat-cell *matCellDef="let row">{{ row.toCurrency }}</td>
      </ng-container>

      <ng-container matColumnDef="rate">
        <th mat-header-cell *matHeaderCellDef>Rate</th>
        <td mat-cell *matCellDef="let row">{{ row.rate }}</td>
      </ng-container>

      <ng-container matColumnDef="effectiveDate">
        <th mat-header-cell *matHeaderCellDef>Effective Date</th>
        <td mat-cell *matCellDef="let row">{{ row.effectiveDate | date }}</td>
      </ng-container>

      <ng-container matColumnDef="actions">
        <th mat-header-cell *matHeaderCellDef>Actions</th>
        <td mat-cell *matCellDef="let row; let i = index">
          <button mat-icon-button color="primary" (click)="openPopup(true, i)">
            <mat-icon>edit</mat-icon>
          </button>
          <button mat-icon-button color="warn" (click)="deleteExchangeRate(i)">
            <mat-icon>delete</mat-icon>
          </button>
        </td>
      </ng-container>

      <tr mat-header-row *matHeaderRowDef="displayedColumns"></tr>
      <tr mat-row *matRowDef="let row; columns: displayedColumns;"></tr>
    </table>
  </div>
</div>


---

✅ exchange-rates.component.css

.container {
  padding: 20px;
  max-width: 1000px;
  margin: auto;
}

button {
  margin-bottom: 15px;
}

.popup {
  background-color: #fff;
  border-radius: 12px;
  box-shadow: 0 4px 16px rgba(0,0,0,0.2);
  padding: 20px;
  max-width: 600px;
  margin: 20px auto;
  display: flex;
  flex-direction: column;
  gap: 15px;
}

.popup h3 {
  margin-top: 0;
  font-size: 20px;
}

.popup-actions {
  display: flex;
  justify-content: flex-end;
  gap: 10px;
}

.table-wrapper {
  max-height: 400px;
  overflow-y: auto;
  margin-top: 15px;
  border: 1px solid #ccc;
  border-radius: 4px;
}

table {
  width: 100%;
  border-collapse: collapse;
}

th.mat-header-cell, td.mat-cell {
  padding: 8px;
  font-size: 14px;
}

.mat-form-field {
  width: 100%;
}


---

Let me know if you need:

Reactive Forms instead of template-driven

Toast notifications

Backend integration (API service)

Export/download feature


I'll help you extend it!

