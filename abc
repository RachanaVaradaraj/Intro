Got it. Here's what I‚Äôll do to fix everything:

‚úÖ Fixes and Features to Implement

1. Inline popup for both Add and Edit ‚Äì a single popup form shown inside the same component.


2. Fix Delete functionality ‚Äì make sure rows are removed properly from the data source.


3. Ensure new data shows in the table ‚Äì bind data correctly to MatTableDataSource so it updates when changed.


4. Make table scrollable ‚Äì apply a fixed height and overflow styles.


5. Fix calendar icon not opening ‚Äì correctly link <mat-datepicker-toggle> to the picker.



‚úÖ Updated Code Files

I will now provide you complete working code for:

exchange-rates.component.ts

exchange-rates.component.html

exchange-rates.component.css



---

üìÅ exchange-rates.component.ts

import { Component } from '@angular/core';
import { FormBuilder, FormGroup } from '@angular/forms';
import { MatTableDataSource } from '@angular/material/table';

interface ExchangeRate {
  fromCurrency: string;
  toCurrency: string;
  rate: number;
  effectiveDate: Date;
}

@Component({
  selector: 'app-exchange-rates',
  standalone: true,
  imports: [
    // Angular and Material modules
  ],
  templateUrl: './exchange-rates.component.html',
  styleUrls: ['./exchange-rates.component.css']
})
export class ExchangeRatesComponent {
  displayedColumns: string[] = ['fromCurrency', 'toCurrency', 'rate', 'effectiveDate', 'actions'];
  dataSource = new MatTableDataSource<ExchangeRate>([]);
  popupVisible = false;
  isEditMode = false;
  currentEditIndex: number | null = null;

  form: FormGroup;

  constructor(private fb: FormBuilder) {
    this.form = this.fb.group({
      fromCurrency: [''],
      toCurrency: [''],
      rate: [''],
      effectiveDate: [new Date()]
    });
  }

  openPopup(editIndex: number | null = null): void {
    this.isEditMode = editIndex !== null;
    this.popupVisible = true;
    this.currentEditIndex = editIndex;

    if (this.isEditMode && editIndex !== null) {
      this.form.patchValue(this.dataSource.data[editIndex]);
    } else {
      this.form.reset({ effectiveDate: new Date() });
    }
  }

  closePopup(): void {
    this.popupVisible = false;
    this.currentEditIndex = null;
  }

  save(): void {
    const newEntry: ExchangeRate = this.form.value;
    if (this.isEditMode && this.currentEditIndex !== null) {
      this.dataSource.data[this.currentEditIndex] = newEntry;
    } else {
      this.dataSource.data = [...this.dataSource.data, newEntry];
    }

    this.closePopup();
  }

  delete(index: number): void {
    const newData = [...this.dataSource.data];
    newData.splice(index, 1);
    this.dataSource.data = newData;
  }
}


---

üìÅ exchange-rates.component.html

<div class="toolbar">
  <button mat-icon-button (click)="openPopup()">
    <mat-icon>add</mat-icon>
  </button>
</div>

<div class="table-container">
  <table mat-table [dataSource]="dataSource" class="mat-elevation-z8">

    <ng-container matColumnDef="fromCurrency">
      <th mat-header-cell *matHeaderCellDef>From</th>
      <td mat-cell *matCellDef="let row">{{ row.fromCurrency }}</td>
    </ng-container>

    <ng-container matColumnDef="toCurrency">
      <th mat-header-cell *matHeaderCellDef>To</th>
      <td mat-cell *matCellDef="let row">{{ row.toCurrency }}</td>
    </ng-container>

    <ng-container matColumnDef="rate">
      <th mat-header-cell *matHeaderCellDef>Rate</th>
      <td mat-cell *matCellDef="let row">{{ row.rate }}</td>
    </ng-container>

    <ng-container matColumnDef="effectiveDate">
      <th mat-header-cell *matHeaderCellDef>Effective Date</th>
      <td mat-cell *matCellDef="let row">{{ row.effectiveDate | date }}</td>
    </ng-container>

    <ng-container matColumnDef="actions">
      <th mat-header-cell *matHeaderCellDef>Actions</th>
      <td mat-cell *matCellDef="let row; let i = index">
        <button mat-icon-button (click)="openPopup(i)">
          <mat-icon>edit</mat-icon>
        </button>
        <button mat-icon-button (click)="delete(i)">
          <mat-icon>delete</mat-icon>
        </button>
      </td>
    </ng-container>

    <tr mat-header-row *matHeaderRowDef="displayedColumns"></tr>
    <tr mat-row *matRowDef="let row; columns: displayedColumns;"></tr>
  </table>
</div>

<!-- Inline Popup -->
<div *ngIf="popupVisible" class="popup">
  <h3>{{ isEditMode ? 'Edit' : 'Add' }} Exchange Rate</h3>
  <form [formGroup]="form">
    <mat-form-field>
      <mat-label>From Currency</mat-label>
      <input matInput formControlName="fromCurrency">
    </mat-form-field>

    <mat-form-field>
      <mat-label>To Currency</mat-label>
      <input matInput formControlName="toCurrency">
    </mat-form-field>

    <mat-form-field>
      <mat-label>Rate</mat-label>
      <input matInput type="number" formControlName="rate">
    </mat-form-field>

    <mat-form-field>
      <mat-label>Effective Date</mat-label>
      <input matInput [matDatepicker]="picker" formControlName="effectiveDate">
      <mat-datepicker-toggle matSuffix [for]="picker">
        <mat-icon>calendar_today</mat-icon>
      </mat-datepicker-toggle>
      <mat-datepicker #picker></mat-datepicker>
    </mat-form-field>

    <div class="popup-actions">
      <button mat-raised-button color="primary" (click)="save()">Save</button>
      <button mat-raised-button color="warn" (click)="closePopup()">Cancel</button>
    </div>
  </form>
</div>


---

üìÅ exchange-rates.component.css

.table-container {
  max-height: 400px;
  overflow: auto;
  margin: 16px 0;
}

.popup {
  background: #fff;
  padding: 20px;
  margin-top: 20px;
  border: 1px solid #ccc;
  width: 350px;
}

.popup-actions {
  margin-top: 16px;
  display: flex;
  justify-content: space-between;
}


---

‚úÖ Required Modules to Import

Ensure your @Component uses the following:

imports: [
  MatTableModule,
  MatIconModule,
  MatButtonModule,
  MatFormFieldModule,
  MatInputModule,
  MatDatepickerModule,
  MatNativeDateModule,
  ReactiveFormsModule,
  CommonModule
]


---

Let me know if you'd like this to be extracted into a separate popup component instead of inline, or want enhancements like dropdowns for currencies.

