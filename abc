Thanks for the clarification! You're right — the UI in your screenshots shows:

A toolbar with +, edit, and delete buttons (not inline CRUD).

A modal-like popup (dialog-style) for "Add Exchange Rate".

A readonly table until you click the edit button.

A calendar icon that triggers a datepicker.


Since you don't want inline editing and there's no existing dialog component, we'll mimic the modal dialog inside the same component using conditional rendering. We’ll also ensure the calendar icon works correctly.


---

✅ Updated Component Overview

You’ll get:

A toolbar with: ➕ Add, ✏️ Edit Mode Toggle, 🗑️ Delete

A "popup" form for adding new entries.

Readonly table that becomes editable when "Edit" is toggled.

Datepicker opens correctly from calendar icon.



---

✅ exchange-rate.component.ts

import { Component } from '@angular/core';
import { CommonModule } from '@angular/common';
import { FormsModule } from '@angular/forms';
import { MatTableModule } from '@angular/material/table';
import { MatButtonModule } from '@angular/material/button';
import { MatIconModule } from '@angular/material/icon';
import { MatInputModule } from '@angular/material/input';
import { MatDatepickerModule } from '@angular/material/datepicker';
import { MatNativeDateModule } from '@angular/material/core';
import { MatCheckboxModule } from '@angular/material/checkbox';

@Component({
  selector: 'app-exchange-rate',
  standalone: true,
  imports: [
    CommonModule,
    FormsModule,
    MatTableModule,
    MatButtonModule,
    MatIconModule,
    MatInputModule,
    MatDatepickerModule,
    MatNativeDateModule,
    MatCheckboxModule
  ],
  templateUrl: './exchange-rate.component.html',
  styleUrls: ['./exchange-rate.component.css']
})
export class ExchangeRateComponent {
  displayedColumns: string[] = ['select', 'fromCurrency', 'toCurrency', 'exchangeRate', 'effectiveDate'];
  exchangeRates = [
    { fromCurrency: 'ZWL', toCurrency: 'ZAR', exchangeRate: 1.0, effectiveDate: new Date('2025-06-05'), selected: false },
    { fromCurrency: 'ZWL', toCurrency: 'XPT', exchangeRate: 1.0, effectiveDate: new Date('2025-06-05'), selected: false }
  ];

  editMode = false;
  showAddForm = false;

  newEntry = {
    fromCurrency: '',
    toCurrency: '',
    exchangeRate: 1,
    effectiveDate: new Date()
  };

  toggleEditMode() {
    this.editMode = !this.editMode;
  }

  toggleAddForm() {
    this.showAddForm = true;
  }

  cancelAdd() {
    this.showAddForm = false;
    this.newEntry = { fromCurrency: '', toCurrency: '', exchangeRate: 1, effectiveDate: new Date() };
  }

  addExchangeRate() {
    this.exchangeRates.unshift({ ...this.newEntry, selected: false });
    this.cancelAdd();
  }

  deleteSelected() {
    this.exchangeRates = this.exchangeRates.filter(row => !row.selected);
  }
}


---

✅ exchange-rate.component.html

<div class="toolbar">
  <button mat-icon-button color="primary" (click)="toggleAddForm()"><mat-icon>add</mat-icon></button>
  <button mat-icon-button color="primary" (click)="toggleEditMode()">
    <mat-icon>edit</mat-icon>
  </button>
  <button mat-icon-button color="warn" (click)="deleteSelected()">
    <mat-icon>delete</mat-icon>
  </button>
  <span class="spacer"></span>
  <mat-form-field appearance="outline">
    <input matInput [matDatepicker]="globalDate" [readonly]="true" [(ngModel)]="newEntry.effectiveDate">
    <mat-datepicker-toggle matSuffix [for]="globalDate"></mat-datepicker-toggle>
    <mat-datepicker #globalDate></mat-datepicker>
  </mat-form-field>
</div>

<table mat-table [dataSource]="exchangeRates" class="mat-elevation-z1 custom-table">
  <ng-container matColumnDef="select">
    <th mat-header-cell *matHeaderCellDef></th>
    <td mat-cell *matCellDef="let row">
      <mat-checkbox [(ngModel)]="row.selected"></mat-checkbox>
    </td>
  </ng-container>

  <ng-container matColumnDef="fromCurrency">
    <th mat-header-cell *matHeaderCellDef>From Currency</th>
    <td mat-cell *matCellDef="let row">
      <span *ngIf="!editMode">{{ row.fromCurrency }}</span>
      <input *ngIf="editMode" matInput [(ngModel)]="row.fromCurrency">
    </td>
  </ng-container>

  <ng-container matColumnDef="toCurrency">
    <th mat-header-cell *matHeaderCellDef>To Currency</th>
    <td mat-cell *matCellDef="let row">
      <span *ngIf="!editMode">{{ row.toCurrency }}</span>
      <input *ngIf="editMode" matInput [(ngModel)]="row.toCurrency">
    </td>
  </ng-container>

  <ng-container matColumnDef="exchangeRate">
    <th mat-header-cell *matHeaderCellDef>Exchange Rate</th>
    <td mat-cell *matCellDef="let row">
      <span *ngIf="!editMode">{{ row.exchangeRate }}</span>
      <input *ngIf="editMode" matInput type="number" [(ngModel)]="row.exchangeRate">
    </td>
  </ng-container>

  <ng-container matColumnDef="effectiveDate">
    <th mat-header-cell *matHeaderCellDef>Effective Date</th>
    <td mat-cell *matCellDef="let row">
      <span *ngIf="!editMode">{{ row.effectiveDate | date:'MM/dd/yyyy' }}</span>
      <mat-form-field *ngIf="editMode" appearance="fill">
        <input matInput [matDatepicker]="picker" [(ngModel)]="row.effectiveDate">
        <mat-datepicker-toggle matSuffix [for]="picker"></mat-datepicker-toggle>
        <mat-datepicker #picker></mat-datepicker>
      </mat-form-field>
    </td>
  </ng-container>

  <tr mat-header-row *matHeaderRowDef="displayedColumns"></tr>
  <tr mat-row *matRowDef="let row; columns: displayedColumns;"></tr>
</table>

<!-- Add Popup Form -->
<div class="overlay" *ngIf="showAddForm">
  <div class="popup">
    <h3>Add Exchange Rate</h3>
    <mat-form-field appearance="outline">
      <input matInput placeholder="From Currency" [(ngModel)]="newEntry.fromCurrency">
    </mat-form-field>
    <mat-form-field appearance="outline">
      <input matInput placeholder="To Currency" [(ngModel)]="newEntry.toCurrency">
    </mat-form-field>
    <mat-form-field appearance="outline">
      <input matInput type="number" placeholder="Exchange Rate" [(ngModel)]="newEntry.exchangeRate">
    </mat-form-field>
    <mat-form-field appearance="outline">
      <input matInput [matDatepicker]="popupDate" [(ngModel)]="newEntry.effectiveDate">
      <mat-datepicker-toggle matSuffix [for]="popupDate"></mat-datepicker-toggle>
      <mat-datepicker #popupDate></mat-datepicker>
    </mat-form-field>

    <div class="popup-actions">
      <button mat-raised-button color="primary" (click)="addExchangeRate()">Save</button>
      <button mat-raised-button (click)="cancelAdd()">Cancel</button>
    </div>
  </div>
</div>


---

✅ exchange-rate.component.css

.toolbar {
  display: flex;
  align-items: center;
  padding: 10px;
  background-color: #e3eaf1;
  border-bottom: 1px solid #ccc;
}

.spacer {
  flex: 1;
}

.custom-table {
  width: 100%;
  background: white;
}

mat-header-cell, mat-cell {
  padding: 8px;
  font-size: 13px;
}

.overlay {
  position: fixed;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  background: rgba(0, 0, 0, 0.5);
  display: flex;
  align-items: center;
  justify-content: center;
}

.popup {
  background: white;
  padding: 24px;
  border-radius: 8px;
  width: 300px;
  display: flex;
  flex-direction: column;
  gap: 12px;
}

.popup-actions {
  display: flex;
  justify-content: flex-end;
  gap: 10px;
}


---

This version gives you:

Buttons in the top toolbar as in the screenshots.

A proper modal for adding entries, without a separate dialog component.

Calendar datepicker opens correctly.

Table editing via Edit button toggle.


Let me know if you want to persist to a backend or add pagination/filtering next.

