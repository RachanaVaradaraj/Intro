import re
import logging

def normalize_holder_key(holder: str) -> str:
    """Normalize holder key (case/space insensitive)."""
    return holder.strip().lower()

def create_staging_table(conn, table_name, columns, config, holder_values):
    create_table_sql = f"CREATE TABLE {table_name} (ID BIGINT NOT NULL IDENTITY(1,1) PRIMARY KEY, "
    try:
        for column in columns:
            if 'data_type' in column:
                create_table_sql += f"{column['name']} {column['data_type']}, "
            elif 'default' in column:
                default_value = column['default']

                logging.debug(f"Default value before replacement for column {column['name']}: {default_value}")

                # Replace all holders in the default string
                for holder, val in holder_values.items():
                    norm_holder = normalize_holder_key(holder)
                    if norm_holder in normalize_holder_key(default_value):
                        default_value = re.sub(re.escape(holder), val, default_value)

                logging.debug(f"Default value after replacement for column {column['name']}: {default_value}")

                create_table_sql += f"{column['name']} NVARCHAR(50) DEFAULT '{default_value}', "
            elif 'length' in column:
                create_table_sql += f"{column['name']} NVARCHAR({column['length']}), "
            else:
                create_table_sql += f"{column['name']} NVARCHAR(50), "

        create_table_sql = create_table_sql.rstrip(", ") + ")"
        conn.execute(create_table_sql)
    except Exception as e:
        logging.error(f"Error creating table {table_name}: {str(e)}")
        logging.error(f"Create table SQL: {create_table_sql}")


def insert_data_into_staging_table(conn, table_name, data, columns, holder_values):
    columns_to_insert = [c['name'] for c in columns if not c['name'].startswith('Holder')]
    insert_sql = f"INSERT INTO {table_name} ({', '.join(columns_to_insert)}) VALUES ("
    insert_sql += ", ".join(["?"] * len(columns_to_insert)) + ")"

    try:
        for row in data:
            row_values = []
            for column_name in columns_to_insert:
                column = next((c for c in columns if c['name'] == column_name), None)
                value = row.get(column_name)

                # Apply default replacement if needed
                if (value is None or value == "") and column and 'default' in column:
                    default_value = column['default']
                    logging.debug(f"Default value before replacement for column {column_name}: {default_value}")

                    for holder, val in holder_values.items():
                        norm_holder = normalize_holder_key(holder)
                        if norm_holder in normalize_holder_key(default_value):
                            default_value = re.sub(re.escape(holder), val, default_value)

                    logging.debug(f"Default value after replacement for column {column_name}: {default_value}")
                    value = default_value

                row_values.append(value)

            conn.execute(insert_sql, row_values)

    except Exception as e:
        logging.error(f"Error inserting data into table {table_name}: {str(e)}")
        logging.error(f"Insert SQL: {insert_sql}")