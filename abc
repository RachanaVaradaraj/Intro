Certainly! Here's the complete Angular 17 standalone component code for your exchange rate management popup with dropdowns, including all necessary imports and error-free logic.


---

✅ exchange-rates.component.ts (with full imports)

import { Component } from '@angular/core';
import { CommonModule } from '@angular/common';
import { FormsModule } from '@angular/forms';
import { NgSelectModule } from '@ng-select/ng-select';

@Component({
  selector: 'app-exchange-rates',
  standalone: true,
  imports: [
    CommonModule,
    FormsModule,
    NgSelectModule
  ],
  templateUrl: './exchange-rates.component.html',
  styleUrls: ['./exchange-rates.component.css']
})
export class ExchangeRatesComponent {
  rates = [
    { id: 1, fromCurr: 'USD', toCurr: 'EUR', rate: 0.92 },
    { id: 2, fromCurr: 'EUR', toCurr: 'INR', rate: 89.6 }
  ];

  fromCurrencies = ['USD', 'EUR', 'INR', 'GBP'];
  toCurrencies = ['USD', 'EUR', 'INR', 'GBP'];

  selectedRate = { id: 0, fromCurr: '', toCurr: '', rate: 0 };
  isEditing = false;

  save() {
    if (this.isEditing) {
      const index = this.rates.findIndex(r => r.id === this.selectedRate.id);
      if (index > -1) {
        this.rates[index] = { ...this.selectedRate };
      }
    } else {
      this.selectedRate.id = Date.now();
      this.rates.push({ ...this.selectedRate });
    }
    this.cancel();
  }

  cancel() {
    this.selectedRate = { id: 0, fromCurr: '', toCurr: '', rate: 0 };
    this.isEditing = false;
  }

  editRate(rate: any) {
    this.selectedRate = { ...rate };
    this.isEditing = true;
  }

  deleteRate(id: number) {
    this.rates = this.rates.filter(r => r.id !== id);
  }
}


---

✅ exchange-rates.component.html (with dropdown, search icon, full logic)

<div>
  <label>From Currency</label>
  <ng-select
    [(ngModel)]="selectedRate.fromCurr"
    [items]="fromCurrencies"
    bindLabel=""
    [searchable]="true"
    [maxHeight]="'200px'"
    placeholder="Select From Currency"
  >
    <ng-template ng-header-tmp>
      <i class="material-icons">search</i>
    </ng-template>
  </ng-select>

  <label>To Currency</label>
  <ng-select
    [(ngModel)]="selectedRate.toCurr"
    [items]="toCurrencies"
    bindLabel=""
    [searchable]="true"
    [maxHeight]="'200px'"
    placeholder="Select To Currency"
  >
    <ng-template ng-header-tmp>
      <i class="material-icons">search</i>
    </ng-template>
  </ng-select>

  <label>Rate</label>
  <input type="number" [(ngModel)]="selectedRate.rate" />

  <button (click)="save()">Save</button>
  <button (click)="cancel()">Cancel</button>
</div>

<hr />

<table border="1">
  <thead>
    <tr>
      <th>From</th>
      <th>To</th>
      <th>Rate</th>
      <th>Actions</th>
    </tr>
  </thead>
  <tbody>
    <tr *ngFor="let rate of rates">
      <td>{{ rate.fromCurr }}</td>
      <td>{{ rate.toCurr }}</td>
      <td>{{ rate.rate }}</td>
      <td>
        <button (click)="editRate(rate)">Edit</button>
        <button (click)="deleteRate(rate.id)">Delete</button>
      </td>
    </tr>
  </tbody>
</table>


---

✅ exchange-rates.component.css (optional styling)

ng-select {
  width: 200px;
  margin-bottom: 10px;
}

input[type="number"] {
  width: 200px;
  margin-bottom: 10px;
}

button {
  margin-right: 10px;
}


---

✅ Required Packages

Install ng-select if you haven't already:

npm install @ng-select/ng-select


---

This code should now run without any errors. If you'd like me to hook this into your Spring Boot backend and load fromCurr / toCurr from there, I can do that next.

