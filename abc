import { Component } from '@angular/core';
import { CommonModule } from '@angular/common';
import { FormsModule } from '@angular/forms';
import * as XLSX from 'xlsx';

@Component({
  selector: 'app-upload',
  standalone: true,
  imports: [CommonModule, FormsModule],
  templateUrl: './upload.component.html',
  styleUrls: ['./upload.component.scss']
})
export class UploadComponent {
  files: File[] = [];
  data1: any[] = [];
  data2: any[] = [];
  columns1: string[] = [];
  columns2: string[] = [];
  selectedCol1 = '';
  selectedCol2 = '';
  matched: any[] = [];
  unmatched: any[] = [];
  showSelect = false;

  onFileSelect(event: any) {
    this.resetAll();
    const selected = Array.from(event.target.files) as File[];
    this.files = selected.slice(0, 2); // Limit to 2 files

    this.files.forEach((file, index) => {
      const reader = new FileReader();
      reader.onload = (e: any) => {
        const data = new Uint8Array(e.target.result);
        const workbook = XLSX.read(data, { type: 'array' });
        const sheet = workbook.Sheets[workbook.SheetNames[0]];
        const parsed = XLSX.utils.sheet_to_json(sheet);

        if (index === 0) {
          this.data1 = parsed;
          this.columns1 = Object.keys(parsed[0] || {});
        } else {
          this.data2 = parsed;
          this.columns2 = Object.keys(parsed[0] || {});
        }

        // Show select only after both files are loaded
        if (this.columns1.length && this.columns2.length) {
          this.showSelect = true;
        }
      };
      reader.readAsArrayBuffer(file);
    });
  }

  matchColumns() {
    this.matched = [];
    this.unmatched = [];

    const set2 = new Set(this.data2.map(row => row[this.selectedCol2]));

    this.data1.forEach(row => {
      const value = row[this.selectedCol1];
      if (set2.has(value)) {
        this.matched.push(row);
      } else {
        this.unmatched.push(row);
      }
    });
  }

  removeFile(index: number) {
    this.files.splice(index, 1);
    this.resetAll();
  }

  resetAll() {
    this.data1 = [];
    this.data2 = [];
    this.columns1 = [];
    this.columns2 = [];
    this.selectedCol1 = '';
    this.selectedCol2 = '';
    this.matched = [];
    this.unmatched = [];
    this.showSelect = false;
  }
}




<div class="upload-section">
  <h2>Upload Exactly Two Excel Files</h2>
  <input type="file" (change)="onFileSelect($event)" multiple accept=".xlsx, .xls" />
  <ul>
    <li *ngFor="let file of files; let i = index">
      {{ file.name }}
      <button (click)="removeFile(i)">Remove</button>
    </li>
  </ul>

  <div *ngIf="showSelect" class="selectors">
    <label>Column from File 1:</label>
    <select [(ngModel)]="selectedCol1">
      <option *ngFor="let col of columns1" [value]="col">{{ col }}</option>
    </select>

    <label>Column from File 2:</label>
    <select [(ngModel)]="selectedCol2">
      <option *ngFor="let col of columns2" [value]="col">{{ col }}</option>
    </select>

    <button (click)="matchColumns()">Compare Columns</button>
  </div>

  <div *ngIf="matched.length">
    <h3>Matched Records</h3>
    <table border="1">
      <tr>
        <th *ngFor="let col of columns1">{{ col }}</th>
      </tr>
      <tr *ngFor="let row of matched">
        <td *ngFor="let col of columns1">{{ row[col] }}</td>
      </tr>
    </table>
  </div>

  <div *ngIf="unmatched.length">
    <h3>Unmatched Records</h3>
    <table border="1">
      <tr>
        <th *ngFor="let col of columns1">{{ col }}</th>
      </tr>
      <tr *ngFor="let row of unmatched">
        <td *ngFor="let col of columns1">{{ row[col] }}</td>
      </tr>
    </table>
  </div>
</div>



.upload-section {
  padding: 2rem;

  h2 {
    margin-bottom: 1rem;
  }

  input {
    margin-bottom: 1rem;
  }

  ul {
    list-style: none;
    padding: 0;

    li {
      margin-bottom: 0.5rem;
    }
  }

  .selectors {
    margin-top: 1rem;

    select {
      margin-right: 1rem;
    }

    button {
      padding: 0.5rem 1rem;
    }
  }

  table {
    margin-top: 1rem;
    width: 100%;
    border-collapse: collapse;

    th, td {
      padding: 0.5rem;
      border: 1px solid #ccc;
    }
  }
}