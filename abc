import { Component } from '@angular/core';
import { CommonModule } from '@angular/common';
import { FormsModule } from '@angular/forms';

// Angular Material modules
import { MatTableModule } from '@angular/material/table';
import { MatCheckboxModule } from '@angular/material/checkbox';
import { MatFormFieldModule } from '@angular/material/form-field';
import { MatInputModule } from '@angular/material/input';
import { MatButtonModule } from '@angular/material/button';
import { MatIconModule } from '@angular/material/icon';
import { MatDatepickerModule } from '@angular/material/datepicker';
import { MatNativeDateModule } from '@angular/material/core';

export interface ExchangeRate {
  fromCurrency: string;
  toCurrency: string;
  exchangeRate: number;
  effectiveDate: Date;
}

@Component({
  selector: 'app-exchange-rates',
  standalone: true,
  imports: [
    CommonModule,
    FormsModule,
    MatTableModule,
    MatCheckboxModule,
    MatFormFieldModule,
    MatInputModule,
    MatButtonModule,
    MatIconModule,
    MatDatepickerModule,
    MatNativeDateModule
  ],
  templateUrl: './exchange-rates.component.html',
  styleUrls: ['./exchange-rates.component.css']
})
export class ExchangeRatesComponent {
  exchangeRates: ExchangeRate[] = [
    { fromCurrency: 'ZWL', toCurrency: 'ZAR', exchangeRate: 1, effectiveDate: new Date('2025-06-05') },
  ];

  selectedRows = new Set<number>();
  isModalOpen = false;
  isEditMode = false;
  modalData: ExchangeRate = this.getEmptyRate();
  editIndex: number | null = null;

  getEmptyRate(): ExchangeRate {
    return {
      fromCurrency: '',
      toCurrency: '',
      exchangeRate: 1,
      effectiveDate: new Date(),
    };
  }

  openAddModal() {
    this.modalData = this.getEmptyRate();
    this.isEditMode = false;
    this.isModalOpen = true;
  }

  openEditModal(index: number) {
    this.modalData = { ...this.exchangeRates[index] };
    this.editIndex = index;
    this.isEditMode = true;
    this.isModalOpen = true;
  }

  save() {
    if (this.isEditMode && this.editIndex !== null) {
      this.exchangeRates[this.editIndex] = this.modalData;
    } else {
      this.exchangeRates.push({ ...this.modalData });
    }
    this.closeModal();
  }

  deleteSelected() {
    this.exchangeRates = this.exchangeRates.filter((_, index) => !this.selectedRows.has(index));
    this.selectedRows.clear();
  }

  toggleSelection(index: number) {
    if (this.selectedRows.has(index)) {
      this.selectedRows.delete(index);
    } else {
      this.selectedRows.add(index);
    }
  }

  closeModal() {
    this.isModalOpen = false;
    this.editIndex = null;
  }
}