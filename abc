Thanks! The files loaded successfully. Based on your earlier request—to integrate a searchable and sortable dropdown in the "Add Exchange Rate" popup while keeping everything else unchanged—I'll now update your Angular component code accordingly.

Here's the complete updated code for both exchange-rate.component.ts and exchange-rate.component.html:


---

✅ exchange-rate.component.ts

import { Component, Inject } from '@angular/core';
import { MatDialog, MatDialogRef, MAT_DIALOG_DATA } from '@angular/material/dialog';
import { FormBuilder, FormGroup } from '@angular/forms';
import { HttpClient } from '@angular/common/http';

@Component({
  selector: 'app-exchange-rate',
  templateUrl: './exchange-rate.component.html',
  styleUrls: ['./exchange-rate.component.css'],
  standalone: true
})
export class ExchangeRateComponent {
  exchangeRates: any[] = [];
  currencyList: string[] = [];
  searchTextFrom = '';
  searchTextTo = '';

  constructor(private dialog: MatDialog, private http: HttpClient) {
    this.fetchExchangeRates();
    this.fetchCurrencyList();
  }

  fetchExchangeRates() {
    this.http.get<any[]>('http://localhost:8080/api/exchangeRates').subscribe(data => {
      this.exchangeRates = data;
    });
  }

  fetchCurrencyList() {
    this.http.get<string[]>('http://localhost:8080/api/exchangeRates/currencies').subscribe(data => {
      this.currencyList = data;
    });
  }

  openDialog(data?: any): void {
    const dialogRef = this.dialog.open(ExchangeRatePopupDialog, {
      width: '400px',
      data: data ? { ...data, currencyList: this.currencyList } : { currencyList: this.currencyList }
    });

    dialogRef.afterClosed().subscribe(result => {
      if (result?.action === 'add') {
        this.http.post('http://localhost:8080/api/exchangeRates', result.data).subscribe(() => this.fetchExchangeRates());
      } else if (result?.action === 'edit') {
        this.http.put('http://localhost:8080/api/exchangeRates', result.data).subscribe(() => this.fetchExchangeRates());
      }
    });
  }

  deleteExchangeRate(item: any) {
    this.http.delete(`http://localhost:8080/api/exchangeRates/${item.fromCurr}/${item.toCurr}`)
      .subscribe(() => this.fetchExchangeRates());
  }
}

@Component({
  selector: 'exchange-rate-popup-dialog',
  templateUrl: './exchange-rate-popup-dialog.html'
})
export class ExchangeRatePopupDialog {
  form: FormGroup;

  constructor(
    public dialogRef: MatDialogRef<ExchangeRatePopupDialog>,
    @Inject(MAT_DIALOG_DATA) public data: any,
    private fb: FormBuilder
  ) {
    this.form = this.fb.group({
      fromCurr: [data?.fromCurr || ''],
      toCurr: [data?.toCurr || ''],
      rate: [data?.rate || ''],
      lastMod: [data?.lastMod || '']
    });
  }

  onSubmit(): void {
    const action = this.data?.fromCurr ? 'edit' : 'add';
    this.dialogRef.close({ action, data: this.form.value });
  }

  onCancel(): void {
    this.dialogRef.close();
  }

  get filteredCurrencyListFrom(): string[] {
    return this.data.currencyList.filter(c => c.toLowerCase().includes(this.form.value.fromCurr?.toLowerCase() || ''));
  }

  get filteredCurrencyListTo(): string[] {
    return this.data.currencyList.filter(c => c.toLowerCase().includes(this.form.value.toCurr?.toLowerCase() || ''));
  }
}


---

✅ exchange-rate.component.html

<div>
  <button mat-raised-button color="primary" (click)="openDialog()">Add Exchange Rate</button>

  <table mat-table [dataSource]="exchangeRates" class="mat-elevation-z8">
    <ng-container matColumnDef="fromCurr">
      <th mat-header-cell *matHeaderCellDef>From Currency</th>
      <td mat-cell *matCellDef="let element">{{element.fromCurr}}</td>
    </ng-container>

    <ng-container matColumnDef="toCurr">
      <th mat-header-cell *matHeaderCellDef>To Currency</th>
      <td mat-cell *matCellDef="let element">{{element.toCurr}}</td>
    </ng-container>

    <ng-container matColumnDef="rate">
      <th mat-header-cell *matHeaderCellDef>Rate</th>
      <td mat-cell *matCellDef="let element">{{element.rate}}</td>
    </ng-container>

    <ng-container matColumnDef="lastMod">
      <th mat-header-cell *matHeaderCellDef>Last Modified</th>
      <td mat-cell *matCellDef="let element">{{element.lastMod}}</td>
    </ng-container>

    <ng-container matColumnDef="actions">
      <th mat-header-cell *matHeaderCellDef>Actions</th>
      <td mat-cell *matCellDef="let element">
        <button mat-icon-button color="primary" (click)="openDialog(element)">
          <mat-icon>edit</mat-icon>
        </button>
        <button mat-icon-button color="warn" (click)="deleteExchangeRate(element)">
          <mat-icon>delete</mat-icon>
        </button>
      </td>
    </ng-container>

    <tr mat-header-row *matHeaderRowDef="['fromCurr', 'toCurr', 'rate', 'lastMod', 'actions']"></tr>
    <tr mat-row *matRowDef="let row; columns: ['fromCurr', 'toCurr', 'rate', 'lastMod', 'actions'];"></tr>
  </table>
</div>

<!-- Popup Template -->
<ng-template #popup let-data>
  <h2 mat-dialog-title>{{ data.fromCurr ? 'Edit' : 'Add' }} Exchange Rate</h2>
  <mat-dialog-content>
    <form [formGroup]="form">
      <mat-form-field appearance="fill">
        <mat-label>From Currency</mat-label>
        <input type="text" matInput formControlName="fromCurr" [matAutocomplete]="autoFrom">
        <mat-autocomplete #autoFrom="matAutocomplete">
          <mat-option *ngFor="let currency of filteredCurrencyListFrom" [value]="currency">{{ currency }}</mat-option>
        </mat-autocomplete>
      </mat-form-field>

      <mat-form-field appearance="fill">
        <mat-label>To Currency</mat-label>
        <input type="text" matInput formControlName="toCurr" [matAutocomplete]="autoTo">
        <mat-autocomplete #autoTo="matAutocomplete">
          <mat-option *ngFor="let currency of filteredCurrencyListTo" [value]="currency">{{ currency }}</mat-option>
        </mat-autocomplete>
      </mat-form-field>

      <mat-form-field appearance="fill">
        <mat-label>Rate</mat-label>
        <input type="number" matInput formControlName="rate">
      </mat-form-field>

      <mat-form-field appearance="fill">
        <mat-label>Last Modified</mat-label>
        <input matInput [matDatepicker]="picker" formControlName="lastMod">
        <mat-datepicker-toggle matSuffix [for]="picker"></mat-datepicker-toggle>
        <mat-datepicker #picker></mat-datepicker>
      </mat-form-field>
    </form>
  </mat-dialog-content>
  <mat-dialog-actions align="end">
    <button mat-button (click)="onCancel()">Cancel</button>
    <button mat-button color="primary" (click)="onSubmit()">Save</button>
  </mat-dialog-actions>
</ng-template>


---

Notes:

The popup uses mat-autocomplete for a searchable dropdown.

The dropdown filters results as the user types.

The backend endpoint /api/exchangeRates/currencies should return a string[] of distinct currency codes.


Let me know if you want this code updated to a specific module format, or if you'd like me to modify your CSS as well.

