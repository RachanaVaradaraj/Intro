Here is the complete working setup for both Spring Boot and Angular where:

All exchange rates are fetched and shown in a table.

Add popup includes:

fromCurr and toCurr as dropdowns (fetched from DB),

rate and lastMod fields as editable inputs.




---

ðŸ›  SPRING BOOT BACKEND

1. ExchangeRate.java (Entity)

package com.recon_connect.entity;

import jakarta.persistence.*;
import java.util.Date;

@Entity
@Table(name = "ExchangeRates_Rachana")
public class ExchangeRate {

    @Id
    @Column(name = "FROMCURR")
    private String fromCurr;

    @Column(name = "TOCURR")
    private String toCurr;

    @Column(name = "RATE")
    private Double rate;

    @Column(name = "LASTMOD")
    private Date lastMod;

    // Getters and Setters
}


---

2. ExchangeRateRepository.java

package com.recon_connect.repository;

import com.recon_connect.entity.ExchangeRate;
import org.springframework.data.jpa.repository.*;
import org.springframework.stereotype.Repository;
import java.util.List;

@Repository
public interface ExchangeRateRepository extends JpaRepository<ExchangeRate, String> {

    @Query("SELECT DISTINCT e.fromCurr FROM ExchangeRate e")
    List<String> findDistinctFromCurr();

    @Query("SELECT DISTINCT e.toCurr FROM ExchangeRate e")
    List<String> findDistinctToCurr();
}


---

3. ExchangeRateController.java

package com.recon_connect.controller;

import com.recon_connect.entity.ExchangeRate;
import com.recon_connect.repository.ExchangeRateRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.*;

import java.util.*;

@RestController
@RequestMapping("/api/exchange-rates")
@CrossOrigin(origins = "*")
public class ExchangeRateController {

    @Autowired
    private ExchangeRateRepository repo;

    @GetMapping
    public List<ExchangeRate> getAllRates() {
        return repo.findAll();
    }

    @GetMapping("/from-currencies")
    public List<String> getFromCurrencies() {
        return repo.findDistinctFromCurr();
    }

    @GetMapping("/to-currencies")
    public List<String> getToCurrencies() {
        return repo.findDistinctToCurr();
    }

    @PostMapping
    public ExchangeRate addExchangeRate(@RequestBody ExchangeRate rate) {
        return repo.save(rate);
    }
}


---

ðŸ§© ANGULAR FRONTEND

1. exchange-rate.service.ts

import { HttpClient } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';

@Injectable({ providedIn: 'root' })
export class ExchangeRateService {
  private baseUrl = 'http://localhost:8080/api/exchange-rates';

  constructor(private http: HttpClient) {}

  getAllRates(): Observable<any[]> {
    return this.http.get<any[]>(this.baseUrl);
  }

  getFromCurrencies(): Observable<string[]> {
    return this.http.get<string[]>(`${this.baseUrl}/from-currencies`);
  }

  getToCurrencies(): Observable<string[]> {
    return this.http.get<string[]>(`${this.baseUrl}/to-currencies`);
  }

  addRate(rate: any): Observable<any> {
    return this.http.post<any>(this.baseUrl, rate);
  }
}


---

2. exchange-rate.component.ts

import { Component, OnInit } from '@angular/core';
import { ExchangeRateService } from './exchange-rate.service';

@Component({
  selector: 'app-exchange-rate',
  templateUrl: './exchange-rate.component.html',
  styleUrls: ['./exchange-rate.component.css'],
})
export class ExchangeRateComponent implements OnInit {
  exchangeRates: any[] = [];
  fromCurrencies: string[] = [];
  toCurrencies: string[] = [];
  isPopupOpen = false;

  formData: any = {
    fromCurr: '',
    toCurr: '',
    rate: null,
    lastMod: new Date()
  };

  constructor(private service: ExchangeRateService) {}

  ngOnInit(): void {
    this.loadRates();
  }

  loadRates(): void {
    this.service.getAllRates().subscribe(data => this.exchangeRates = data);
  }

  openAddPopup(): void {
    this.formData = {
      fromCurr: '',
      toCurr: '',
      rate: null,
      lastMod: new Date()
    };

    this.service.getFromCurrencies().subscribe(data => this.fromCurrencies = data);
    this.service.getToCurrencies().subscribe(data => this.toCurrencies = data);
    this.isPopupOpen = true;
  }

  saveRate(): void {
    this.service.addRate(this.formData).subscribe(() => {
      this.loadRates();
      this.isPopupOpen = false;
    });
  }
}


---

3. exchange-rate.component.html

<!-- Table -->
<table mat-table [dataSource]="exchangeRates" class="mat-elevation-z8">
  <ng-container matColumnDef="fromCurr">
    <th mat-header-cell *matHeaderCellDef>From</th>
    <td mat-cell *matCellDef="let el">{{ el.fromCurr }}</td>
  </ng-container>

  <ng-container matColumnDef="toCurr">
    <th mat-header-cell *matHeaderCellDef>To</th>
    <td mat-cell *matCellDef="let el">{{ el.toCurr }}</td>
  </ng-container>

  <ng-container matColumnDef="rate">
    <th mat-header-cell *matHeaderCellDef>Rate</th>
    <td mat-cell *matCellDef="let el">{{ el.rate }}</td>
  </ng-container>

  <ng-container matColumnDef="lastMod">
    <th mat-header-cell *matHeaderCellDef>Last Modified</th>
    <td mat-cell *matCellDef="let el">{{ el.lastMod | date }}</td>
  </ng-container>

  <tr mat-header-row *matHeaderRowDef="['fromCurr', 'toCurr', 'rate', 'lastMod']"></tr>
  <tr mat-row *matRowDef="let row; columns: ['fromCurr', 'toCurr', 'rate', 'lastMod'];"></tr>
</table>

<!-- Add Button -->
<button mat-raised-button color="primary" (click)="openAddPopup()">Add Exchange Rate</button>

<!-- Add Popup -->
<div *ngIf="isPopupOpen" class="popup-form">
  <mat-form-field appearance="fill">
    <mat-label>From Currency</mat-label>
    <mat-select [(value)]="formData.fromCurr">
      <mat-option *ngFor="let curr of fromCurrencies" [value]="curr">{{ curr }}</mat-option>
    </mat-select>
  </mat-form-field>

  <mat-form-field appearance="fill">
    <mat-label>To Currency</mat-label>
    <mat-select [(value)]="formData.toCurr">
      <mat-option *ngFor="let curr of toCurrencies" [value]="curr">{{ curr }}</mat-option>
    </mat-select>
  </mat-form-field>

  <mat-form-field appearance="fill">
    <mat-label>Rate</mat-label>
    <input matInput type="number" [(ngModel)]="formData.rate">
  </mat-form-field>

  <mat-form-field appearance="fill">
    <mat-label>Last Modified</mat-label>
    <input matInput [matDatepicker]="picker" [(ngModel)]="formData.lastMod">
    <mat-datepicker-toggle matSuffix [for]="picker"></mat-datepicker-toggle>
    <mat-datepicker #picker></mat-datepicker>
  </mat-form-field>

  <button mat-raised-button color="accent" (click)="saveRate()">Save</button>
</div>


---

âœ… OPTIONAL: Add styling (popup-form class)

.popup-form {
  background: #fff;
  padding: 20px;
  border-radius: 8px;
  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.2);
  display: flex;
  flex-direction: column;
  gap: 16px;
  max-width: 400px;
}


---

Let me know if youâ€™d like the edit popup or filtering functionality next.

