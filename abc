Thanks for clarifying! Since you're building a standalone Angular 17 component and want the integration with your Spring Boot backend without a separate service file, I’ll embed the HTTP logic directly into your component.

Here's the complete code for your Angular 17 standalone component with full CRUD operations connected to your Spring Boot + Oracle backend (table: EXCHANGERATES_RACHANA).


---

✅ Angular 17 Standalone Component: exchange-rate.component.ts

import { Component, OnInit } from '@angular/core';
import { CommonModule } from '@angular/common';
import { FormsModule } from '@angular/forms';
import { HttpClient, HttpClientModule } from '@angular/common/http';
import { MatIconModule } from '@angular/material/icon';
import { MatDatepickerModule } from '@angular/material/datepicker';
import { MatInputModule } from '@angular/material/input';
import { MatNativeDateModule } from '@angular/material/core';

interface ExchangeRate {
  fromCurr: string;
  toCurr: string;
  rate: number;
  lastMod: string;
}

@Component({
  selector: 'app-exchange-rate',
  standalone: true,
  imports: [
    CommonModule,
    FormsModule,
    HttpClientModule,
    MatIconModule,
    MatDatepickerModule,
    MatInputModule,
    MatNativeDateModule
  ],
  templateUrl: './exchange-rate.component.html',
  styleUrl: './exchange-rate.component.css'
})
export class ExchangeRateComponent implements OnInit {
  rates: ExchangeRate[] = [];
  newRate: ExchangeRate = { fromCurr: '', toCurr: '', rate: 0, lastMod: '' };
  editingRate: ExchangeRate | null = null;
  apiUrl = 'http://localhost:8080/api/exchange-rates';

  constructor(private http: HttpClient) {}

  ngOnInit(): void {
    this.fetchRates();
  }

  fetchRates(): void {
    this.http.get<ExchangeRate[]>(this.apiUrl).subscribe(data => {
      this.rates = data;
    });
  }

  save(): void {
    const payload = this.editingRate ?? this.newRate;
    const request = this.editingRate
      ? this.http.put<ExchangeRate>(this.apiUrl, payload)
      : this.http.post<ExchangeRate>(this.apiUrl, payload);

    request.subscribe(() => {
      this.resetForm();
      this.fetchRates();
    });
  }

  edit(rate: ExchangeRate): void {
    this.editingRate = { ...rate };
  }

  delete(rate: ExchangeRate): void {
    this.http.request('delete', this.apiUrl, {
      body: { fromCurr: rate.fromCurr, toCurr: rate.toCurr }
    }).subscribe(() => {
      this.fetchRates();
    });
  }

  resetForm(): void {
    this.newRate = { fromCurr: '', toCurr: '', rate: 0, lastMod: '' };
    this.editingRate = null;
  }
}


---

✅ HTML Template: exchange-rate.component.html

<h2>Exchange Rates</h2>
<table>
  <thead>
    <tr>
      <th>From</th>
      <th>To</th>
      <th>Rate</th>
      <th>Last Modified</th>
      <th>Actions</th>
    </tr>
  </thead>
  <tbody>
    <tr *ngFor="let rate of rates">
      <td>{{ rate.fromCurr }}</td>
      <td>{{ rate.toCurr }}</td>
      <td>{{ rate.rate }}</td>
      <td>{{ rate.lastMod }}</td>
      <td>
        <button (click)="edit(rate)">Edit</button>
        <button (click)="delete(rate)">Delete</button>
      </td>
    </tr>
  </tbody>
</table>

<h3>{{ editingRate ? 'Edit' : 'Add' }} Exchange Rate</h3>
<form (ngSubmit)="save()">
  <input name="fromCurr" [(ngModel)]="(editingRate || newRate).fromCurr" placeholder="From Currency" required>
  <input name="toCurr" [(ngModel)]="(editingRate || newRate).toCurr" placeholder="To Currency" required>
  <input name="rate" type="number" [(ngModel)]="(editingRate || newRate).rate" placeholder="Rate" required>
  <input name="lastMod" type="date" [(ngModel)]="(editingRate || newRate).lastMod" required>
  <button type="submit">Save</button>
  <button type="button" (click)="resetForm()">Cancel</button>
</form>


---

✅ Summary of Features

✅ Fetch data from Spring Boot
✅ Add new exchange rate
✅ Edit existing rate
✅ Delete rate
✅ All operations persist to Oracle DB through Spring Boot REST API
✅ Uses HttpClient directly in the standalone component (no service file required)


---

Would you like me to zip this up into a ready-to-import Angular module or update the CSS to match the FIS Data Integrity Manager styling?

