Great ‚Äî now that your backend supports a surrogate primary key (id) and allows duplicates for fromCurr and toCurr, here‚Äôs how to update your Angular 17 standalone component to work correctly with this setup.


---

‚úÖ Updated Angular Code

This includes:

Handling id as the unique key.

Sending the full exchange rate data (with fromCurr, toCurr, rate, lastMod) to the backend.

Fully working Add, Edit, Delete, and table display.



---

üìÅ exchange-rate.component.ts

import { Component, OnInit } from '@angular/core';
import { FormBuilder, FormGroup } from '@angular/forms';
import { MatDialog } from '@angular/material/dialog';
import { HttpClient } from '@angular/common/http';

@Component({
  selector: 'app-exchange-rate',
  standalone: true,
  imports: [],
  templateUrl: './exchange-rate.component.html',
  styleUrl: './exchange-rate.component.css',
})
export class ExchangeRateComponent implements OnInit {
  exchangeRates: any[] = [];
  form: FormGroup;
  isEditing = false;
  editingRate: any = null;
  fromCurrencies: string[] = [];
  toCurrencies: string[] = [];

  constructor(private http: HttpClient, private fb: FormBuilder, public dialog: MatDialog) {
    this.form = this.fb.group({
      id: [null],
      fromCurr: [''],
      toCurr: [''],
      rate: [''],
      lastMod: ['']
    });
  }

  ngOnInit() {
    this.loadData();
    this.loadCurrencies();
  }

  loadData() {
    this.http.get<any[]>('http://localhost:8080/api/exchange-rates').subscribe(data => {
      this.exchangeRates = data;
    });
  }

  loadCurrencies() {
    this.http.get<string[]>('http://localhost:8080/api/exchange-rates/from-currencies')
      .subscribe(data => this.fromCurrencies = data);

    this.http.get<string[]>('http://localhost:8080/api/exchange-rates/to-currencies')
      .subscribe(data => this.toCurrencies = data);
  }

  openAdd() {
    this.form.reset();
    this.isEditing = false;
  }

  openEdit(rate: any) {
    this.isEditing = true;
    this.form.patchValue(rate);
  }

  save() {
    const newRate = this.form.value;
    if (this.isEditing && newRate.id) {
      this.http.put(`http://localhost:8080/api/exchange-rates/${newRate.id}`, newRate)
        .subscribe(() => {
          this.loadData();
          this.form.reset();
        });
    } else {
      this.http.post('http://localhost:8080/api/exchange-rates', newRate)
        .subscribe(() => {
          this.loadData();
          this.form.reset();
        });
    }
  }

  delete(id: number) {
    this.http.delete(`http://localhost:8080/api/exchange-rates/${id}`)
      .subscribe(() => this.loadData());
  }
}


---

üìÅ exchange-rate.component.html

<div>
  <h2>Exchange Rates</h2>

  <form [formGroup]="form" (ngSubmit)="save()">
    <label>From Currency:
      <select formControlName="fromCurr">
        <option *ngFor="let curr of fromCurrencies" [value]="curr">{{ curr }}</option>
      </select>
    </label>

    <label>To Currency:
      <select formControlName="toCurr">
        <option *ngFor="let curr of toCurrencies" [value]="curr">{{ curr }}</option>
      </select>
    </label>

    <label>Rate:
      <input formControlName="rate" type="number" step="0.01" />
    </label>

    <label>Effective Date:
      <input formControlName="lastMod" type="date" />
    </label>

    <button type="submit">{{ isEditing ? 'Update' : 'Add' }}</button>
  </form>

  <table>
    <thead>
      <tr>
        <th>From</th>
        <th>To</th>
        <th>Rate</th>
        <th>Last Modified</th>
        <th>Actions</th>
      </tr>
    </thead>
    <tbody>
      <tr *ngFor="let rate of exchangeRates">
        <td>{{ rate.fromCurr }}</td>
        <td>{{ rate.toCurr }}</td>
        <td>{{ rate.rate }}</td>
        <td>{{ rate.lastMod | date }}</td>
        <td>
          <button (click)="openEdit(rate)">Edit</button>
          <button (click)="delete(rate.id)">Delete</button>
        </td>
      </tr>
    </tbody>
  </table>
</div>


---

‚úÖ Make Sure Your Backend Supports These Endpoints:

In Spring Boot:

GET /api/exchange-rates ‚Äì returns all rows

POST /api/exchange-rates ‚Äì saves a new exchange rate

PUT /api/exchange-rates/{id} ‚Äì updates existing by ID

DELETE /api/exchange-rates/{id} ‚Äì deletes by ID

GET /api/exchange-rates/from-currencies ‚Äì returns distinct fromCurr

GET /api/exchange-rates/to-currencies ‚Äì returns distinct toCurr


Let me know if you want full Spring controller and service code for these endpoints.


---

‚úÖ Benefits

Supports duplicates.

Tracks each row uniquely by id.

Fully integrated form + dropdown + table CRUD.


Would you like me to provide the matching Spring Boot controller & service logic for these REST endpoints?

