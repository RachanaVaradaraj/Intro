package com.example.reconciliation.controller;

import com.example.reconciliation.model.ReconciliationResult;
import com.example.reconciliation.service.ReconciliationService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.multipart.MultipartFile;

@RestController
@RequestMapping("/api/reconciliation")
@CrossOrigin(origins = "*")
public class ReconciliationController {

    @Autowired
    private ReconciliationService reconciliationService;

    @PostMapping("/upload")
    public ResponseEntity<ReconciliationResult> reconcileFiles(
            @RequestParam("file1") MultipartFile file1,
            @RequestParam("file2") MultipartFile file2) {

        ReconciliationResult result = reconciliationService.reconcile(file1, file2);
        return ResponseEntity.ok(result);
    }
}











package com.example.reconciliation.service;

import com.example.reconciliation.model.ReconciliationResult;
import org.springframework.stereotype.Service;
import org.springframework.web.multipart.MultipartFile;

import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.util.*;

@Service
public class ReconciliationService {

    public ReconciliationResult reconcile(MultipartFile file1, MultipartFile file2) {
        try {
            Set<String> file1Rows = readLinesAsSet(file1);
            Set<String> file2Rows = readLinesAsSet(file2);

            List<String> excluded = new ArrayList<>();
            List<String> nonExcluded = new ArrayList<>();

            for (String row : file1Rows) {
                if (file2Rows.contains(row)) {
                    nonExcluded.add(row);
                } else {
                    excluded.add(row);
                }
            }

            return new ReconciliationResult(excluded, nonExcluded);

        } catch (Exception e) {
            throw new RuntimeException("Failed to process files", e);
        }
    }

    private Set<String> readLinesAsSet(MultipartFile file) throws Exception {
        BufferedReader reader = new BufferedReader(new InputStreamReader(file.getInputStream()));
        Set<String> lines = new HashSet<>();
        String line;
        while ((line = reader.readLine()) != null) {
            lines.add(line.trim());
        }
        return lines;
    }
}













package com.example.reconciliation.model;

import java.util.List;

public class ReconciliationResult {
    private List<String> excluded;
    private List<String> nonExcluded;

    public ReconciliationResult(List<String> excluded, List<String> nonExcluded) {
        this.excluded = excluded;
        this.nonExcluded = nonExcluded;
    }

    public List<String> getExcluded() {
        return excluded;
    }

    public List<String> getNonExcluded() {
        return nonExcluded;
    }

    public int getExcludedCount() {
        return excluded.size();
    }

    public int getNonExcludedCount() {
        return nonExcluded.size();
    }
}











