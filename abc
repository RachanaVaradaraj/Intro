To enforce a validation rule in Angular where the user cannot select a date more than 2 days after the current date, follow these steps:


---

✅ Step-by-step Implementation

1. Add a custom validator for the lastMod date field

In your exchange-rates.component.ts:

import { AbstractControl, ValidatorFn } from '@angular/forms';

function maxTwoDaysValidator(): ValidatorFn {
  return (control: AbstractControl): { [key: string]: any } | null => {
    const inputDate = new Date(control.value);
    const today = new Date();

    // Clear time for comparison
    today.setHours(0, 0, 0, 0);
    inputDate.setHours(0, 0, 0, 0);

    const maxDate = new Date(today);
    maxDate.setDate(today.getDate() + 2);

    return inputDate > maxDate
      ? { maxTwoDays: true }
      : null;
  };
}


---

2. Apply this validator to your form control

In your FormGroup definition:

this.form = this.fb.group({
  fromCurr: ['', Validators.required],
  toCurr: ['', Validators.required],
  rate: ['', Validators.required],
  lastMod: ['', [Validators.required, maxTwoDaysValidator()]]
});


---

3. Update the template to show an error message

In exchange-rates.component.html, update the date section:

<div class="form-group">
  <label>Last Modified:</label>
  <input 
    formControlName="lastMod" 
    type="date" 
    placeholder="YYYY-MM-DD" 
    [attr.disabled]="editingId !== null ? true : null"
  />
  <div *ngIf="form.get('lastMod')?.invalid && form.get('lastMod')?.touched" class="error">
    <div *ngIf="form.get('lastMod')?.errors?.['required']">
      Last Modified is required.
    </div>
    <div *ngIf="form.get('lastMod')?.errors?.['maxTwoDays']">
      Date cannot be more than 2 days in the future.
    </div>
  </div>
</div>


---

✅ Result

Now if the user selects a date more than 2 days after today, the form will mark the lastMod control as invalid, and show:

> "Date cannot be more than 2 days in the future."




---

Let me know if you want this date validation shown using a popup alert or custom CSS style too.

