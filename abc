Thanks for your patience. Here's the complete and corrected code for your Angular 17 exchange rate component that ensures:

1. Edit works properly — including updating the row in place instead of adding a new row.


2. All fields are editable, including fromCurr.


3. The table reflects updated data after an edit.


4. Data is sent to the backend using PUT with the correct identification logic.




---

✅ exchange-rates.component.ts

import { Component, OnInit } from '@angular/core';
import { HttpClient } from '@angular/common/http';

interface ExchangeRate {
  fromCurr: string;
  toCurr: string;
  rate: number;
  lastMod: string;
}

@Component({
  selector: 'app-exchange-rates',
  templateUrl: './exchange-rates.component.html',
  styleUrls: ['./exchange-rates.component.css']
})
export class ExchangeRatesComponent implements OnInit {
  rates: ExchangeRate[] = [];
  newRate: ExchangeRate = { fromCurr: '', toCurr: '', rate: 0, lastMod: '' };
  isEditing: boolean = false;
  originalFromCurr: string = ''; // Track original primary key
  apiUrl = 'http://localhost:8080/api/exchange-rates';

  constructor(private http: HttpClient) {}

  ngOnInit(): void {
    this.fetchRates();
  }

  fetchRates(): void {
    this.http.get<ExchangeRate[]>(this.apiUrl).subscribe(data => {
      this.rates = data;
    });
  }

  save(): void {
    const payload = { ...this.newRate };

    if (this.isEditing) {
      this.http.put(`${this.apiUrl}/${this.originalFromCurr}`, payload).subscribe(() => {
        this.fetchRates();
        this.resetForm();
      });
    } else {
      this.http.post<ExchangeRate>(this.apiUrl, payload).subscribe(() => {
        this.fetchRates();
        this.resetForm();
      });
    }
  }

  edit(rate: ExchangeRate): void {
    this.newRate = { ...rate };
    this.originalFromCurr = rate.fromCurr; // Save original key
    this.isEditing = true;
  }

  delete(rate: ExchangeRate): void {
    this.http.delete(`${this.apiUrl}/${rate.fromCurr}`).subscribe(() => {
      this.fetchRates();
    });
  }

  resetForm(): void {
    this.newRate = { fromCurr: '', toCurr: '', rate: 0, lastMod: '' };
    this.isEditing = false;
    this.originalFromCurr = '';
  }
}


---

✅ exchange-rates.component.html

<div class="form-container">
  <input [(ngModel)]="newRate.fromCurr" placeholder="From Currency">
  <input [(ngModel)]="newRate.toCurr" placeholder="To Currency">
  <input type="number" [(ngModel)]="newRate.rate" placeholder="Rate">
  <input type="date" [(ngModel)]="newRate.lastMod" placeholder="Last Modified">

  <button (click)="save()">{{ isEditing ? 'Update' : 'Add' }}</button>
  <button (click)="resetForm()">Clear</button>
</div>

<table>
  <thead>
    <tr>
      <th>From</th>
      <th>To</th>
      <th>Rate</th>
      <th>Last Modified</th>
      <th>Actions</th>
    </tr>
  </thead>
  <tbody>
    <tr *ngFor="let rate of rates">
      <td>{{ rate.fromCurr }}</td>
      <td>{{ rate.toCurr }}</td>
      <td>{{ rate.rate }}</td>
      <td>{{ rate.lastMod }}</td>
      <td>
        <button (click)="edit(rate)">Edit</button>
        <button (click)="delete(rate)">Delete</button>
      </td>
    </tr>
  </tbody>
</table>


---

✅ exchange-rate.controller.java (Backend)

@PutMapping("/{fromCurr}")
public ExchangeRate update(@PathVariable String fromCurr, @RequestBody ExchangeRate rate) {
    Optional<ExchangeRate> existing = repository.findById(fromCurr);

    if (existing.isPresent()) {
        ExchangeRate existingRate = existing.get();
        existingRate.setFromCurr(rate.getFromCurr());
        existingRate.setToCurr(rate.getToCurr());
        existingRate.setRate(rate.getRate());
        existingRate.setLastMod(rate.getLastMod());

        if (!fromCurr.equals(rate.getFromCurr())) {
            repository.deleteById(fromCurr); // Handle PK change
        }

        return repository.save(existingRate);
    } else {
        return repository.save(rate);
    }
}


---

Let me know if you want:

Editing via popup dialog instead of inline form

Better CSS styling to match a corporate theme

Confirmation before delete


Ready to help!

