Thanks! Below is the updated and complete Angular 17 code setup with the following changes:

✅ Dropdowns for fromCurr and toCurr in the popup
✅ Fetching distinct values from backend
✅ Works for both Add and Edit actions
✅ Styled like the FIS Data Integrity Manager UI


---

✅ exchange-rate.component.ts

import { Component, OnInit } from '@angular/core';
import { MatDialog } from '@angular/material/dialog';
import { HttpClient } from '@angular/common/http';
import { FormBuilder, FormGroup } from '@angular/forms';

@Component({
  selector: 'app-exchange-rate',
  templateUrl: './exchange-rate.component.html',
  styleUrls: ['./exchange-rate.component.css'],
  standalone: true
})
export class ExchangeRateComponent implements OnInit {
  exchangeRates: any[] = [];
  fromCurrOptions: string[] = [];
  toCurrOptions: string[] = [];
  popupForm!: FormGroup;
  isPopupOpen = false;
  isEditMode = false;
  editingIndex: number | null = null;

  constructor(private http: HttpClient, private fb: FormBuilder, public dialog: MatDialog) {}

  ngOnInit(): void {
    this.getExchangeRates();
    this.getCurrencyOptions();
    this.initializeForm();
  }

  initializeForm() {
    this.popupForm = this.fb.group({
      fromCurr: [''],
      toCurr: [''],
      rate: [''],
      lastMod: ['']
    });
  }

  getExchangeRates() {
    this.http.get<any[]>('http://localhost:8080/api/exchange-rates').subscribe(data => {
      this.exchangeRates = data;
    });
  }

  getCurrencyOptions() {
    this.http.get<string[]>('http://localhost:8080/api/exchange-rates/fromCurrs').subscribe(data => {
      this.fromCurrOptions = data;
    });
    this.http.get<string[]>('http://localhost:8080/api/exchange-rates/toCurrs').subscribe(data => {
      this.toCurrOptions = data;
    });
  }

  openPopup(edit: boolean = false, index?: number) {
    this.isPopupOpen = true;
    this.isEditMode = edit;

    if (edit && index !== undefined) {
      this.editingIndex = index;
      this.popupForm.patchValue(this.exchangeRates[index]);
    } else {
      this.editingIndex = null;
      this.popupForm.reset();
    }
  }

  closePopup() {
    this.isPopupOpen = false;
  }

  saveExchangeRate() {
    const data = this.popupForm.value;
    if (this.isEditMode && this.editingIndex !== null) {
      this.http.put(`http://localhost:8080/api/exchange-rates/${this.exchangeRates[this.editingIndex].fromCurr}/${this.exchangeRates[this.editingIndex].toCurr}`, data)
        .subscribe(() => {
          this.getExchangeRates();
          this.closePopup();
        });
    } else {
      this.http.post('http://localhost:8080/api/exchange-rates', data)
        .subscribe(() => {
          this.getExchangeRates();
          this.closePopup();
        });
    }
  }

  deleteExchangeRate(fromCurr: string, toCurr: string) {
    this.http.delete(`http://localhost:8080/api/exchange-rates/${fromCurr}/${toCurr}`)
      .subscribe(() => {
        this.getExchangeRates();
      });
  }
}


---

✅ exchange-rate.component.html

<div class="table-container">
  <button mat-raised-button color="primary" (click)="openPopup()">Add</button>
  <table>
    <thead>
      <tr>
        <th>From Currency</th>
        <th>To Currency</th>
        <th>Rate</th>
        <th>Last Modified</th>
        <th>Actions</th>
      </tr>
    </thead>
    <tbody>
      <tr *ngFor="let rate of exchangeRates; let i = index">
        <td>{{ rate.fromCurr }}</td>
        <td>{{ rate.toCurr }}</td>
        <td>{{ rate.rate }}</td>
        <td>{{ rate.lastMod | date: 'yyyy-MM-dd' }}</td>
        <td>
          <button mat-button (click)="openPopup(true, i)">Edit</button>
          <button mat-button color="warn" (click)="deleteExchangeRate(rate.fromCurr, rate.toCurr)">Delete</button>
        </td>
      </tr>
    </tbody>
  </table>
</div>

<!-- Popup Form -->
<div class="popup" *ngIf="isPopupOpen">
  <h2>{{ isEditMode ? 'Edit Exchange Rate' : 'Add Exchange Rate' }}</h2>
  <form [formGroup]="popupForm">
    <label>From Currency:
      <select formControlName="fromCurr">
        <option *ngFor="let curr of fromCurrOptions" [value]="curr">{{ curr }}</option>
      </select>
    </label>

    <label>To Currency:
      <select formControlName="toCurr">
        <option *ngFor="let curr of toCurrOptions" [value]="curr">{{ curr }}</option>
      </select>
    </label>

    <label>Rate:
      <input type="number" formControlName="rate" />
    </label>

    <label>Effective Date:
      <input type="date" formControlName="lastMod" />
    </label>

    <div class="popup-buttons">
      <button mat-button color="primary" (click)="saveExchangeRate()">Save</button>
      <button mat-button (click)="closePopup()">Cancel</button>
    </div>
  </form>
</div>


---

✅ exchange-rate.component.css

.table-container {
  padding: 16px;
  max-height: 500px;
  overflow-y: auto;
}

table {
  width: 100%;
  border-collapse: collapse;
}

th, td {
  padding: 8px;
  border: 1px solid #ccc;
}

.popup {
  position: fixed;
  top: 20%;
  left: 30%;
  background: #fff;
  padding: 24px;
  box-shadow: 0 0 10px rgba(0,0,0,0.3);
  z-index: 1000;
  border-radius: 8px;
  width: 400px;
}

.popup h2 {
  margin-top: 0;
}

.popup form label {
  display: block;
  margin: 10px 0;
}

.popup-buttons {
  display: flex;
  justify-content: flex-end;
  gap: 8px;
  margin-top: 16px;
}


---

✅ Backend API Endpoints Required (Spring Boot)

Make sure your Spring Boot backend includes:

GET /api/exchange-rates → list of exchange rates

GET /api/exchange-rates/fromCurrs → list of distinct fromCurr

GET /api/exchange-rates/toCurrs → list of distinct toCurr

POST /api/exchange-rates → to add

PUT /api/exchange-rates/{fromCurr}/{toCurr} → to update

DELETE /api/exchange-rates/{fromCurr}/{toCurr} → to delete


If you need help adjusting the Spring Boot controller or repository for those endpoints, I can provide that too.


---

Let me know if you'd like this integrated into a full Angular project structure, or help with the Spring Boot side!

