Sure! Here's the complete Angular 17 standalone component code with the fixed dropdown opening functionality using MatAutocompleteTrigger. This includes:

exchange-rates.component.ts

exchange-rates.component.html

Corrections for the openPanel() issue



---

âœ… exchange-rates.component.ts

import { Component, OnInit, AfterViewInit, ViewChild } from '@angular/core';
import { HttpClient } from '@angular/common/http';
import { FormBuilder, FormGroup, Validators } from '@angular/forms';
import { MatAutocompleteTrigger } from '@angular/material/autocomplete';

@Component({
  selector: 'app-exchange-rates',
  standalone: true,
  templateUrl: './exchange-rates.component.html',
  styleUrls: ['./exchange-rates.component.css'],
})
export class ExchangeRatesComponent implements OnInit, AfterViewInit {
  form: FormGroup;
  rates: any[] = [];
  editingId: number | null = null;
  currencies: string[] = [];
  filteredCurrencies: string[] = [];

  @ViewChild('fromCurrInput', { read: MatAutocompleteTrigger }) fromCurrTrigger!: MatAutocompleteTrigger;
  @ViewChild('toCurrInput', { read: MatAutocompleteTrigger }) toCurrTrigger!: MatAutocompleteTrigger;

  constructor(private http: HttpClient, private fb: FormBuilder) {
    this.form = this.fb.group({
      fromCurr: ['', Validators.required],
      toCurr: ['', Validators.required],
      rate: ['', Validators.required],
      lastMod: ['', Validators.required]
    });
  }

  ngOnInit() {
    this.getRates();
    this.getCurrencies();
  }

  ngAfterViewInit() {
    // Any logic needed post view init
  }

  getRates() {
    this.http.get<any[]>('http://localhost:8080/api/exchange-rates')
      .subscribe(data => {
        this.rates = data;
      });
  }

  getCurrencies() {
    this.http.get<string[]>('http://localhost:8080/api/exchange-rates/currencies')
      .subscribe(data => {
        this.currencies = data;
        this.filteredCurrencies = data;
      });
  }

  filterCurrencies(event: Event) {
    const value = (event.target as HTMLInputElement).value;
    this.filteredCurrencies = this.currencies.filter(curr =>
      curr.toLowerCase().includes(value.toLowerCase())
    );
  }

  saveRate() {
    if (this.editingId !== null) {
      this.http.put(`http://localhost:8080/api/exchange-rates/${this.editingId}`, this.form.value)
        .subscribe(() => {
          this.getRates();
          this.cancelEdit();
        });
    } else {
      this.http.post('http://localhost:8080/api/exchange-rates', this.form.value)
        .subscribe(() => {
          this.getRates();
          this.form.reset();
        });
    }
  }

  editRate(rate: any) {
    this.editingId = rate.id;
    this.form.setValue({
      fromCurr: rate.fromCurr,
      toCurr: rate.toCurr,
      rate: rate.rate,
      lastMod: rate.lastMod
    });
  }

  cancelEdit() {
    this.editingId = null;
    this.form.reset();
  }

  deleteRate(id: number) {
    this.http.delete(`http://localhost:8080/api/exchange-rates/${id}`)
      .subscribe(() => this.getRates());
  }

  openFromCurrencyDropdown() {
    if (this.form.valid && this.fromCurrTrigger) {
      this.fromCurrTrigger.openPanel();
    }
  }

  openToCurrencyDropdown() {
    if (this.form.valid && this.toCurrTrigger) {
      this.toCurrTrigger.openPanel();
    }
  }
}


---

âœ… exchange-rates.component.html

<form [formGroup]="form" (ngSubmit)="saveRate()">
  <mat-form-field>
    <input matInput
           #fromCurrInput
           placeholder="From Currency"
           formControlName="fromCurr"
           [matAutocomplete]="fromCurrAuto"
           (input)="filterCurrencies($event)" />
    <button mat-icon-button matSuffix (click)="openFromCurrencyDropdown()" type="button">
      <mat-icon>search</mat-icon>
    </button>
    <mat-autocomplete #fromCurrAuto="matAutocomplete">
      <mat-option *ngFor="let currency of filteredCurrencies" [value]="currency">
        {{ currency }}
      </mat-option>
    </mat-autocomplete>
  </mat-form-field>

  <mat-form-field>
    <input matInput
           #toCurrInput
           placeholder="To Currency"
           formControlName="toCurr"
           [matAutocomplete]="toCurrAuto"
           (input)="filterCurrencies($event)" />
    <button mat-icon-button matSuffix (click)="openToCurrencyDropdown()" type="button">
      <mat-icon>search</mat-icon>
    </button>
    <mat-autocomplete #toCurrAuto="matAutocomplete">
      <mat-option *ngFor="let currency of filteredCurrencies" [value]="currency">
        {{ currency }}
      </mat-option>
    </mat-autocomplete>
  </mat-form-field>

  <mat-form-field>
    <input matInput placeholder="Rate" formControlName="rate" type="number" />
  </mat-form-field>

  <mat-form-field>
    <input matInput placeholder="Last Modified" formControlName="lastMod" type="date" />
  </mat-form-field>

  <button mat-raised-button color="primary" type="submit">
    {{ editingId ? 'Update' : 'Add' }} Exchange Rate
  </button>
  <button *ngIf="editingId" mat-button (click)="cancelEdit()" type="button">Cancel</button>
</form>

<table mat-table [dataSource]="rates" class="mat-elevation-z8">
  <!-- Columns here -->
</table>


---

ðŸ§© Required Imports in app.config.ts or module

Ensure you've imported and included:

import { MatFormFieldModule } from '@angular/material/form-field';
import { MatInputModule } from '@angular/material/input';
import { MatAutocompleteModule } from '@angular/material/autocomplete';
import { MatIconModule } from '@angular/material/icon';
import { MatButtonModule } from '@angular/material/button';

export const appConfig = {
  // ... other config
  standaloneComponents: [
    MatFormFieldModule,
    MatInputModule,
    MatAutocompleteModule,
    MatIconModule,
    MatButtonModule,
  ]
};


---

Let me know if you'd like this integrated with your Spring Boot backend or want a zip file of the complete Angular component.

