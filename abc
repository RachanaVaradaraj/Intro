To connect your Angular 17 frontend to a Spring Boot backend and perform CRUD operations on the Oracle database table with the structure you provided, follow these steps. I‚Äôll give you complete working code and instructions for:

Spring Boot backend (Java)

Database integration

Angular frontend communication



---

‚úÖ Oracle Table Schema

CREATE TABLE exchange_rates (
  FROMCURR VARCHAR2(10 BYTE) NOT NULL,
  TOCURR VARCHAR2(10 BYTE) NOT NULL,
  RATE     NUMBER,
  LASTMOD  DATE
);


---

üß† Step 1: Spring Boot Backend

1.1. pom.xml Dependencies

<dependencies>
    <dependency>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-web</artifactId>
    </dependency>
    <dependency>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-data-jpa</artifactId>
    </dependency>
    <dependency>
        <groupId>com.oracle.database.jdbc</groupId>
        <artifactId>ojdbc8</artifactId>
        <version>19.3.0.0</version>
    </dependency>
</dependencies>


---

1.2. application.properties

spring.datasource.url=jdbc:oracle:thin:@localhost:1521:xe
spring.datasource.username=your_db_username
spring.datasource.password=your_db_password
spring.datasource.driver-class-name=oracle.jdbc.OracleDriver
spring.jpa.hibernate.ddl-auto=none
spring.jpa.show-sql=true
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.Oracle10gDialect

server.port=8080


---

1.3. Entity: ExchangeRate.java

@Entity
@Table(name = "exchange_rates")
public class ExchangeRate {
    @Id
    @Column(name = "FROMCURR")
    private String fromCurrency;

    @Column(name = "TOCURR")
    private String toCurrency;

    @Column(name = "RATE")
    private Double rate;

    @Column(name = "LASTMOD")
    private Date lastmod;

    // Getters and Setters
}


---

1.4. Repository: ExchangeRateRepository.java

public interface ExchangeRateRepository extends JpaRepository<ExchangeRate, String> {
}


---

1.5. Controller: ExchangeRateController.java

@RestController
@RequestMapping("/api/exchange-rates")
@CrossOrigin(origins = "*")
public class ExchangeRateController {

    @Autowired
    private ExchangeRateRepository repository;

    @GetMapping
    public List<ExchangeRate> getAllRates() {
        return repository.findAll();
    }

    @PostMapping
    public ExchangeRate createRate(@RequestBody ExchangeRate rate) {
        return repository.save(rate);
    }

    @PutMapping("/{fromCurrency}")
    public ExchangeRate updateRate(@PathVariable String fromCurrency, @RequestBody ExchangeRate rate) {
        ExchangeRate existing = repository.findById(fromCurrency).orElseThrow();
        existing.setToCurrency(rate.getToCurrency());
        existing.setRate(rate.getRate());
        existing.setLastmod(rate.getLastmod());
        return repository.save(existing);
    }

    @DeleteMapping("/{fromCurrency}")
    public void deleteRate(@PathVariable String fromCurrency) {
        repository.deleteById(fromCurrency);
    }
}


---

üîÅ Step 2: Angular Frontend Integration

Update your Angular exchange-rates.component.ts with the following:

apiUrl = 'http://localhost:8080/api/exchange-rates';

getRates(): void {
  this.http.get<ExchangeRate[]>(this.apiUrl).subscribe(data => {
    this.exchangeRates = data;
  });
}

addRate(): void {
  this.http.post(this.apiUrl, this.formModel).subscribe(() => this.getRates());
}

updateRate(): void {
  this.http.put(`${this.apiUrl}/${this.formModel.fromCurrency}`, this.formModel)
    .subscribe(() => this.getRates());
}

deleteRate(fromCurrency: string): void {
  this.http.delete(`${this.apiUrl}/${fromCurrency}`)
    .subscribe(() => this.getRates());
}

Be sure to:

Import HttpClientModule in your app module.

Use ngOnInit() to call this.getRates().



---

‚úÖ Summary

Backend: Spring Boot exposes CRUD APIs connected to Oracle DB.

Frontend: Angular calls these APIs and reflects DB updates live.

Fixes included for your form model, calendar icon, and inline edits.


Would you like me to package all backend files (Spring Boot project) into a downloadable ZIP or help update your Angular files with this working integration?

