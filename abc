Thanks for the clarification. Based on your reference Spring Boot project and your earlier requirements, here's the complete working code for a Spring Boot backend that performs CRUD operations on an Oracle table ExchangeRates_Rachana, which has the following structure:

FROMCURR   VARCHAR2(10)
TOCURR     VARCHAR2(10)
RATE       NUMBER
LASTMOD    DATE


---

✅ Project Overview

You will get a REST API that works with the ExchangeRates_Rachana table and supports:

GET /api/exchange-rates — list all exchange rates

POST /api/exchange-rates — add a new rate

PUT /api/exchange-rates/{id} — update an existing rate

DELETE /api/exchange-rates/{id} — delete a rate by composite key



---

✅ Full Project Code

1. pom.xml

Add Oracle JDBC, Spring Boot Web, and JPA:

<dependencies>
    <dependency>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-data-jpa</artifactId>
    </dependency>
    <dependency>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-web</artifactId>
    </dependency>
    <dependency>
        <groupId>com.oracle.database.jdbc</groupId>
        <artifactId>ojdbc8</artifactId>
        <version>19.3.0.0</version>
    </dependency>
</dependencies>


---

2. application.properties

spring.datasource.url=jdbc:oracle:thin:@localhost:1521/XEPDB1
spring.datasource.username=your_user
spring.datasource.password=your_password
spring.datasource.driver-class-name=oracle.jdbc.OracleDriver

spring.jpa.show-sql=true
spring.jpa.hibernate.ddl-auto=none
spring.jpa.database-platform=org.hibernate.dialect.Oracle12cDialect


---

3. ExchangeRateId.java (Composite Key)

package com.example.oracleconnect.entity;

import java.io.Serializable;
import java.util.Objects;
import javax.persistence.*;

@Embeddable
public class ExchangeRateId implements Serializable {

    @Column(name = "FROMCURR")
    private String fromCurr;

    @Column(name = "TOCURR")
    private String toCurr;

    public ExchangeRateId() {}

    public ExchangeRateId(String fromCurr, String toCurr) {
        this.fromCurr = fromCurr;
        this.toCurr = toCurr;
    }

    // Getters, Setters, equals, and hashCode
    // ...

    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof ExchangeRateId)) return false;
        ExchangeRateId that = (ExchangeRateId) o;
        return Objects.equals(fromCurr, that.fromCurr) &&
               Objects.equals(toCurr, that.toCurr);
    }

    @Override
    public int hashCode() {
        return Objects.hash(fromCurr, toCurr);
    }
}


---

4. ExchangeRate.java (Entity)

package com.example.oracleconnect.entity;

import javax.persistence.*;
import java.util.Date;

@Entity
@Table(name = "ExchangeRates_Rachana")
public class ExchangeRate {

    @EmbeddedId
    private ExchangeRateId id;

    @Column(name = "RATE")
    private Double rate;

    @Column(name = "LASTMOD")
    @Temporal(TemporalType.DATE)
    private Date lastMod;

    public ExchangeRate() {}

    public ExchangeRate(ExchangeRateId id, Double rate, Date lastMod) {
        this.id = id;
        this.rate = rate;
        this.lastMod = lastMod;
    }

    // Getters and Setters
    // ...
}


---

5. ExchangeRateRepository.java

package com.example.oracleconnect.repository;

import com.example.oracleconnect.entity.ExchangeRate;
import com.example.oracleconnect.entity.ExchangeRateId;
import org.springframework.data.jpa.repository.JpaRepository;

public interface ExchangeRateRepository extends JpaRepository<ExchangeRate, ExchangeRateId> {
}


---

6. ExchangeRateController.java

package com.example.oracleconnect.controller;

import com.example.oracleconnect.entity.ExchangeRate;
import com.example.oracleconnect.entity.ExchangeRateId;
import com.example.oracleconnect.repository.ExchangeRateRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.*;

import java.util.List;
import java.util.Optional;

@RestController
@RequestMapping("/api/exchange-rates")
@CrossOrigin(origins = "http://localhost:4200")
public class ExchangeRateController {

    @Autowired
    private ExchangeRateRepository repository;

    @GetMapping
    public List<ExchangeRate> getAll() {
        return repository.findAll();
    }

    @PostMapping
    public ExchangeRate create(@RequestBody ExchangeRate rate) {
        return repository.save(rate);
    }

    @PutMapping("/{fromCurr}/{toCurr}")
    public ExchangeRate update(@PathVariable String fromCurr,
                                @PathVariable String toCurr,
                                @RequestBody ExchangeRate rate) {
        ExchangeRateId id = new ExchangeRateId(fromCurr, toCurr);
        Optional<ExchangeRate> existing = repository.findById(id);
        if (existing.isPresent()) {
            return repository.save(rate);
        } else {
            throw new RuntimeException("Rate not found");
        }
    }

    @DeleteMapping("/{fromCurr}/{toCurr}")
    public void delete(@PathVariable String fromCurr,
                       @PathVariable String toCurr) {
        ExchangeRateId id = new ExchangeRateId(fromCurr, toCurr);
        repository.deleteById(id);
    }
}


---

7. OracleTableListApplication.java

package com.example.oracleconnect;

import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;

@SpringBootApplication
public class OracleTableListApplication {
    public static void main(String[] args) {
        SpringApplication.run(OracleTableListApplication.class, args);
    }
}


---

✅ Testing

Once this is running:

Angular can consume http://localhost:8080/api/exchange-rates

You can test using Postman or cURL

Dates should be sent in yyyy-MM-dd format in JSON



---

Would you like me to send this as a downloadable ZIP file? Or generate an Angular service to consume these APIs?

