@RestController
@RequestMapping("/api/discrepancy")
@CrossOrigin(origins = "*")
public class DiscrepancyController {

    @PostMapping("/compare")
    public ResponseEntity<List<String>> compareColumns(
            @RequestParam("file1") MultipartFile file1,
            @RequestParam("file2") MultipartFile file2,
            @RequestParam("column1") String column1,
            @RequestParam("column2") String column2
    ) throws IOException {
        List<String> discrepancies = DiscrepancyService.findDiscrepancies(file1, file2, column1, column2);
        return ResponseEntity.ok(discrepancies);
    }
}








@Service
public class DiscrepancyService {

    public static List<String> findDiscrepancies(MultipartFile file1, MultipartFile file2, String column1, String column2) throws IOException {
        List<String> list1 = extractColumn(file1, column1);
        List<String> list2 = extractColumn(file2, column2);

        Set<String> set1 = new HashSet<>(list1);
        Set<String> set2 = new HashSet<>(list2);

        // Find items in set1 not in set2 (discrepancies)
        return set1.stream().filter(val -> !set2.contains(val)).collect(Collectors.toList());
    }

    private static List<String> extractColumn(MultipartFile file, String columnName) throws IOException {
        List<String> columnValues = new ArrayList<>();
        try (BufferedReader reader = new BufferedReader(new InputStreamReader(file.getInputStream()))) {
            String line;
            String[] headers = reader.readLine().split(",");
            int colIndex = -1;

            for (int i = 0; i < headers.length; i++) {
                if (headers[i].trim().equalsIgnoreCase(columnName.trim())) {
                    colIndex = i;
                    break;
                }
            }

            if (colIndex == -1) {
                throw new IllegalArgumentException("Column not found: " + columnName);
            }

            while ((line = reader.readLine()) != null) {
                String[] fields = line.split(",");
                if (fields.length > colIndex) {
                    columnValues.add(fields[colIndex].trim());
                }
            }
        }
        return columnValues;
    }
}






compareColumns() {
  const formData = new FormData();
  formData.append('file1', this.foFile);
  formData.append('file2', this.boFile);
  formData.append('column1', this.selectedFoColumn);
  formData.append('column2', this.selectedBoColumn);

  this.http.post<string[]>('http://localhost:8080/api/discrepancy/compare', formData)
    .subscribe(discrepancies => {
      this.discrepancies = discrepancies;
    });
}






@Configuration
public class WebConfig implements WebMvcConfigurer {
    @Override
    public void addCorsMappings(CorsRegistry registry) {
        registry.addMapping("/**").allowedOrigins("*").allowedMethods("*");
    }
}