Hereâ€™s the complete solution that covers both frontend (Angular) and backend (Spring Boot) as per your requirements:


---

âœ… Goal:

1. Show a table of all exchange rate data.


2. In the Add popup, fetch only distinct fromCurr and toCurr values from the database to display in dropdowns with a search button.




---

ðŸ§© Spring Boot (Backend)

1. ExchangeRate.java (Entity)

package com.recon_connect.entity;

import jakarta.persistence.*;
import java.util.Date;

@Entity
@Table(name = "ExchangeRates_Rachana")
public class ExchangeRate {
    @Id
    private String fromCurr;

    private String toCurr;
    private double rate;

    @Temporal(TemporalType.DATE)
    private Date lastMod;

    // Getters and Setters
}


---

2. ExchangeRateRepository.java

package com.recon_connect.repository;

import com.recon_connect.entity.ExchangeRate;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.data.jpa.repository.Query;

import java.util.List;

public interface ExchangeRateRepository extends JpaRepository<ExchangeRate, String> {

    @Query("SELECT DISTINCT e.fromCurr FROM ExchangeRate e")
    List<String> findDistinctFromCurr();

    @Query("SELECT DISTINCT e.toCurr FROM ExchangeRate e")
    List<String> findDistinctToCurr();
}


---

3. ExchangeRateController.java

package com.recon_connect.controller;

import com.recon_connect.entity.ExchangeRate;
import com.recon_connect.repository.ExchangeRateRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.*;

import java.util.List;

@RestController
@RequestMapping("/api/exchange-rates")
@CrossOrigin(origins = "*")
public class ExchangeRateController {

    @Autowired
    private ExchangeRateRepository repository;

    @GetMapping
    public List<ExchangeRate> getAllRates() {
        return repository.findAll();
    }

    @GetMapping("/from-currencies")
    public List<String> getFromCurrencies() {
        return repository.findDistinctFromCurr();
    }

    @GetMapping("/to-currencies")
    public List<String> getToCurrencies() {
        return repository.findDistinctToCurr();
    }

    @PostMapping
    public ExchangeRate addRate(@RequestBody ExchangeRate rate) {
        return repository.save(rate);
    }
}


---

ðŸŽ¯ Angular (Frontend)

ðŸ”¹ exchange-rate.service.ts

import { Injectable } from '@angular/core';
import { HttpClient } from '@angular/common/http';
import { Observable } from 'rxjs';

@Injectable({ providedIn: 'root' })
export class ExchangeRateService {
  private apiUrl = 'http://localhost:8080/api/exchange-rates';

  constructor(private http: HttpClient) {}

  getAll(): Observable<any[]> {
    return this.http.get<any[]>(`${this.apiUrl}`);
  }

  getFromCurrencies(): Observable<string[]> {
    return this.http.get<string[]>(`${this.apiUrl}/from-currencies`);
  }

  getToCurrencies(): Observable<string[]> {
    return this.http.get<string[]>(`${this.apiUrl}/to-currencies`);
  }

  addRate(rate: any): Observable<any> {
    return this.http.post(`${this.apiUrl}`, rate);
  }
}


---

ðŸ”¹ exchange-rate.component.ts

import { Component, OnInit } from '@angular/core';
import { ExchangeRateService } from './exchange-rate.service';
import { MatDialog } from '@angular/material/dialog';

@Component({
  selector: 'app-exchange-rate',
  templateUrl: './exchange-rate.component.html',
  styleUrls: ['./exchange-rate.component.css']
})
export class ExchangeRateComponent implements OnInit {
  rates: any[] = [];

  constructor(private service: ExchangeRateService, private dialog: MatDialog) {}

  ngOnInit(): void {
    this.loadRates();
  }

  loadRates() {
    this.service.getAll().subscribe(data => this.rates = data);
  }

  openAddPopup() {
    const dialogRef = this.dialog.open(AddEditPopupComponent, {
      width: '400px',
      data: null
    });

    dialogRef.afterClosed().subscribe(() => this.loadRates());
  }
}


---

ðŸ”¹ add-edit-popup.component.ts

import { Component, Inject, OnInit } from '@angular/core';
import { MAT_DIALOG_DATA, MatDialogRef } from '@angular/material/dialog';
import { ExchangeRateService } from './exchange-rate.service';
import { FormBuilder, FormGroup } from '@angular/forms';

@Component({
  selector: 'app-add-edit-popup',
  templateUrl: './add-edit-popup.component.html',
  styleUrls: ['./add-edit-popup.component.css']
})
export class AddEditPopupComponent implements OnInit {
  form: FormGroup;
  fromCurrencies: string[] = [];
  toCurrencies: string[] = [];

  constructor(
    public dialogRef: MatDialogRef<AddEditPopupComponent>,
    @Inject(MAT_DIALOG_DATA) public data: any,
    private service: ExchangeRateService,
    private fb: FormBuilder
  ) {
    this.form = this.fb.group({
      fromCurr: [''],
      toCurr: [''],
      rate: [''],
      lastMod: ['']
    });
  }

  ngOnInit(): void {
    this.service.getFromCurrencies().subscribe(data => this.fromCurrencies = data);
    this.service.getToCurrencies().subscribe(data => this.toCurrencies = data);
  }

  save(): void {
    if (this.form.valid) {
      this.service.addRate(this.form.value).subscribe(() => {
        this.dialogRef.close();
      });
    }
  }

  cancel(): void {
    this.dialogRef.close();
  }
}


---

ðŸ”¹ add-edit-popup.component.html

<h2 mat-dialog-title>Add Exchange Rate</h2>
<div mat-dialog-content>
  <form [formGroup]="form">
    <mat-form-field appearance="outline" style="width: 100%;">
      <mat-label>From Currency</mat-label>
      <mat-select formControlName="fromCurr">
        <mat-option *ngFor="let curr of fromCurrencies" [value]="curr">{{ curr }}</mat-option>
      </mat-select>
    </mat-form-field>

    <mat-form-field appearance="outline" style="width: 100%;">
      <mat-label>To Currency</mat-label>
      <mat-select formControlName="toCurr">
        <mat-option *ngFor="let curr of toCurrencies" [value]="curr">{{ curr }}</mat-option>
      </mat-select>
    </mat-form-field>

    <mat-form-field appearance="outline" style="width: 100%;">
      <mat-label>Rate</mat-label>
      <input matInput type="number" formControlName="rate" />
    </mat-form-field>

    <mat-form-field appearance="outline" style="width: 100%;">
      <mat-label>Last Modified</mat-label>
      <input matInput [matDatepicker]="picker" formControlName="lastMod">
      <mat-datepicker-toggle matSuffix [for]="picker"></mat-datepicker-toggle>
      <mat-datepicker #picker></mat-datepicker>
    </mat-form-field>
  </form>
</div>
<div mat-dialog-actions align="end">
  <button mat-button (click)="cancel()">Cancel</button>
  <button mat-flat-button color="primary" (click)="save()">Save</button>
</div>


---

âœ… Final Notes

The popup is fully dynamic with dropdowns populated from backend.

You can add filters/search bars in mat-select with MatSelectSearch or similar libraries later.

Ensure CORS is properly configured on Spring Boot if accessing from different ports.



---

Would you like me to zip this up as a sample project or help with the dropdown filter functionality next?

