Based on your request and the screenshots provided, here's the complete Angular 17 standalone component code with a popup form that matches the FIS Data Integrity Manager UI.

This includes:

A scrollable table with inline editable fields.

A calendar icon that triggers a datepicker.

A popup form (via MatDialog) for adding exchange rates.



---

✅ exchange-rate.component.ts

import { Component } from '@angular/core';
import { CommonModule } from '@angular/common';
import { MatTableModule } from '@angular/material/table';
import { MatFormFieldModule } from '@angular/material/form-field';
import { MatInputModule } from '@angular/material/input';
import { MatIconModule } from '@angular/material/icon';
import { MatButtonModule } from '@angular/material/button';
import { MatDatepickerModule } from '@angular/material/datepicker';
import { MatNativeDateModule } from '@angular/material/core';
import { FormsModule } from '@angular/forms';
import { MatDialog, MatDialogModule } from '@angular/material/dialog';
import { AddExchangeRateDialogComponent } from './add-exchange-rate-dialog.component';

export interface ExchangeRate {
  fromCurrency: string;
  toCurrency: string;
  rate: number;
  effectiveDate: string;
}

@Component({
  selector: 'app-exchange-rate',
  standalone: true,
  imports: [
    CommonModule,
    FormsModule,
    MatTableModule,
    MatFormFieldModule,
    MatInputModule,
    MatIconModule,
    MatButtonModule,
    MatDatepickerModule,
    MatNativeDateModule,
    MatDialogModule,
    AddExchangeRateDialogComponent
  ],
  templateUrl: './exchange-rate.component.html',
  styleUrls: ['./exchange-rate.component.css']
})
export class ExchangeRateComponent {
  displayedColumns: string[] = ['fromCurrency', 'toCurrency', 'rate', 'effectiveDate', 'actions'];
  exchangeRates: ExchangeRate[] = [
    { fromCurrency: 'ZWL', toCurrency: 'USD', rate: 1.0, effectiveDate: '2025-05-28' }
  ];

  constructor(private dialog: MatDialog) {}

  openAddDialog(): void {
    const dialogRef = this.dialog.open(AddExchangeRateDialogComponent, {
      width: '400px',
    });

    dialogRef.afterClosed().subscribe(result => {
      if (result) {
        this.exchangeRates.push(result);
      }
    });
  }

  deleteRow(index: number) {
    this.exchangeRates.splice(index, 1);
  }
}


---

✅ exchange-rate.component.html

<div class="header">
  <button mat-mini-fab color="primary" (click)="openAddDialog()">
    <mat-icon>add</mat-icon>
  </button>
</div>

<div class="table-container">
  <table mat-table [dataSource]="exchangeRates" class="mat-elevation-z8">

    <ng-container matColumnDef="fromCurrency">
      <th mat-header-cell *matHeaderCellDef> From Currency </th>
      <td mat-cell *matCellDef="let row">
        <input matInput [(ngModel)]="row.fromCurrency" />
      </td>
    </ng-container>

    <ng-container matColumnDef="toCurrency">
      <th mat-header-cell *matHeaderCellDef> To Currency </th>
      <td mat-cell *matCellDef="let row">
        <input matInput [(ngModel)]="row.toCurrency" />
      </td>
    </ng-container>

    <ng-container matColumnDef="rate">
      <th mat-header-cell *matHeaderCellDef> Exchange Rate </th>
      <td mat-cell *matCellDef="let row">
        <input matInput type="number" [(ngModel)]="row.rate" />
      </td>
    </ng-container>

    <ng-container matColumnDef="effectiveDate">
      <th mat-header-cell *matHeaderCellDef> Effective Date </th>
      <td mat-cell *matCellDef="let row">
        <mat-form-field appearance="standard">
          <input matInput [matDatepicker]="picker" [(ngModel)]="row.effectiveDate" />
          <mat-datepicker-toggle matSuffix [for]="picker">
            <mat-icon matDatepickerToggleIcon>calendar_today</mat-icon>
          </mat-datepicker-toggle>
          <mat-datepicker #picker></mat-datepicker>
        </mat-form-field>
      </td>
    </ng-container>

    <ng-container matColumnDef="actions">
      <th mat-header-cell *matHeaderCellDef></th>
      <td mat-cell *matCellDef="let row; let i = index">
        <button mat-icon-button color="warn" (click)="deleteRow(i)">
          <mat-icon>delete</mat-icon>
        </button>
      </td>
    </ng-container>

    <tr mat-header-row *matHeaderRowDef="displayedColumns"></tr>
    <tr mat-row *matRowDef="let row; columns: displayedColumns;"></tr>
  </table>
</div>


---

✅ exchange-rate.component.css

.header {
  display: flex;
  justify-content: flex-start;
  padding: 12px;
}

.table-container {
  max-height: 500px;
  overflow: auto;
  margin: 0 12px;
}

table {
  width: 100%;
  border-spacing: 0;
}

mat-form-field {
  width: 100%;
}


---

✅ add-exchange-rate-dialog.component.ts

import { Component } from '@angular/core';
import { MatDialogRef } from '@angular/material/dialog';
import { MatFormFieldModule } from '@angular/material/form-field';
import { MatInputModule } from '@angular/material/input';
import { MatButtonModule } from '@angular/material/button';
import { MatIconModule } from '@angular/material/icon';
import { MatDatepickerModule } from '@angular/material/datepicker';
import { MatNativeDateModule } from '@angular/material/core';
import { FormsModule } from '@angular/forms';
import { CommonModule } from '@angular/common';

@Component({
  selector: 'app-add-exchange-rate-dialog',
  standalone: true,
  imports: [
    CommonModule,
    FormsModule,
    MatFormFieldModule,
    MatInputModule,
    MatButtonModule,
    MatIconModule,
    MatDatepickerModule,
    MatNativeDateModule
  ],
  template: `
    <h2 mat-dialog-title>Add Exchange Rate</h2>
    <div mat-dialog-content>
      <mat-form-field appearance="fill">
        <mat-label>From Currency</mat-label>
        <input matInput [(ngModel)]="data.fromCurrency" />
      </mat-form-field>

      <mat-form-field appearance="fill">
        <mat-label>To Currency</mat-label>
        <input matInput [(ngModel)]="data.toCurrency" />
      </mat-form-field>

      <mat-form-field appearance="fill">
        <mat-label>Exchange Rate</mat-label>
        <input matInput type="number" [(ngModel)]="data.rate" />
      </mat-form-field>

      <mat-form-field appearance="fill">
        <mat-label>Effective Date</mat-label>
        <input matInput [matDatepicker]="picker" [(ngModel)]="data.effectiveDate" />
        <mat-datepicker-toggle matSuffix [for]="picker"></mat-datepicker-toggle>
        <mat-datepicker #picker></mat-datepicker>
      </mat-form-field>
    </div>
    <div mat-dialog-actions align="end">
      <button mat-button (click)="onCancel()">Cancel</button>
      <button mat-flat-button color="primary" (click)="onSave()">Save</button>
    </div>
  `
})
export class AddExchangeRateDialogComponent {
  data = {
    fromCurrency: '',
    toCurrency: '',
    rate: 0,
    effectiveDate: ''
  };

  constructor(private dialogRef: MatDialogRef<AddExchangeRateDialogComponent>) {}

  onCancel(): void {
    this.dialogRef.close();
  }

  onSave(): void {
    this.dialogRef.close(this.data);
  }
}


---

Let me know if you want:

Dialog validations

Auto-formatting dates

Integration with a backend API

Tooltips or icons like the ones in the screenshots


I'll help you enhance it step-by-step.

