Thanks for the update. I'll provide the complete working Angular 17 standalone component code for exchange-rates.component.ts, based on your errors and the backend integration we‚Äôve discussed.


---

‚úÖ Corrected exchange-rates.component.ts

This includes:

Proper @Component decorator with standalone: true

Correct ExchangeRate interface definition

Fixes for fromCurrencies, toCurrencies

Working fetchRates(), fetchCurrencies(), save(), edit()


import { Component, OnInit } from '@angular/core';
import { CommonModule } from '@angular/common';
import { HttpClient } from '@angular/common/http';
import { FormsModule } from '@angular/forms';
import { MatDialogModule } from '@angular/material/dialog';
import { MatInputModule } from '@angular/material/input';
import { MatButtonModule } from '@angular/material/button';
import { MatIconModule } from '@angular/material/icon';
import { MatDatepickerModule } from '@angular/material/datepicker';
import { MatNativeDateModule } from '@angular/material/core';

interface ExchangeRate {
  fromCurr: string;
  toCurr: string;
  rate: number;
  lastMod: string;
}

@Component({
  selector: 'app-exchange-rates',
  standalone: true,
  templateUrl: './exchange-rates.component.html',
  styleUrls: ['./exchange-rates.component.css'],
  imports: [
    CommonModule,
    FormsModule,
    MatDialogModule,
    MatInputModule,
    MatButtonModule,
    MatIconModule,
    MatDatepickerModule,
    MatNativeDateModule
  ]
})
export class ExchangeRatesComponent implements OnInit {
  rates: ExchangeRate[] = [];
  newRate: ExchangeRate = { fromCurr: '', toCurr: '', rate: 0, lastMod: '' };
  isEditing: boolean = false;
  originalFromCurr: string = '';

  fromCurrencies: string[] = [];
  toCurrencies: string[] = [];

  apiUrl = 'http://localhost:8080/api/exchange-rates';

  constructor(private http: HttpClient) {}

  ngOnInit(): void {
    this.fetchRates();
    this.fetchCurrencies();
  }

  fetchRates(): void {
    this.http.get<ExchangeRate[]>(this.apiUrl).subscribe(data => {
      this.rates = data;
    });
  }

  fetchCurrencies(): void {
    this.http.get<string[]>(`${this.apiUrl}/from-currencies`).subscribe(data => {
      this.fromCurrencies = data;
    });
    this.http.get<string[]>(`${this.apiUrl}/to-currencies`).subscribe(data => {
      this.toCurrencies = data;
    });
  }

  save(): void {
    const payload = { ...this.newRate };
    if (this.isEditing) {
      this.http.put(`${this.apiUrl}/${this.originalFromCurr}`, payload).subscribe(() => {
        this.fetchRates();
        this.resetForm();
      });
    } else {
      this.http.post<ExchangeRate>(this.apiUrl, payload).subscribe(() => {
        this.fetchRates();
        this.resetForm();
      });
    }
  }

  edit(rate: ExchangeRate): void {
    this.newRate = { ...rate };
    this.originalFromCurr = rate.fromCurr;
    this.isEditing = true;
  }

  delete(fromCurr: string): void {
    this.http.delete(`${this.apiUrl}/${fromCurr}`).subscribe(() => {
      this.fetchRates();
    });
  }

  resetForm(): void {
    this.newRate = { fromCurr: '', toCurr: '', rate: 0, lastMod: '' };
    this.isEditing = false;
    this.originalFromCurr = '';
  }
}


---

‚úÖ Make sure your exchange-rates.component.html uses the correct property bindings:

Example snippet:

<select [(ngModel)]="newRate.fromCurr">
  <option *ngFor="let from of fromCurrencies" [value]="from">{{ from }}</option>
</select>

<select [(ngModel)]="newRate.toCurr">
  <option *ngFor="let to of toCurrencies" [value]="to">{{ to }}</option>
</select>


---

üîÅ Update any parent components:

In the parent (e.g. layout.component.ts), make sure you're importing ExchangeRatesComponent properly:

import { Component } from '@angular/core';
import { RouterOutlet } from '@angular/router';
import { SidebarComponent } from '../sidebar/sidebar.component';
import { ExchangeRatesComponent } from '../exchange-rates/exchange-rates.component';

@Component({
  selector: 'app-layout',
  standalone: true,
  imports: [RouterOutlet, SidebarComponent, ExchangeRatesComponent],
  templateUrl: './layout.component.html',
})
export class LayoutComponent {}


---

If this still doesn‚Äôt work, feel free to upload your current full .ts and .html files ‚Äî I‚Äôll correct and send them back to you immediately.

