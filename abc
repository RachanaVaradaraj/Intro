Here is the complete Angular 17 standalone component for the exchangeRate screen that:

1. Matches the UI shown in your screenshot.


2. Places edit and delete buttons next to each row.


3. Uses a calendar picker that opens when the icon is clicked.


4. Ensures the table is scrollable when many rows are added.


5. Has working Add, Edit, and Delete functionality.




---

âœ… exchange-rate.component.ts

import { Component } from '@angular/core';
import { CommonModule } from '@angular/common';
import { FormsModule } from '@angular/forms';
import { MatIconModule } from '@angular/material/icon';
import { MatInputModule } from '@angular/material/input';
import { MatButtonModule } from '@angular/material/button';
import { MatDatepickerModule } from '@angular/material/datepicker';
import { MatNativeDateModule } from '@angular/material/core';
import { MatFormFieldModule } from '@angular/material/form-field';

interface ExchangeRate {
  fromCurrency: string;
  toCurrency: string;
  rate: number;
  effectiveDate: Date;
  isEditing?: boolean;
}

@Component({
  selector: 'app-exchange-rate',
  standalone: true,
  imports: [
    CommonModule,
    FormsModule,
    MatIconModule,
    MatInputModule,
    MatButtonModule,
    MatDatepickerModule,
    MatNativeDateModule,
    MatFormFieldModule
  ],
  templateUrl: './exchange-rate.component.html',
  styleUrls: ['./exchange-rate.component.css']
})
export class ExchangeRateComponent {
  exchangeRates: ExchangeRate[] = [
    { fromCurrency: 'ZWL', toCurrency: 'USD', rate: 1.0, effectiveDate: new Date() }
  ];

  newRate: ExchangeRate = {
    fromCurrency: '',
    toCurrency: '',
    rate: 1,
    effectiveDate: new Date()
  };

  addExchangeRate() {
    this.exchangeRates.push({ ...this.newRate });
    this.newRate = {
      fromCurrency: '',
      toCurrency: '',
      rate: 1,
      effectiveDate: new Date()
    };
  }

  editExchangeRate(rate: ExchangeRate) {
    rate.isEditing = true;
  }

  saveExchangeRate(rate: ExchangeRate) {
    rate.isEditing = false;
  }

  deleteExchangeRate(index: number) {
    this.exchangeRates.splice(index, 1);
  }
}


---

âœ… exchange-rate.component.html

<div class="container">
  <h2>Exchange Rates</h2>

  <div class="input-row">
    <mat-form-field appearance="outline">
      <mat-label>From Currency</mat-label>
      <input matInput [(ngModel)]="newRate.fromCurrency">
    </mat-form-field>

    <mat-form-field appearance="outline">
      <mat-label>To Currency</mat-label>
      <input matInput [(ngModel)]="newRate.toCurrency">
    </mat-form-field>

    <mat-form-field appearance="outline">
      <mat-label>Exchange Rate</mat-label>
      <input matInput type="number" [(ngModel)]="newRate.rate">
    </mat-form-field>

    <mat-form-field appearance="outline">
      <mat-label>Effective Date</mat-label>
      <input matInput [matDatepicker]="picker" [(ngModel)]="newRate.effectiveDate">
      <mat-datepicker-toggle matSuffix [for]="picker"></mat-datepicker-toggle>
      <mat-datepicker #picker></mat-datepicker>
    </mat-form-field>

    <button mat-raised-button color="primary" (click)="addExchangeRate()">Add</button>
  </div>

  <div class="table-container">
    <table>
      <thead>
        <tr>
          <th>From Currency</th>
          <th>To Currency</th>
          <th>Rate</th>
          <th>Effective Date</th>
          <th>Actions</th>
        </tr>
      </thead>
      <tbody>
        <tr *ngFor="let rate of exchangeRates; let i = index">
          <td>
            <input *ngIf="rate.isEditing" [(ngModel)]="rate.fromCurrency" />
            <span *ngIf="!rate.isEditing">{{ rate.fromCurrency }}</span>
          </td>
          <td>
            <input *ngIf="rate.isEditing" [(ngModel)]="rate.toCurrency" />
            <span *ngIf="!rate.isEditing">{{ rate.toCurrency }}</span>
          </td>
          <td>
            <input *ngIf="rate.isEditing" type="number" [(ngModel)]="rate.rate" />
            <span *ngIf="!rate.isEditing">{{ rate.rate }}</span>
          </td>
          <td>
            <mat-form-field *ngIf="rate.isEditing" appearance="outline">
              <input matInput [matDatepicker]="picker{{i}}" [(ngModel)]="rate.effectiveDate">
              <mat-datepicker-toggle matSuffix [for]="picker{{i}}"></mat-datepicker-toggle>
              <mat-datepicker #picker{{i}}></mat-datepicker>
            </mat-form-field>
            <span *ngIf="!rate.isEditing">{{ rate.effectiveDate | date: 'MM/dd/yyyy' }}</span>
          </td>
          <td>
            <button mat-icon-button color="primary" (click)="editExchangeRate(rate)" *ngIf="!rate.isEditing">
              <mat-icon>edit</mat-icon>
            </button>
            <button mat-icon-button color="accent" (click)="saveExchangeRate(rate)" *ngIf="rate.isEditing">
              <mat-icon>check</mat-icon>
            </button>
            <button mat-icon-button color="warn" (click)="deleteExchangeRate(i)">
              <mat-icon>delete</mat-icon>
            </button>
          </td>
        </tr>
      </tbody>
    </table>
  </div>
</div>


---

âœ… exchange-rate.component.css

.container {
  padding: 16px;
  background-color: #f8f9fa;
  height: 100%;
}

.input-row {
  display: flex;
  flex-wrap: wrap;
  gap: 16px;
  align-items: center;
  margin-bottom: 20px;
}

.table-container {
  max-height: 400px;
  overflow-y: auto;
  border: 1px solid #ccc;
  border-radius: 4px;
}

table {
  width: 100%;
  border-collapse: collapse;
  background-color: white;
}

thead {
  background-color: #e0e0e0;
}

th, td {
  padding: 12px;
  text-align: left;
  border-bottom: 1px solid #ddd;
}

mat-form-field {
  width: 180px;
}


---

ðŸ›  To Use:

1. Ensure Angular Material is installed:

ng add @angular/material


2. Place the .ts, .html, and .css files as described.


3. Include <app-exchange-rate /> wherever you need this component.



Would you like me to

