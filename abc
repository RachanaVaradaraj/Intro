Thanks for the clarification! Since you don’t have a separate dialog component file and want everything integrated within your existing exchange-rate component, I’ll provide a complete working solution where the popup form is embedded directly inside the component using *ngIf instead of a separate dialog component.


---

✅ Updated: exchange-rate.component.ts

import { Component } from '@angular/core';

export interface ExchangeRate {
  fromCurrency: string;
  toCurrency: string;
  rate: number;
  effectiveDate: string;
}

@Component({
  selector: 'app-exchange-rate',
  standalone: true,
  imports: [
    CommonModule,
    FormsModule,
    MatTableModule,
    MatFormFieldModule,
    MatInputModule,
    MatIconModule,
    MatButtonModule,
    MatDatepickerModule,
    MatNativeDateModule,
  ],
  templateUrl: './exchange-rate.component.html',
  styleUrls: ['./exchange-rate.component.css']
})
export class ExchangeRateComponent {
  displayedColumns: string[] = ['fromCurrency', 'toCurrency', 'rate', 'effectiveDate', 'actions'];
  exchangeRates: ExchangeRate[] = [
    { fromCurrency: 'ZWL', toCurrency: 'USD', rate: 1.0, effectiveDate: '2025-05-28' }
  ];

  showPopup = false;

  newRate: ExchangeRate = {
    fromCurrency: '',
    toCurrency: '',
    rate: 0,
    effectiveDate: ''
  };

  openPopup(): void {
    this.newRate = { fromCurrency: '', toCurrency: '', rate: 0, effectiveDate: '' };
    this.showPopup = true;
  }

  closePopup(): void {
    this.showPopup = false;
  }

  saveExchangeRate(): void {
    this.exchangeRates.push({ ...this.newRate });
    this.showPopup = false;
  }

  deleteRow(index: number): void {
    this.exchangeRates.splice(index, 1);
  }
}


---

✅ Updated: exchange-rate.component.html

<!-- Top Add Button -->
<div class="header">
  <button mat-mini-fab color="primary" (click)="openPopup()">
    <mat-icon>add</mat-icon>
  </button>
</div>

<!-- Popup Form -->
<div class="popup-form" *ngIf="showPopup">
  <div class="popup-content">
    <h3>Add Exchange Rate</h3>

    <mat-form-field appearance="fill">
      <mat-label>From Currency</mat-label>
      <input matInput [(ngModel)]="newRate.fromCurrency">
    </mat-form-field>

    <mat-form-field appearance="fill">
      <mat-label>To Currency</mat-label>
      <input matInput [(ngModel)]="newRate.toCurrency">
    </mat-form-field>

    <mat-form-field appearance="fill">
      <mat-label>Exchange Rate</mat-label>
      <input matInput type="number" [(ngModel)]="newRate.rate">
    </mat-form-field>

    <mat-form-field appearance="fill">
      <mat-label>Effective Date</mat-label>
      <input matInput [matDatepicker]="picker" [(ngModel)]="newRate.effectiveDate">
      <mat-datepicker-toggle matSuffix [for]="picker"></mat-datepicker-toggle>
      <mat-datepicker #picker></mat-datepicker>
    </mat-form-field>

    <div class="popup-actions">
      <button mat-button (click)="closePopup()">Cancel</button>
      <button mat-flat-button color="primary" (click)="saveExchangeRate()">Save</button>
    </div>
  </div>
</div>

<!-- Table -->
<div class="table-container">
  <table mat-table [dataSource]="exchangeRates" class="mat-elevation-z8">

    <ng-container matColumnDef="fromCurrency">
      <th mat-header-cell *matHeaderCellDef>From Currency</th>
      <td mat-cell *matCellDef="let row">
        <input matInput [(ngModel)]="row.fromCurrency" />
      </td>
    </ng-container>

    <ng-container matColumnDef="toCurrency">
      <th mat-header-cell *matHeaderCellDef>To Currency</th>
      <td mat-cell *matCellDef="let row">
        <input matInput [(ngModel)]="row.toCurrency" />
      </td>
    </ng-container>

    <ng-container matColumnDef="rate">
      <th mat-header-cell *matHeaderCellDef>Exchange Rate</th>
      <td mat-cell *matCellDef="let row">
        <input matInput type="number" [(ngModel)]="row.rate" />
      </td>
    </ng-container>

    <ng-container matColumnDef="effectiveDate">
      <th mat-header-cell *matHeaderCellDef>Effective Date</th>
      <td mat-cell *matCellDef="let row">
        <mat-form-field appearance="standard">
          <input matInput [matDatepicker]="picker2" [(ngModel)]="row.effectiveDate" />
          <mat-datepicker-toggle matSuffix [for]="picker2">
            <mat-icon>calendar_today</mat-icon>
          </mat-datepicker-toggle>
          <mat-datepicker #picker2></mat-datepicker>
        </mat-form-field>
      </td>
    </ng-container>

    <ng-container matColumnDef="actions">
      <th mat-header-cell *matHeaderCellDef></th>
      <td mat-cell *matCellDef="let row; let i = index">
        <button mat-icon-button color="warn" (click)="deleteRow(i)">
          <mat-icon>delete</mat-icon>
        </button>
      </td>
    </ng-container>

    <tr mat-header-row *matHeaderRowDef="displayedColumns"></tr>
    <tr mat-row *matRowDef="let row; columns: displayedColumns;"></tr>
  </table>
</div>


---

✅ Updated: exchange-rate.component.css

.header {
  display: flex;
  justify-content: flex-start;
  padding: 12px;
}

.table-container {
  max-height: 500px;
  overflow: auto;
  padding: 0 12px;
}

table {
  width: 100%;
}

mat-form-field {
  width: 100%;
}

.popup-form {
  position: fixed;
  top: 50%;
  left: 50%;
  transform: translate(-50%, -50%);
  background: white;
  padding: 24px;
  box-shadow: 0 4px 20px rgba(0, 0, 0, 0.2);
  border-radius: 8px;
  z-index: 1000;
}

.popup-content {
  display: flex;
  flex-direction: column;
  gap: 16px;
  width: 300px;
}

.popup-actions {
  display: flex;
  justify-content: flex-end;
  gap: 8px;
}


---

✅ Required Imports

Ensure these modules are added to your main.ts bootstrap if you're using standalone components:

import { provideAnimations } from '@angular/platform-browser/animations';

And when bootstrapping:

bootstrapApplication(AppComponent, {
  providers: [provideAnimations()],
});


---

Let me know if you also want:

Backdrop behind popup

Popup to close when clicking outside

Form validations or dropdowns for currencies


I'll help you tweak it to match the FIS Data Integrity Manager UI exactly.

