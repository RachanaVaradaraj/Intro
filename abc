Great â€” since you'd like a popup form inline (not a separate dialog component), Iâ€™ll create a toggleable popup row within the same table, just like the FIS Data Integrity Manager style.


---

âœ… Key Features:

Popup form appears above the table when the Add button is clicked.

Uses the same fields: From Currency, To Currency, Rate, Effective Date.

On submit, adds the data to the table.

No separate component is used â€” everything stays in the same file.



---

ðŸ§¾ Final Updated Code

ðŸ”§ exchange-rates.component.ts

import { Component } from '@angular/core';
import { CommonModule } from '@angular/common';
import { FormsModule } from '@angular/forms';
import { MatTableModule } from '@angular/material/table';
import { MatFormFieldModule } from '@angular/material/form-field';
import { MatInputModule } from '@angular/material/input';
import { MatDatepickerModule } from '@angular/material/datepicker';
import { MatNativeDateModule } from '@angular/material/core';
import { MatIconModule } from '@angular/material/icon';
import { MatButtonModule } from '@angular/material/button';

@Component({
  selector: 'app-exchange-rates',
  standalone: true,
  imports: [
    CommonModule,
    FormsModule,
    MatTableModule,
    MatFormFieldModule,
    MatInputModule,
    MatDatepickerModule,
    MatNativeDateModule,
    MatIconModule,
    MatButtonModule
  ],
  templateUrl: './exchange-rates.component.html',
  styleUrls: ['./exchange-rates.component.css']
})
export class ExchangeRatesComponent {
  displayedColumns: string[] = ['fromCurrency', 'toCurrency', 'rate', 'effectiveDate', 'actions'];

  exchangeRates = [
    { fromCurrency: 'USD', toCurrency: 'EUR', rate: 0.85, effectiveDate: new Date() }
  ];

  showPopup = false;

  newRate = {
    fromCurrency: '',
    toCurrency: '',
    rate: 0,
    effectiveDate: new Date()
  };

  togglePopup() {
    this.showPopup = !this.showPopup;
    this.resetForm();
  }

  addExchangeRate() {
    this.exchangeRates.push({ ...this.newRate });
    this.togglePopup();
  }

  deleteRow(index: number) {
    this.exchangeRates.splice(index, 1);
  }

  editRow(index: number) {
    console.log('Edit row', index);
  }

  private resetForm() {
    this.newRate = {
      fromCurrency: '',
      toCurrency: '',
      rate: 0,
      effectiveDate: new Date()
    };
  }
}


---

ðŸ§¾ exchange-rates.component.html

<div class="exchange-rate-container">
  <div class="header">
    <h2>Exchange Rates</h2>
    <button mat-icon-button color="primary" (click)="togglePopup()">
      <mat-icon>add</mat-icon>
    </button>
  </div>

  <!-- Inline Popup Form -->
  <div *ngIf="showPopup" class="popup-form">
    <mat-form-field appearance="fill">
      <input matInput placeholder="From Currency" [(ngModel)]="newRate.fromCurrency" />
    </mat-form-field>
    <mat-form-field appearance="fill">
      <input matInput placeholder="To Currency" [(ngModel)]="newRate.toCurrency" />
    </mat-form-field>
    <mat-form-field appearance="fill">
      <input matInput type="number" placeholder="Rate" [(ngModel)]="newRate.rate" />
    </mat-form-field>
    <mat-form-field appearance="fill">
      <input matInput [matDatepicker]="popupPicker" placeholder="Effective Date" [(ngModel)]="newRate.effectiveDate" />
      <mat-datepicker-toggle matSuffix [for]="popupPicker">
        <mat-icon matDatepickerToggleIcon>calendar_today</mat-icon>
      </mat-datepicker-toggle>
      <mat-datepicker #popupPicker></mat-datepicker>
    </mat-form-field>
    <div class="popup-buttons">
      <button mat-raised-button color="primary" (click)="addExchangeRate()">Save</button>
      <button mat-button color="warn" (click)="togglePopup()">Cancel</button>
    </div>
  </div>

  <div class="table-wrapper">
    <table mat-table [dataSource]="exchangeRates" class="mat-elevation-z1 full-width-table">
      <ng-container matColumnDef="fromCurrency">
        <th mat-header-cell *matHeaderCellDef>From Currency</th>
        <td mat-cell *matCellDef="let row">
          <input matInput [(ngModel)]="row.fromCurrency" />
        </td>
      </ng-container>

      <ng-container matColumnDef="toCurrency">
        <th mat-header-cell *matHeaderCellDef>To Currency</th>
        <td mat-cell *matCellDef="let row">
          <input matInput [(ngModel)]="row.toCurrency" />
        </td>
      </ng-container>

      <ng-container matColumnDef="rate">
        <th mat-header-cell *matHeaderCellDef>Rate</th>
        <td mat-cell *matCellDef="let row">
          <input matInput type="number" [(ngModel)]="row.rate" />
        </td>
      </ng-container>

      <ng-container matColumnDef="effectiveDate">
        <th mat-header-cell *matHeaderCellDef>Effective Date</th>
        <td mat-cell *matCellDef="let row">
          <mat-form-field appearance="fill">
            <input matInput [matDatepicker]="picker" [(ngModel)]="row.effectiveDate" />
            <mat-datepicker-toggle matSuffix [for]="picker">
              <mat-icon matDatepickerToggleIcon>calendar_today</mat-icon>
            </mat-datepicker-toggle>
            <mat-datepicker #picker></mat-datepicker>
          </mat-form-field>
        </td>
      </ng-container>

      <ng-container matColumnDef="actions">
        <th mat-header-cell *matHeaderCellDef>Actions</th>
        <td mat-cell *matCellDef="let row; let i = index">
          <button mat-icon-button color="accent" (click)="editRow(i)">
            <mat-icon>edit</mat-icon>
          </button>
          <button mat-icon-button color="warn" (click)="deleteRow(i)">
            <mat-icon>delete</mat-icon>
          </button>
        </td>
      </ng-container>

      <tr mat-header-row *matHeaderRowDef="displayedColumns"></tr>
      <tr mat-row *matRowDef="let row; columns: displayedColumns;"></tr>
    </table>
  </div>
</div>


---

ðŸŽ¨ exchange-rates.component.css

.exchange-rate-container {
  padding: 16px;
}

.header {
  display: flex;
  justify-content: space-between;
  align-items: center;
  margin-bottom: 12px;
}

.table-wrapper {
  overflow-x: auto;
  max-height: 400px;
  border: 1px solid #ccc;
  border-radius: 4px;
}

.full-width-table {
  width: 100%;
  min-width: 700px;
}

.popup-form {
  display: flex;
  gap: 12px;
  flex-wrap: wrap;
  align-items: center;
  padding: 12px;
  margin-bottom: 16px;
  background-color: #f5f5f5;
  border-radius: 8px;
}

.popup-buttons {
  display: flex;
  gap: 10px;
  align-items: center;
}


---

Let me know if you want:

Form validation (required fields, min/max values).

A flag to disable editing after saving.

Highlighting edited rows.


Shall I add any of these?

